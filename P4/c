<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/2.8.1/gl-matrix-min.js"></script>
    <title>Ejercicio 5</title>
</head>

<body onload="init()">
    <canvas id="myCanvas" width="640" height="480"></canvas><br>
    <b>Rotation</b>
    <input type="checkbox" name="rotation" checked>
    <input type="range" id="speed" min="1" max="3" value="1" step="1"> Speed<br>
    <b>WebGL primitive</b>
    <input type="radio" name="primitive" value="triangles" checked> Triangles
    <input type="radio" name="primitive" value="lines"> Lines<br>
    <b>Projection type</b>
    <input type="radio" name="projection" value="perspective" checked> Perspective
    <input type="radio" name="projection" value="orthographic"> Orthographic<br>
    <b>Decoration</b>
    <input type="radio" name="christmas" value="no" checked> No
    <input type="radio" name="christmas" value="yes"> Yes<br>

    <script id="shaderVs" type="x-shader/x-vertex">
        attribute vec4 a_Position;
        attribute vec3 a_Color;
        attribute vec2 a_TextureCoord;
        uniform mat4 u_pMatrix;
        uniform mat4 u_vMatrix;
        uniform mat4 u_mvMatrix;
        varying highp vec4 v_Color;
        varying highp vec2 v_TextureCoord;
        void main(){
            gl_Position = u_pMatrix * u_vMatrix * u_mvMatrix * a_Position;
            v_Color = vec4(a_Color, 1.0);
            v_TextureCoord = a_TextureCoord;
        }
    </script>

    <script id="shaderFs" type="x-shader/x-fragment">
        varying highp vec4 v_Color;
        varying highp vec2 v_TextureCoord;
        uniform sampler2D u_Texture;
        uniform sampler2D u_DecorationTexture;
        uniform bool u_UseDecoration;
        void main(){
            if (u_UseDecoration) {
                gl_FragColor = texture2D(u_DecorationTexture, v_TextureCoord);
            } else {
                gl_FragColor = texture2D(u_Texture, v_TextureCoord);
            }
        }
    </script>

    <script>
        var gl,
            canvas,
            count = 0.0,
            ratio,
            z = 3,
            projectionValue = document.querySelector('input[name="projection"]:checked').value,
            useDecoration = false;

        function init(){
            
            // Get canvas object from the DOM and Init WebGL Context
            canvas = document.getElementById("myCanvas");
            gl = canvas.getContext("webgl");

            if (!gl) {
            console.log("FAILED TO GET THE RENDERING CONTEXT FOR WEBGL.");
            return;
            }

            // Init Shaders 
            var vs = document.getElementById('shaderVs').innerHTML,
                fs = document.getElementById('shaderFs').innerHTML;

            if (!initShaders(gl, vs, fs)){
            console.log("FAILED TO INITIALIZE SHADERS.");
            return;
            }

            // Init vertex shader
            initVertexShader(gl);

            // Init projection matrix
            initProjection(gl, canvas);

            // Set clear canvas color
            gl.clearColor(0.0, 0.0, 0.0, 1.0);

            // Hidden surface removal
            gl.enable(gl.DEPTH_TEST);

            // Event listener for mouse wheel
            document.addEventListener('wheel', function (event) {
                if (projectionValue == 'perspective'){
                    z = event.deltaY > 0 ? z - 1 : z + 1;
                }
            });

            // Event listener for decoration option
            document.querySelector('input[name="christmas"]').addEventListener('change', function(event) {
                useDecoration = event.target.value === 'yes';
            });

            drawScene();
        }

        // Rest of the code...

        function drawScene() {
            // Clear the canvas
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

            // Set the perspective or orthographic projection matrix
            if (projectionValue == 'perspective') {
            var pMatrix = mat4.create();
            mat4.perspective(pMatrix, 45, canvas.width / canvas.height, 0.1, 100.0);
            } else {
            var pMatrix = mat4.create();
            mat4.ortho(pMatrix, -canvas.width / 2, canvas.width / 2, -canvas.height / 2, canvas.height / 2, 0.1, 100.0);
            }

            // Set the view matrix
            var vMatrix = mat4.create();
            mat4.lookAt(vMatrix, [0, 0, z], [0, 0, 0], [0, 1, 0]);

            // Set the model-view matrix
            var mvMatrix = mat4.create();
            mat4.rotate(mvMatrix, mvMatrix, count, [0, 1, 0]);

            // Set the uniforms
            var pMatrixUniform = gl.getUniformLocation(gl.program, "u_pMatrix");
            gl.uniformMatrix4fv(pMatrixUniform, false, pMatrix);

            var vMatrixUniform = gl.getUniformLocation(gl.program, "u_vMatrix");
            gl.uniformMatrix4fv(vMatrixUniform, false, vMatrix);

            var mvMatrixUniform = gl.getUniformLocation(gl.program, "u_mvMatrix");
            gl.uniformMatrix4fv(mvMatrixUniform, false, mvMatrix);

            var useDecorationUniform = gl.getUniformLocation(gl.program, "u_UseDecoration");
            gl.uniform1i(useDecorationUniform, useDecoration ? 1 : 0);

            // Draw the triangles or lines
            var primitive = document.querySelector('input[name="primitive"]:checked').value;
            if (primitive == 'triangles') {
            gl.drawElements(gl.TRIANGLES, indexes.length, gl.UNSIGNED_SHORT, 0);
            } else {
            gl.drawElements(gl.LINES, indexes.length, gl.UNSIGNED_SHORT, 0);
            }

            // Update the rotation angle
            var rotationCheckbox = document.querySelector('input[name="rotation"]');
            if (rotationCheckbox.checked) {
            var speed = document.getElementById('speed').value;
            count += 0.01 * speed;
            }

            // Request the next frame
            requestAnimationFrame(drawScene);
        }

        function initVertexShader(gl) {
            // Vertexes and colors (X, Y, Z, R, G, B)
            var vertexesAndColors = [
            // CUBO 1 (IZQUIERDA)
            // BACK - AZUL
            -0.75, -0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 0
            -0.25, -0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 1
            -0.25, 0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 2
            -0.75, 0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 3

            // FRONT - ROJO
            -0.75, -0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 4
            -0.25, -0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 5
            -0.25, 0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 6
            -0.75, 0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 7

            // LEFT - AMARILLO
            -0.75, -0.50, -0.25, 1.0, 1.0, 0.0, // Vértice 8
            -0.75, 0.50, -0.25, 1.0, 1.0, 0.0, // Vértice 9
            -0.75, 0.50, 0.25, 1.0, 1.0, 0.0, // Vértice 10
            -0.75, -0.50, 0.25, 1.0, 1.0, 0.0, // Vértice 11

            // RIGHT - VERDE
            -0.25, -0.50, -0.25, 0.0, 1.0, 0.0, // Vértice 12
            -0.25, 0.50, -0.25, 0.0, 1.0, 0.0, // Vértice 13
            -0.25, 0.50, 0.25, 0.0, 1.0, 0.0, // Vértice 14
            -0.25, -0.50, 0.25, 0.0, 1.0, 0.0, // Vértice 15

            // BOTTOM - TURQUESA
            -0.75, -0.50, -0.25, 0.0, 1.0, 1.0, // Vértice 16
            -0.75, -0.50, 0.25, 0.0, 1.0, 1.0, // Vértice 17
            -0.25, -0.50, 0.25, 0.0, 1.0, 1.0, // Vértice 18
            -0.25, -0.50, -0.25, 0.0, 1.0, 1.0, // Vértice 19

            // CUBO 2 (DERECHA)
            // BACK - AZUL
            0.25, -0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 20
            0.75, -0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 21
            0.75, 0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 22
            0.25, 0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 23

            // FRONT - ROJO
            0.25, -0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 24
            0.75, -0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 25
            0.75, 0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 26
            0.25, 0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 27

            // LEFT - AMARILLO
            0.25, -0.50, -0.25, 1.0, 1.0, 0.0, // Vértice 28
            0.25, 0.50, -0.25, 1.0, 1.0, 0.0, // Vértice 29
            0.25, 0.50, 0.25, 1.0, 1.0, 0.0, // Vértice 30
            0.25, -0.50, 0.25, 1.0, 1.0, 0.0, // Vértice 31

            // RIGHT - VERDE
            0.75, -0.50, -0.25, 0.0, 1.0, 0.0, // Vértice 32
            0.75, 0.50, -0.25, 0.0, 1.0, 0.0, // Vértice 33
            0.75, 0.50, 0.25, 0.0, 1.0, 0.0, // Vértice 34
            0.75, -0.50, 0.25, 0.0, 1.0, 0.0, // Vértice 35

            // BOTTOM - TURQUESA
            0.25, -0.50, -0.25, 0.0, 1.0, 1.0, // Vértice 36
            0.25, -0.50, 0.25, 0.0, 1.0, 1.0, // Vértice 37
            0.75, -0.50, 0.25, 0.0, 1.0, 1.0, // Vértice 38
            0.75, -0.50, -0.25, 0.0, 1.0, 1.0, // Vértice 39

            // PIRÁMIDE
            // 
            0.00, 1.00, 0.00, 1.0, 0.0, 0.0, // Vértice 40
            // Base de la pirámide
            // (v1) (Amarillo)
            -0.75, 0.50, -0.75, 1.0, 1.0, 0.0, // Vértice 41 (Amarillo)
            // (v2) (Azul)
            -0.75, 0.50, 0.75, 0.0, 0.0, 1.0, // Vértice 42 (Azul)
            // (v3) (Verde)
            0.75, 0.50, 0.75, 0.0, 1.0, 0.0, // Vértice 43 (Verde)
            // (v4) (Turquesa)
            0.75, 0.50, -0.75, 0.0, 1.0, 1.0 // Vértice 44 (Turquesa)

            ];

            // Texture coordinates
            var textureCoords = [
            // Texture coordinates...
            ];
            
            // Write a_Position and a_Color using gl.ARRAY_BUFFER
            gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexesAndColors), gl.STATIC_DRAW);

            var vertexPositionAttribute = gl.getAttribLocation(gl.program, "a_Position");
            gl.enableVertexAttribArray(vertexPositionAttribute);
            gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 4 * (3 + 3), 0);

            var vertexColorAttribute = gl.getAttribLocation(gl.program, "a_Color");
            gl.enableVertexAttribArray(vertexColorAttribute);
            gl.vertexAttribPointer(vertexColorAttribute, 3, gl.FLOAT, false, 4 * (3 + 3), 4 * 3);

            // Write indexes in gl.ELEMENT_ARRAY_BUFFER
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexes), gl.STATIC_DRAW);
        }

            // Write a_Position, a_Color, and a_TextureCoord using gl.ARRAY_BUFFER
            gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexesAndColors), gl.STATIC_DRAW);

            var vertexPositionAttribute = gl.getAttribLocation(gl.program, "a_Position");
            gl.enableVertexAttribArray(vertexPositionAttribute);
            gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 4 * (3 + 3 + 2), 0);

            var vertexColorAttribute = gl.getAttribLocation(gl.program, "a_Color");
            gl.enableVertexAttribArray(vertexColorAttribute);
            gl.vertexAttribPointer(vertexColorAttribute, 3, gl.FLOAT, false, 4 * (3 + 3 + 2), 4 * 3);

            var textureCoordAttribute = gl.getAttribLocation(gl.program, "a_TextureCoord");
            gl.enableVertexAttribArray(textureCoordAttribute);
            gl.vertexAttribPointer(textureCoordAttribute, 2, gl.FLOAT, false, 4 * (3 + 3 + 2), 4 * (3 + 3));

            // Write indexes in gl.ELEMENT_ARRAY_BUFFER
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexes), gl.STATIC_DRAW);
        

        // Rest of the code...
    </script>

</html>
