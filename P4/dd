<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/2.8.1/gl-matrix-min.js"></script>
    <title>Ejercicio 5</title>
</head>

<body onload="init()">
    <canvas id="myCanvas" width="640" height="480"></canvas><br>
    <b>Rotation</b>
    <input type="checkbox" name="rotation" checked>
    <input type="range" id="speed" min="1" max="3" value="1" step="1"> Speed<br>
    <b>WebGL primitive</b>
    <input type="radio" name="primitive" value="triangles" checked> Triangles
    <input type="radio" name="primitive" value="lines"> Lines<br>
    <b>Projection type</b>
    <input type="radio" name="projection" value="perspective" checked> Perspective
    <input type="radio" name="projection" value="orthographic"> Orthographic<br>
    <b>Decoration</b>
    <input type="radio" name="decoration" value="no" checked onchange="toggleDecoration()"> No
    <input type="radio" name="decoration" value="yes" onchange="toggleDecoration()"> Yes<br>

    <script id="shaderVs" type="x-shader/x-vertex">
        attribute vec4 a_Position;
        attribute vec3 a_Color;
        attribute vec2 a_TexCoord; // New attribute for texture coordinates
        varying highp vec4 v_Color;
        varying highp vec2 v_TexCoord; // Pass texture coordinates to fragment shader
        uniform mat4 u_pMatrix;
        uniform mat4 u_vMatrix;
        uniform mat4 u_mvMatrix;
        void main(){
            gl_Position = u_pMatrix * u_vMatrix * u_mvMatrix * a_Position;
            v_Color = vec4(a_Color, 1.0);
            v_TexCoord = a_TexCoord; // Pass texture coordinates to fragment shader
        }
    </script>

    <script id="shaderFs" type="x-shader/x-fragment">
        precision mediump float;
        varying highp vec4 v_Color;
        varying highp vec2 v_TexCoord; // Received texture coordinates from vertex shader
        uniform sampler2D u_Texture; // Texture sampler
        void main(){
            gl_FragColor = texture2D(u_Texture, v_TexCoord) * v_Color; // Multiply texture color with vertex color
        }
    </script>

    <script>
        var gl,
            canvas,
            count = 0.0,
            ratio,
            z = 3,
            projectionValue = document.querySelector('input[name="projection"]:checked').value,
            decoration = false, // New variable to track decoration state
            textureLoaded = false, // New variable to track if texture is loaded
            texture, // New variable to store texture object
            textureCoordsBuffer, // New variable to store texture coordinates buffer
            textureCoordsAttribute; // New variable to store texture coordinates attribute location

        function init() {

            // Get canvas object from the DOM and Init WebGL Context
            canvas = document.getElementById("myCanvas");
            gl = canvas.getContext("webgl");

            if (!gl) {
                console.log("FAILED TO GET THE RENDERING CONTEXT FOR WEBGL.");
                return;
            }

            // Init Shaders 
            var vs = document.getElementById('shaderVs').innerHTML,
                fs = document.getElementById('shaderFs').innerHTML;

            if (!initShaders(gl, vs, fs)) {
                console.log("FAILED TO INITIALIZE SHADERS.");
                return;
            }

            // Init vertex shader
            initVertexShader(gl);

            // Init projection matrix
            initProjection(gl, canvas);

            // Load textures
            loadTextures();

            // Set clear canvas color
            gl.clearColor(0.0, 0.0, 0.0, 1.0);

            // Hidden surface removal
            gl.enable(gl.DEPTH_TEST);

            // Event listener for mouse wheel
            document.addEventListener('wheel', function (event) {
                if (projectionValue == 'perspective') {
                    z = event.deltaY > 0 ? z - 1 : z + 1;
                }
            });

            // Event listener for key presses
            document.addEventListener('keydown', function (event) {
                handleKeyPress(event);
            });

            drawScene();
        }

        function drawScene() {
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

            projectionValue = document.querySelector('input[name="projection"]:checked').value,
                u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
                u_vMatrix = gl.getUniformLocation(gl.program, "u_vMatrix"),
                ratio = canvas.width / canvas.height;

            switch (projectionValue) {
                case "perspective":
                    var pMatrix = mat4.perspective(mat4.create(), toRadian(60), ratio, 0.1, 100),
                        vMatrix = mat4.lookAt(mat4.create(), [0, 0, z], [0, 0, 0], [0, 1, 0]);
                    break;

                case "orthographic":
                    var pMatrix = mat4.ortho(mat4.create(), -ratio, ratio, -1.0, 1.50, -1.0, 1.50),
                        vMatrix = mat4.create();
                    break;
                default:
            }

            gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
            gl.uniformMatrix4fv(u_vMatrix, false, vMatrix);

            var rotationChecked = document.querySelector('input[name="rotation"]').checked,
                primitiveValue = document.querySelector('input[name="primitive"]:checked').value,
                mvMatrix = mat4.fromRotation(mat4.create(), count, [0, 1, 0]),
                u_mvMatrix = gl.getUniformLocation(gl.program, "u_mvMatrix");

            gl.uniformMatrix4fv(u_mvMatrix, false, mvMatrix);

            var speed = parseInt(document.getElementById("speed").value);

            if (rotationChecked) {
                count += 0.005 * speed;
            }

            if (primitiveValue == "triangles") {
                gl.drawArrays(gl.TRIANGLES, 0, 36);
            } else {
                gl.drawArrays(gl.LINES, 0, 36);
            }

            requestAnimationFrame(drawScene);
        }

        function initVertexShader(gl) {
            var verticesColors = new Float32Array([
                0.5, -0.5, -0.5, 1.0, 0.0, 0.0, 0.0, 0.0, // Front face
                0.5, 0.5, -0.5, 0.0, 1.0, 0.0, 0.0, 1.0,
                -0.5, 0.5, -0.5, 0.0, 0.0, 1.0, 1.0, 1.0,
                -0.5, -0.5, -0.5, 1.0, 1.0, 0.0, 1.0, 0.0,
                0.5, -0.5, 0.5, 1.0, 0.0, 0.0, 0.0, 0.0, // Back face
                0.5, 0.5, 0.5, 0.0, 1.0, 0.0, 0.0, 1.0,
                -0.5, 0.5, 0.5, 0.0, 0.0, 1.0, 1.0, 1.0,
                -0.5, -0.5, 0.5, 1.0, 1.0, 0.0, 1.0, 0.0,
                0.5, -0.5, -0.5, 1.0, 0.0, 0.0, 0.0, 0.0, // Right face
                0.5, 0.5, -0.5, 0.0, 1.0, 0.0, 0.0, 1.0,
                0.5, 0.5, 0.5, 0.0, 0.0, 1.0, 1.0, 1.0,
                0.5, -0.5, 0.5, 1.0, 1.0, 0.0, 1.0, 0.0,
                -0.5, -0.5, -0.5, 1.0, 0.0, 0.0, 0.0, 0.0, // Left face
                -0.5, 0.5, -0.5, 0.0, 1.0, 0.0, 0.0, 1.0,
                -0.5, 0.5, 0.5, 0.0, 0.0, 1.0, 1.0, 1.0,
                -0.5, -0.5, 0.5, 1.0, 1.0, 0.0, 1.0, 0.0,
                0.5, 0.5, -0.5, 1.0, 0.0, 0.0, 0.0, 0.0, // Top face
                0.5, 0.5, 0.5, 0.0, 1.0, 0.0, 0.0, 1.0,
                -0.5, 0.5, 0.5, 0.0, 0.0, 1.0, 1.0, 1.0,
                -0.5, 0.5, -0.5, 1.0, 1.0, 0.0, 1.0, 0.0,
                0.5, -0.5, -0.5, 1.0, 0.0, 0.0, 0.0, 0.0, // Bottom face
                0.5, -0.5, 0.5, 0.0, 1.0, 0.0, 0.0, 1.0,
                -0.5, -0.5, 0.5, 0.0, 0.0, 1.0, 1.0, 1.0,
                -0.5, -0.5, -0.5, 1.0, 1.0, 0.0, 1.0, 0.0,
            ]);

            var indices = new Uint8Array([
                0, 1, 2, 0, 2, 3, // Front face
                4, 5, 6, 4, 6, 7, // Back face
                8, 9, 10, 8, 10, 11, // Right face
                12, 13, 14, 12, 14, 15, // Left face
                16, 17, 18, 16, 18, 19, // Top face
                20, 21, 22, 20, 22, 23 // Bottom face
            ]);

            // Create buffer for vertices and colors
            var vertexColorBuffer = gl.createBuffer();
            if (!vertexColorBuffer) {
                console.log("FAILED TO CREATE THE BUFFER OBJECT.");
                return -1;
            }

            // Bind the buffer object to target
            gl.bindBuffer(gl.ARRAY_BUFFER, vertexColorBuffer);
            // Write data into the buffer object
            gl.bufferData(gl.ARRAY_BUFFER, verticesColors, gl.STATIC_DRAW);

            // Assign the buffer object to a_Position and a_Color variables
            var FSIZE = verticesColors.BYTES_PER_ELEMENT;

            var a_Position = gl.getAttribLocation(gl.program, "a_Position");
            var a_Color = gl.getAttribLocation(gl.program, "a_Color");

            if (a_Position < 0 || a_Color < 0) {
                console.log("FAILED TO GET THE STORAGE LOCATION OF A_POSITION OR A_COLOR.");
                return -1;
            }

            gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, FSIZE * 8, 0);
            gl.enableVertexAttribArray(a_Position);

            gl.vertexAttribPointer(a_Color, 3, gl.FLOAT, false, FSIZE * 8, FSIZE * 3);
            gl.enableVertexAttribArray(a_Color);

            // Assign the buffer object to a_TexCoord variable
            textureCoordsBuffer = gl.createBuffer();
            gl.bindBuffer(gl.ARRAY_BUFFER, textureCoordsBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, verticesColors, gl.STATIC_DRAW);
            var a_TexCoord = gl.getAttribLocation(gl.program, "a_TexCoord");

            if (a_TexCoord < 0) {
                console.log("Failed to get the storage location of a_TexCoord");
                return -1;
            }

            gl.vertexAttribPointer(a_TexCoord, 2, gl.FLOAT, false, FSIZE * 8, FSIZE * 6);
            gl.enableVertexAttribArray(a_TexCoord);

            // Unbind the buffer object
            gl.bindBuffer(gl.ARRAY_BUFFER, null);

            // Create buffer for indices
            var indexBuffer = gl.createBuffer();
            if (!indexBuffer) {
                console.log("Failed to create the buffer object");
                return -1;
            }

            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);

            return indices.length;
        }

        function initTextures(gl, n) {
            var texture = gl.createTexture(); // Create a texture object
            if (!texture) {
                console.log("Failed to create the texture object");
                return false;
            }

            var u_Sampler = gl.getUniformLocation(gl.program, "u_Sampler");
            if (!u_Sampler) {
                console.log("Failed to get the storage location of u_Sampler");
                return false;
            }

            var image = new Image(); // Create the image object
            if (!image) {
                console.log("Failed to create the image object");
                return false;
            }

            // Register the event handler to be called when image loading is completed
            image.onload = function () {
                loadTexture(gl, n, texture, u_Sampler, image);
            };

            // Tell the browser to load an image
            image.src = "sky.jpg";

            return true;
        }

        function loadTexture(gl, n, texture, u_Sampler, image) {
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1); // Flip the image's y axis
            // Enable texture unit0
            gl.activeTexture(gl.TEXTURE0);
            // Bind the texture object to the target
            gl.bindTexture(gl.TEXTURE_2D, texture);

            // Set texture parameters
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
            // Set the texture image
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image);

            // Set the texture unit 0 to the sampler
            gl.uniform1i(u_Sampler, 0);

            // Clear the texture object
            gl.bindTexture(gl.TEXTURE_2D, null);
        }
    </script>
</body>

</html>
