<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/2.8.1/gl-matrix-min.js"></script>
    <title>Ejercicio 5</title>
</head>

<body>
    <canvas id="myCanvas" width="640" height="480"></canvas><br>
    <b>Rotation</b>
    <input type="checkbox" name="rotation" checked>
    <input type="range" id="speed" min="1" max="3" value="1" step="1"> Speed<br>
    <b>WebGL primitive</b>
    <input type="radio" name="primitive" value="triangles" checked> Triangles
    <input type="radio" name="primitive" value="lines"> Lines<br>
    <b>Projection type</b>
    <input type="radio" name="projection" value="perspective" checked> Perspective
    <input type="radio" name="projection" value="orthographic"> Orthographic<br>
    <b>Decoration</b>
    <input type="radio" name="christmas" value="no" checked> No
    <input type="radio" name="christmas" value="yes"> Yes<br>

    <script id="shaderVs" type="x-shader/x-vertex">
        attribute vec4 a_Position;
        attribute vec3 a_Color;
        attribute vec2 a_TexCoord; // Add texture coordinates attribute
        uniform mat4 u_pMatrix;
        uniform mat4 u_vMatrix;
        uniform mat4 u_mvMatrix;
        varying highp vec4 v_Color;
        varying highp vec2 v_TexCoord; // Pass texture coordinates to fragment shader
        void main(){
            gl_Position = u_pMatrix * u_vMatrix * u_mvMatrix * a_Position;
            v_Color = vec4(a_Color, 1.0);
            v_TexCoord = a_TexCoord; // Assign texture coordinates
        }
    </script>

    <script id="shaderFs" type="x-shader/x-fragment">
        precision mediump float;
        varying highp vec4 v_Color;
        varying highp vec2 v_TexCoord; // Receive texture coordinates from vertex shader
        uniform sampler2D u_Texture; // Texture sampler
        uniform sampler2D u_DecorationTexture; // Decoration texture sampler
        uniform bool u_ApplyDecoration; // Flag to apply decoration texture
        void main(){
            vec4 color = texture2D(u_Texture, v_TexCoord); // Original texture color
            if (u_ApplyDecoration) {
                vec4 decorationColor = texture2D(u_DecorationTexture, v_TexCoord); // Decoration texture color
                gl_FragColor = mix(color, decorationColor, 0.5); // Mix original and decoration colors
            } else {
                gl_FragColor = color; // Use original color if decoration is not applied
            }
        }
    </script>

    <script>
        var gl,
            canvas,
            count = 0.0,
            ratio,
            z = 3,
            projectionValue,
            applyDecoration = false;

        // Texture variables
        var texture,
            decorationTexture;

        function init() {
            // Get canvas object from the DOM and Init WebGL Context
            canvas = document.getElementById("myCanvas");
            gl = canvas.getContext("webgl");

            if (!gl) {
                console.log("FAILED TO GET THE RENDERING CONTEXT FOR WEBGL.");
                return;
            }

            // Init Shaders 
            var vs = document.getElementById('shaderVs').innerHTML,
                fs = document.getElementById('shaderFs').innerHTML;

            if (!initShaders(gl, vs, fs)) {
                console.log("FAILED TO INITIALIZE SHADERS.");
                return;
            }

            // Init vertex shader
            initVertexBuffers(gl);

            // Init projection matrix
            initProjection(gl, canvas);

            // Set clear canvas color
            gl.clearColor(0.0, 0.0, 0.0, 1.0);

            // Hidden surface removal
            gl.enable(gl.DEPTH_TEST);

            // Init textures
            initTexturesAndDraw(gl);
        }

        function drawScene() {
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

            projectionValue = document.querySelector('input[name="projection"]:checked').value,
                u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
                u_vMatrix = gl.getUniformLocation(gl.program, "u_vMatrix"),
                ratio = canvas.width / canvas.height;

            switch (projectionValue) {
                case "perspective":
                    var pMatrix = glMatrix.mat4.perspective(glMatrix.mat4.create(), toRadian(60), ratio, 0.1, 100),
                        vMatrix = glMatrix.mat4.lookAt(glMatrix.mat4.create(), [0, 0, z], [0, 0, 0], [0, 1, 0]);
                    break;

                case "orthographic":
                    var pMatrix = glMatrix.mat4.ortho(glMatrix.mat4.create(), -ratio, ratio, -1.0, 1.50, -1.0, 1.50),
                        vMatrix = glMatrix.mat4.create();
                    break;
                default:
            }

            gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
            gl.uniformMatrix4fv(u_vMatrix, false, vMatrix);

            var rotationChecked = document.querySelector('input[name="rotation"]').checked,
                primitiveValue = document.querySelector('input[name="primitive"]:checked').value,
                mvMatrix = glMatrix.mat4.fromRotation(glMatrix.mat4.create(), count, [0, 1, 0]),
                u_mvMatrix = gl.getUniformLocation(gl.program, "u_mvMatrix");

            gl.uniformMatrix4fv(u_mvMatrix, false, mvMatrix);

            var speed = parseInt(document.getElementById("speed").value);

            if (rotationChecked) {
                count += 0.01 * speed;
            }

            switch (primitiveValue) {
                case "triangles":
                    // DRAW PRIMITIVE ELEMENTS FOR FIRST CUBE
                    gl.drawElements(gl.TRIANGLES, 6 * 3, gl.UNSIGNED_SHORT, 0);
                    // DRAW PRIMITIVE ELEMENTS FOR SECOND CUBE
                    gl.drawElements(gl.TRIANGLES, 6 * 3, gl.UNSIGNED_SHORT, 6 * 3 * 2);
                    // DRAW PRIMITIVE ELEMENTS FOR PYRAMID
                    gl.drawElements(gl.TRIANGLES, 6 * 3 * 2, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2); // Se multiplicó por 2 para dibujar los 6 triángulos de la pirámide
                    break;
                case "lines":
                    // DRAW LINES FOR FIRST CUBE
                    gl.drawElements(gl.LINES, 6 * 4, gl.UNSIGNED_SHORT, 0);
                    // DRAW LINES FOR SECOND CUBE
                    gl.drawElements(gl.LINES, 6 * 4, gl.UNSIGNED_SHORT, 6 * 3 * 2);
                    // DRAW LINES FOR PYRAMID
                    gl.drawElements(gl.LINES, 6 * 5, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2); // Se multiplicó por 2 para dibujar las 10 líneas de la pirámide
                    break;
                default:
            }
            requestAnimationFrame(drawScene);
        }

        function initVertexBuffers(gl) {
            // Vertexes and colors (X, Y, Z, R, G, B)
var vertexesAndColors = [
    // CUBO 1 (IZQUIERDA)
    // BACK - AZUL
    -0.75, -0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 0
    -0.25, -0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 1
    -0.25, 0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 2
    -0.75, 0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 3

    // FRONT - ROJO
    -0.75, -0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 4
    -0.25, -0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 5
    -0.25, 0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 6
    -0.75, 0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 7

    // LEFT - AMARILLO
    -0.75, -0.50, -0.25, 1.0, 1.0, 0.0, // Vértice 8
    -0.75, 0.50, -0.25, 1.0, 1.0, 0.0, // Vértice 9
    -0.75, 0.50, 0.25, 1.0, 1.0, 0.0, // Vértice 10
    -0.75, -0.50, 0.25, 1.0, 1.0, 0.0, // Vértice 11

    // RIGHT - VERDE
    -0.25, -0.50, -0.25, 0.0, 1.0, 0.0, // Vértice 12
    -0.25, 0.50, -0.25, 0.0, 1.0, 0.0, // Vértice 13
    -0.25, 0.50, 0.25, 0.0, 1.0, 0.0, // Vértice 14
    -0.25, -0.50, 0.25, 0.0, 1.0, 0.0, // Vértice 15

    // BOTTOM - TURQUESA
    -0.75, -0.50, -0.25, 0.0, 1.0, 1.0, // Vértice 16
    -0.75, -0.50, 0.25, 0.0, 1.0, 1.0, // Vértice 17
    -0.25, -0.50, 0.25, 0.0, 1.0, 1.0, // Vértice 18
    -0.25, -0.50, -0.25, 0.0, 1.0, 1.0, // Vértice 19

    // CUBO 2 (DERECHA)
    // BACK - AZUL
    0.25, -0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 20
    0.75, -0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 21
    0.75, 0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 22
    0.25, 0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 23

    // FRONT - ROJO
    0.25, -0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 24
    0.75, -0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 25
    0.75, 0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 26
    0.25, 0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 27

    // LEFT - AMARILLO
    0.25, -0.50, -0.25, 1.0, 1.0, 0.0, // Vértice 28
    0.25, 0.50, -0.25, 1.0, 1.0, 0.0, // Vértice 29
    0.25, 0.50, 0.25, 1.0, 1.0, 0.0, // Vértice 30
    0.25, -0.50, 0.25, 1.0, 1.0, 0.0, // Vértice 31

    // RIGHT - VERDE
    0.75, -0.50, -0.25, 0.0, 1.0, 0.0, // Vértice 32
    0.75, 0.50, -0.25, 0.0, 1.0, 0.0, // Vértice 33
    0.75, 0.50, 0.25, 0.0, 1.0, 0.0, // Vértice 34
    0.75, -0.50, 0.25, 0.0, 1.0, 0.0, // Vértice 35

    // BOTTOM - TURQUESA
    0.25, -0.50, -0.25, 0.0, 1.0, 1.0, // Vértice 36
    0.25, -0.50, 0.25, 0.0, 1.0, 1.0, // Vértice 37
    0.75, -0.50, 0.25, 0.0, 1.0, 1.0, // Vértice 38
    0.75, -0.50, -0.25, 0.0, 1.0, 1.0, // Vértice 39

    // PIRÁMIDE
     // 
     0.00, 1.00, 0.00, 1.0, 0.0, 0.0, // Vértice 40
// Base de la pirámide
// (v1) (Amarillo)
-0.75, 0.50, -0.75, 1.0, 1.0, 0.0, // Vértice 41 (Amarillo)
// (v2) (Azul)
-0.75, 0.50, 0.75, 0.0, 0.0, 1.0, // Vértice 42 (Azul)
// (v3) (Verde)
0.75, 0.50, 0.75, 0.0, 1.0, 0.0, // Vértice 43 (Verde)
// (v4) (Turquesa)
0.75, 0.50, -0.75, 0.0, 1.0, 1.0 // Vértice 44 (Turquesa)

        ];


// Indexes (for drawing squares using triangles)
var indexes = [
    // CUBO 1
    0, 1, 2,    // Triángulo #1
    0, 2, 3,    // Triángulo #2
    4, 5, 6,    // Triángulo #3
    4, 6, 7,    // Triángulo #4
    8, 9, 10,   // Triángulo #5
    8, 10, 11,  // Triángulo #6
    12, 13, 14, // Triángulo #7
    12, 14, 15, // Triángulo #8
    16, 17, 18, // Triángulo #9
    16, 18, 19, // Triángulo #10
    // CUBO 2
    20, 21, 22,    // Triángulo #11
    20, 22, 23,    // Triángulo #12
    24, 25, 26,    // Triángulo #13
    24, 26, 27,    // Triángulo #14
    28, 29, 30,    // Triángulo #15
    28, 30, 31,    // Triángulo #16
    32, 33, 34,    // Triángulo #17
    32, 34, 35,    // Triángulo #18
    36, 37, 38,    // Triángulo #19
    36, 38, 39,    // Triángulo #20
    // Pirámide
    40, 41, 42, // Triángulo #21 (base)
    40, 42, 43, // Triángulo #22 (base)
    40, 43, 44, // Triángulo #23 (base)
    40, 44, 41, // Triángulo #24 (base)
    41, 42, 43, // Triángulo #25 (caras laterales)
    41, 43, 44, // Triángulo #26 (caras laterales)
    42, 43, 44, // Triángulo #27 (caras laterales)
    42, 44, 45, // Triángulo #28 (caras laterales)
    43, 44, 45, // Triángulo #29 (caras laterales)
    41, 45, 42, // Triángulo #30 (caras laterales)
    40, 41, 45, // Triángulo #31 (caras inferiores)
    40, 45, 44, // Triángulo #32 (caras inferiores)
    40, 44, 43, // Triángulo #33 (caras inferiores)
    40, 43, 42  // Triángulo #34 (caras inferiores)
];
            var FSIZE = vertexesAndColors.BYTES_PER_ELEMENT;

            var vertexColorbuffer = gl.createBuffer();
            var indexBuffer = gl.createBuffer();

            if (!vertexColorbuffer || !indexBuffer) {
                console.log("FAILED TO CREATE BUFFER OBJECT(S).");
                return -1;
            }

            // Bind the buffer object to target
            gl.bindBuffer(gl.ARRAY_BUFFER, vertexColorbuffer);
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);

            // Write data into the buffer object
            gl.bufferData(gl.ARRAY_BUFFER, vertexesAndColors, gl.STATIC_DRAW);
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);

            var a_Position = gl.getAttribLocation(gl.program, 'a_Position'),
                a_Color = gl.getAttribLocation(gl.program, 'a_Color');

            if (a_Position < 0 || a_Color < 0) {
                console.log("FAILED TO GET THE STORAGE LOCATION OF ATTRIBUTE.");
                return -1;
            }

            // Assign the buffer object to the attribute variable
            gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, FSIZE * 6, 0);
            gl.vertexAttribPointer(a_Color, 3, gl.FLOAT, false, FSIZE * 6, FSIZE * 3);

            // Enable the assignment to a variable
            gl.enableVertexAttribArray(a_Position);
            gl.enableVertexAttribArray(a_Color);

            return indices.length;
        }

        function initProjection(gl, canvas) {
            var u_pMatrix = gl.getUniformLocation(gl.program, 'u_pMatrix');
            var pMatrix = glMatrix.mat4.create();
            glMatrix.mat4.perspective(pMatrix, toRadian(60), canvas.width / canvas.height, 0.1, 100);
            gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
        }

        function toRadian(angle) {
            return angle * Math.PI / 180;
        }

        function initTexturesAndDraw(gl) {
            // Texture setup
            var u_Texture = gl.getUniformLocation(gl.program, 'u_Texture');
            var u_DecorationTexture = gl.getUniformLocation(gl.program, 'u_DecorationTexture');
            var u_ApplyDecoration = gl.getUniformLocation(gl.program, 'u_ApplyDecoration');

            texture = gl.createTexture();
            decorationTexture = gl.createTexture();

            var image = new Image();
            image.src = 'portal.jpg'; 
            image.onload = function () {
                loadTexture(gl, texture, u_Texture, image, 0);
            };

            var decorationImage = new Image();
            decorationImage.src = 'light.jpg'; 
            decorationImage.onload = function () {
                loadTexture(gl, decorationTexture, u_DecorationTexture, decorationImage, 1);
            };

            // Draw the scene
            drawScene();
        }

        function loadTexture(gl, texture, u_Texture, image, textureUnit) {
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);
            gl.activeTexture(gl.TEXTURE0 + textureUnit);
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image);
            gl.uniform1i(u_Texture, textureUnit);
        }

        function main() {
            init();
        }

        window.onload = main;
    </script>
</body>

</html>
