<!DOCTYPE html>
<html>

<head>

    <title> Práctica 6 - Félix Martínez Alonso </title>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/3.4.2/gl-matrix-min.js"></script>

    <!-- Al seleccionar la luz de navidad, a veces sale la luz bien superpuesta y a veces sale el arbol mas oscuro, recargando la pagina se puede comprobar -->

    <script id="shaderVs" type="x-shader/x-vertex">
        attribute vec4 a_Position;
	    attribute vec2 a_TexCoord;
        varying vec2 v_TexCoord;
        uniform mat4 u_pMatrix;
        uniform mat4 u_vMatrix;
        uniform mat4 u_mvMatrix;
        varying highp vec4 v_Color;
        void main() {
            gl_Position = u_pMatrix * u_vMatrix * u_mvMatrix * a_Position;
            v_TexCoord = a_TexCoord;
        }
    </script>

    <script id="shaderFs" type="x-shader/x-fragment">
        precision mediump float;
        uniform sampler2D u_Sampler0;
        uniform sampler2D u_Sampler1;
        varying vec2 v_TexCoord;
        uniform float Light_Value;
        void main(void) {
            vec4 color0 = texture2D(u_Sampler0, v_TexCoord);
            vec4 color1 = texture2D(u_Sampler1, v_TexCoord);
            if (Light_Value == 0.0){
                gl_FragColor = color0;
            } else {
                gl_FragColor = (color1) * (color0);
            };
        }
    </script>

    <script>
        
        var gl;
        var count = 0.0;
        var z = 3.5;
        var y = 0;
        var LightValue;
        var cameraY = 0;
        var projectionValue;
        

        function init() {
            
            canvas = document.getElementById("myCanvas");

            gl = canvas.getContext("webgl");
            if (!gl) {
                console.log("Failed to get the rendering context for WebGL");
                return;
            }

            var vs = document.getElementById('shaderVs').innerHTML;
            var fs = document.getElementById('shaderFs').innerHTML;
            initShaders(gl, vs, fs);

            // Init vertex shader
            initVertexShader(gl);

            // Init projection matrix
            initProjection(gl, canvas);

            // Set clear canvas color
            gl.clearColor(0.0, 0.0, 0.0, 1);

            initTexturesAndDraw(gl);

            // Hidden surface removal
            gl.enable(gl.DEPTH_TEST);

            document.onkeydown = function (ev) {
            var stepUD = new Number(document.getElementById("stepUD").value);
                if (document.querySelector('input[name="projection"]:checked').value == "perspective") {
                    switch (ev.keyCode) {
                        case 40: // Down
                        cameraY -= stepUD;
                        break;
                        case 38: // Up
                        cameraY += stepUD;
                        break;
                    }
                };
            }

            drawScene();
             
            // Event listener for mouse wheel
            document.addEventListener('wheel', function (event) {
            if (document.querySelector('input[name="projection"]:checked').value == "perspective") {
                z = event.wheelDelta > 0 ? z - 1 : z + 1;}
            });

        }

        function drawScene() {

            projectionValue = document.querySelector('input[name="projection"]:checked').value;
            var speed = document.getElementById("speed");
            var LightValue = document.querySelector('input[name="lights"]:checked').value;

            gl.clear(gl.COLOR_BUFFER_BIT);

            // Rotacion

            var mvMatrix = glMatrix.mat4.fromRotation(glMatrix.mat4.create(), count, [0.0, 0.5, 0.0]);
            var uMvMatrix = gl.getUniformLocation(gl.program, "u_mvMatrix");
            gl.uniformMatrix4fv(uMvMatrix, false, mvMatrix);

            var pMatrixUniform = gl.getUniformLocation(gl.program, "u_pMatrix");
            var vMatrixUniform = gl.getUniformLocation(gl.program, "u_vMatrix");

            //  Proyeccion

            var ratio = canvas.width / canvas.height;
            
            if (projectionValue == "perspective"){
                var vMatrix = glMatrix.mat4.lookAt(glMatrix.mat4.create(), [0, cameraY, z], [0, 0, 0], [0, 1, 0]);
                var pMatrix = glMatrix.mat4.perspective(glMatrix.mat4.create(), toRadian(60), ratio, 0.1, 100);
            } else {
                var vMatrix = glMatrix.mat4.lookAt(glMatrix.mat4.create(), [0, 0, 0], [0, 0, 0], [0, 0, 0]);
                var pMatrix = glMatrix.mat4.ortho(glMatrix.mat4.create(), -ratio, ratio, -1.0, 1.0, -1.0, 1.0);
            };

            gl.uniformMatrix4fv(pMatrixUniform, false, pMatrix);
            gl.uniformMatrix4fv(vMatrixUniform, false, vMatrix);

            // Draw

            if (document.getElementById('triangles').checked == true) {
                gl.drawElements(gl.TRIANGLES, 15 * 2 * 3, gl.UNSIGNED_SHORT, 0);
                // Cuando represente triangulos: cargar textura de arbol o arbol con luces
                var LightsUniform = gl.getUniformLocation(gl.program, "Light_Value");
                if (LightValue == "0.0"){
                    gl.uniform1f(LightsUniform, 0.0);
                } else {
                    gl.uniform1f(LightsUniform, 1.0);
                }

            } else {
                gl.drawElements(gl.LINES, 15 * 2 * 3, gl.UNSIGNED_SHORT, 0);
            }



            // Control de count con speed

            if (document.getElementById('rot').checked == true) {
                count = count
            } else {
                count = count - 0.01 * speed.value
            };
            
            count = count + 0.01 * speed.value;

            requestAnimationFrame(drawScene);
        }

        function initVertexShader(gl) {
            // Vertexes and colors  (X, Y, Z, x, y)
            var vertexesAndColors = [

                // Cubo
                -0.3, -0.6, -0.3,   0.5, 0.0,
                0.3, -0.6, -0.3,    1.0, 0.0,
                0.3, 0.1, -0.3,     0.5, 0.5,
                -0.3, 0.1, -0.3,    1.0, 0.5,  

                -0.3, -0.6, 0.3,    0.0, 0.0,
                0.3, -0.6, 0.3,     0.5, 0.0,
                0.3, 0.1, 0.3,      0.5, 0.5,  
                -0.3, 0.1, 0.3,     0.0, 0.5,  

                -0.3, -0.6, -0.3,   0.5, 0.0, 
                -0.3, 0.1, -0.3,    0.5, 0.5,  
                -0.3, 0.1, 0.3,     1.0, 0.5,  
                -0.3, -0.6, 0.3,    1.0, 0.0,

                0.3, -0.6, -0.3,    0.5, 0.0,
                0.3, 0.1, -0.3,     0.5, 0.5,  
                0.3, 0.1, 0.3,      1.0, 0.5,  
                0.3, -0.6, 0.3,     1.0, 0.0,

                -0.3, -0.6, -0.3,   0.5, 0.0,
                -0.3, -0.6, 0.3,    0.5, 0.5,
                0.3, -0.6, 0.3,     1.0, 0.5,
                0.3, -0.6, -0.3,    1.0, 0.0, 
				
                -0.3, 0.1, -0.3,    0.5, 0.0,
                -0.3, 0.1, 0.3,     0.5, 0.5, 
                0.3, 0.1, 0.3,      1.0, 0.5,
                0.3, 0.1, -0.3,     1.0, 0.0,

                // Piramides

                // Base1
                -0.7, 0.01, -0.7,   0, 0.5,
                -0.7, 0.01, 0.7,    0.5, 0.5,
                0.7, 0.01, 0.7,     0, 1,
                0.7, 0.01, -0.7,    0.5, 1,

                // Base2
                -0.5, 0.31, -0.5,   0.5, 0.5,
                -0.5, 0.31, 0.5,    1, 0.5,
                0.5, 0.31, 0.5,     0.5, 1,
                0.5, 0.31, -0.5,    1, 0.5,

                // Base3
                -0.3, 0.61, -0.3,   0, 0.5,
                -0.3, 0.61, 0.3,    0.5, 0.5,
                0.3, 0.61, 0.3,     0, 1,
                0.3, 0.61, -0.3,    0.5, 1,

                //lados1
                
                -0.7, 0.01, -0.7,   0, 0.5,
                -0.7, 0.01, 0.7,    0.5, 0.5,
                0, 0.5, 0,          0.25, 1,

                0.7, 0.01, 0.7,     0, 0.5,
                0.7, 0.01, -0.7,    0.5, 0.5,
                0, 0.5, 0,          0.25, 1,

                0.7, 0.01, 0.7,     0, 0.5,
                -0.7, 0.01, 0.7,    0.5, 0.5,
                0, 0.5, 0,          0.25, 1,

                -0.7, 0.01, -0.7,   0, 0.5,
                0.7, 0.01, -0.7,    0.5, 0.5,
                0, 0.5, 0,          0.25, 1,

                //lados2

                -0.5, 0.31, -0.5,   0.5, 0.5,
                -0.5, 0.31, 0.5,    1, 0.5,
                0, 0.75, 0,         0.75, 1,
                
                0.5, 0.31, 0.5,     0.5, 0.5,
                0.5, 0.31, -0.5,    1, 0.5,
                0, 0.75, 0,         0.75, 1,

                -0.5, 0.31, -0.5,   0.5, 0.5,
                0.5, 0.31, -0.5,    1, 0.5,
                0, 0.75, 0,         0.75, 1,

                0.5, 0.31, 0.5,     0.5, 0.5,
                -0.5, 0.31, 0.5,    1, 0.5,
                0, 0.75, 0,         0.75, 1,

                //lados3

                -0.3, 0.61, -0.3,  0, 0.5,
                -0.3, 0.61, 0.3,   0.5, 0.5,
                0, 0.85, 0,        0.25, 1,

                0.3, 0.61, 0.3,    0, 0.5,
                0.3, 0.61, -0.3,   0.5, 0.5,
                0, 0.85, 0,        0.25, 1,
                
                -0.3, 0.61, 0.3,   0, 0.5,
                0.3, 0.61, 0.3,    0.5, 0.5,
                0, 0.85, 0,        0.25, 1,

                0.3, 0.61, -0.3,   0, 0.5,
                -0.3, 0.61, -0.3,  0.5, 0.5,
                0, 0.85, 0,        0.25, 1,

            ];

            // Indexes (for drawing squares using triangles)
            var indexes = [

                0, 1, 2,
                0, 2, 3,

                4, 5, 6,
                4, 6, 7,

                8, 9, 10,
                8, 10, 11,

                12, 13, 14,
                12, 14, 15,

                16, 17, 18,
                16, 18, 19,

                20, 21, 22,
                20, 22, 23,

                24, 25, 26,
                24, 26, 27,

                28, 29, 30,
                28, 30, 31,

                32, 33, 34,
                32, 34, 35,
                36, 37, 38,

                39, 40, 41,

                42, 43, 44,

                45, 46, 47,

                48, 49, 50,

                51, 52, 53,

                54, 55, 56,

                57, 58, 59,

                60, 61, 62,

                63, 64, 65,

                66, 67, 68,

                69, 70, 71,

            ];

            gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexesAndColors), gl.STATIC_DRAW);

            var vertexPositionAttribute = gl.getAttribLocation(gl.program, "a_Position");
            gl.enableVertexAttribArray(vertexPositionAttribute);
            gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 4 * (3 + 2), 0);

            var vertexColorAttribute = gl.getAttribLocation(gl.program, "a_TexCoord");
            gl.enableVertexAttribArray(vertexColorAttribute);
            gl.vertexAttribPointer(vertexColorAttribute, 2, gl.FLOAT, false, 4 * (3 + 2), 4 * 3);

            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexes), gl.STATIC_DRAW);
        }

        function initTexturesAndDraw(gl) {

            var image1 = new Image();
            image1.src = 'light.jpg';
            var image0 = new Image();
            image0.src = 'tree.jpg';

            image0.onload = function () {
                loadTexture(gl, "u_Sampler0", image0, 0, true);
                image1.onload = function () {
                    loadTexture(gl, "u_Sampler1", image1, 1, true);
                };
            };

        }

        function loadTexture(gl, samplerUniform, image, unitNumber, flip) {

            // Flip the image's y axis
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flip);
            // Activate and configure texture
            gl.activeTexture(gl.TEXTURE0 + unitNumber);
            gl.bindTexture(gl.TEXTURE_2D, gl.createTexture());
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
            // Set texture to the sampler
            var fragmentSamplerUniform = gl.getUniformLocation(gl.program, samplerUniform);
            gl.uniform1i(fragmentSamplerUniform, unitNumber);
            
        }

        function toRadian(g){
			return g * Math.PI/180;
		}

        function initProjection(gl, canvas) {
            // Write u_pMatrix
            var pMatrixUniform = gl.getUniformLocation(gl.program, "u_pMatrix");
            var ratio = canvas.width / canvas.height;
            var pMatrix = glMatrix.mat4.perspective(glMatrix.mat4.create(), toRadian(60), ratio, 0.1, 100);
            gl.uniformMatrix4fv(pMatrixUniform, false, pMatrix);

            // Write u_vMatrix
            var vMatrixUniform = gl.getUniformLocation(gl.program, "u_vMatrix");
            var vMatrix = glMatrix.mat4.lookAt(glMatrix.mat4.create(), [0, 0, 3], [0, 0, 0], [0, 1, 0]);
            gl.uniformMatrix4fv(vMatrixUniform, false, vMatrix);
        }

        function initShaders(gl, vs_source, fs_source) {
            // Compile shaders
            var vertexShader = makeShader(gl, vs_source, gl.VERTEX_SHADER);
            var fragmentShader = makeShader(gl, fs_source, gl.FRAGMENT_SHADER);

            // Create program
            var glProgram = gl.createProgram();

            // Attach and link shaders to the program
            gl.attachShader(glProgram, vertexShader);
            gl.attachShader(glProgram, fragmentShader);
            gl.linkProgram(glProgram);

            // Use program
            gl.useProgram(glProgram);
            gl.program = glProgram;
        }

        function makeShader(gl, src, type) {
            var shader = gl.createShader(type);
            gl.shaderSource(shader, src);
            gl.compileShader(shader);
            if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
                alert("Error compiling shader: " + gl.getShaderInfoLog(shader));
                return;
            }
            return shader;
        }

    </script>

</head>

<body onload="init()">
    <canvas id="myCanvas" width="640" height="480"></canvas><br>
    <b>Rotation</b>
    <input type="checkbox" name="rotation" id="rot" checked>
    <input type="range" id="speed" min="1" max="3" value="1" step="1"> Speed<br>
    <b>Lights</b>
    <input type="radio" name="lights" value="1.0"> Yes
    <input type="radio" name="lights" value="0.0" checked> No<br>
    <b>WebGL primitive</b>
    <input type="radio" id="triangles" name="primitive" value="triangles" checked> Triangles
    <input type="radio" name="primitive" value="lines"> Lines<br>
    <b>Projection type</b>
    <input type="radio" ide="proj" name="projection" value="perspective" checked> Perspective
    <input type="radio" name="projection" value="orthographic"> Orthographic<br>
    <p>Step Up/Down:</p> <span><input type="text" value="0.01" id="stepUD"><br></span>

</body>

</html>
