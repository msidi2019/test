<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/2.8.1/gl-matrix-min.js"></script>
    <title>Ejercicio 5</title>
</head>

<body onload="init()">
    <canvas id="myCanvas" width="640" height="480"></canvas><br>
    <b>Rotation</b>
    <input type="checkbox" name="rotation" checked>
    <input type="range" id="speed" min="1" max="3" value="1" step="1"> Speed<br>
    <b>WebGL primitive</b>
    <input type="radio" name="primitive" value="triangles" checked> Triangles
    <input type="radio" name="primitive" value="lines"> Lines<br>
    <b>Projection type</b>
    <input type="radio" name="projection" value="perspective" checked> Perspective
    <input type="radio" name="projection" value="orthographic"> Orthographic<br>
    <b>Decoration</b>
    <input type="radio" name="christmas" value="no" checked> No
    <input type="radio" name="christmas" value="yes"> Yes<br>

    <script id="shaderVs" type="x-shader/x-vertex">
        attribute vec4 a_Position;
        attribute vec3 a_Color;
        attribute vec2 a_TexCoord; // Add texture coordinates attribute
        uniform mat4 u_pMatrix;
        uniform mat4 u_vMatrix;
        uniform mat4 u_mvMatrix;
        varying highp vec4 v_Color;
        varying highp vec2 v_TexCoord; // Pass texture coordinates to fragment shader
        void main(){
            gl_Position = u_pMatrix * u_vMatrix * u_mvMatrix * a_Position;
            v_Color = vec4(a_Color, 1.0);
            v_TexCoord = a_TexCoord; // Assign texture coordinates
        }
    </script>

    <script id="shaderFs" type="x-shader/x-fragment">
        precision mediump float;
        varying highp vec4 v_Color;
        varying highp vec2 v_TexCoord; // Receive texture coordinates from vertex shader
        uniform sampler2D u_Texture; // Texture sampler
        uniform sampler2D u_DecorationTexture; // Decoration texture sampler
        uniform bool u_ApplyDecoration; // Flag to apply decoration texture
        void main(){
            vec4 color = texture2D(u_Texture, v_TexCoord); // Original texture color
            if (u_ApplyDecoration) {
                vec4 decorationColor = texture2D(u_DecorationTexture, v_TexCoord); // Decoration texture color
                gl_FragColor = mix(color, decorationColor, 0.5); // Mix original and decoration colors
            } else {
                gl_FragColor = color; // Use original color if decoration is not applied
            }
        }
    </script>

    <script>
        var gl,
            canvas,
            count = 0.0,
            ratio,
            z = 3,
            projectionValue = document.querySelector('input[name="projection"]:checked').value;

        // Texture variables
        var texture,
            decorationTexture,
            applyDecoration = false;

    function init() {
         // Get canvas object from the DOM and Init WebGL Context
         canvas = document.getElementById("myCanvas");
        gl = canvas.getContext("webgl");

        if (!gl) {
        console.log("FAILED TO GET THE RENDERING CONTEXT FOR WEBGL.");
        return;
        }

        // Init Shaders 
        var vs = document.getElementById('shaderVs').innerHTML,
            fs = document.getElementById('shaderFs').innerHTML;

        if (!initShaders(gl, vs, fs)){
        console.log("FAILED TO INITIALIZE SHADERS.");
        return;
        }
        // Variables
        var rad_ang = 0.0;

        // Init shaders
        var vs = document.getElementById('shaderVs').innerHTML;
        var fs = document.getElementById('shaderFs').innerHTML;
        if (!initShaders(gl, vs, fs)) {
            console.log('Failed to intialize shaders.');
            return;
        }

        // Init vertex shader
        initVertexBuffers(gl);

        // Init projection matrix
        initProjection(gl, canvas);

        // Set clear canvas color
        gl.clearColor(0.0, 0.0, 0.0, 1.0);

        // Hidden surface removal
        gl.enable(gl.DEPTH_TEST);

        // Init textures
        initTexturesAndDraw(gl, rad_ang);

        // Event listener for mouse wheel
        document.addEventListener('wheel', function(event) {
                if (projectionValue == 'perspective') {
                    z = event.deltaY > 0 ? z - 1 : z + 1;
                }
            });

            // Event listener for decoration radio button
            document.querySelectorAll('input[name="christmas"]').forEach(function(input) {
                input.addEventListener('change', function() {
                    applyDecoration = this.value === 'yes';
                });
            });

            // Event listener for keyboard input
            document.addEventListener('keydown', function(event) {
                var step = parseInt(document.getElementById("step").value);
                switch (event.key) {
                    case "ArrowUp":
                        // Move camera up
                        // Implement camera movement
                        break;
                    case "ArrowDown":
                        // Move camera down
                        // Implement camera movement
                        break;
                    default:
                        return; // Exit function if key doesn't match
                }
                event.preventDefault(); // Prevent default action of arrow keys
            });
    }
    
    function drawScene() {
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

            projectionValue = document.querySelector('input[name="projection"]:checked').value,
                u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
                u_vMatrix = gl.getUniformLocation(gl.program, "u_vMatrix"),
                ratio = canvas.width / canvas.height;

            switch (projectionValue) {
                case "perspective":
                    var pMatrix = mat4.perspective(mat4.create(), toRadian(60), ratio, 0.1, 100),
                        vMatrix = mat4.lookAt(mat4.create(), [0, 0, z], [0, 0, 0], [0, 1, 0]);
                    break;

                case "orthographic":
                    var pMatrix = mat4.ortho(mat4.create(), -ratio, ratio, -1.0, 1.50, -1.0, 1.50),
                        vMatrix = mat4.create();
                    break;
                default:
            }

            gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
            gl.uniformMatrix4fv(u_vMatrix, false, vMatrix);

            var rotationChecked = document.querySelector('input[name="rotation"]').checked,
                primitiveValue = document.querySelector('input[name="primitive"]:checked').value,
                mvMatrix = mat4.fromRotation(mat4.create(), count, [0, 1, 0]),
                u_mvMatrix = gl.getUniformLocation(gl.program, "u_mvMatrix");

            gl.uniformMatrix4fv(u_mvMatrix, false, mvMatrix);

            var speed = parseInt(document.getElementById("speed").value);

            if (rotationChecked) {
                count += 0.01 * speed;
            }

            switch (primitiveValue) {
                case "triangles":
                    // DRAW PRIMITIVE ELEMENTS FOR FIRST CUBE
                    gl.drawElements(gl.TRIANGLES, 6 * 3, gl.UNSIGNED_SHORT, 0);
                    // DRAW PRIMITIVE ELEMENTS FOR SECOND CUBE
                    gl.drawElements(gl.TRIANGLES, 6 * 3, gl.UNSIGNED_SHORT, 6 * 3 * 2);
                    // DRAW PRIMITIVE ELEMENTS FOR PYRAMID
                    gl.drawElements(gl.TRIANGLES, 6 * 3 * 2, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2); // Se multiplicó por 2 para dibujar los 6 triángulos de la pirámide
                    break;
                case "lines":
                    // DRAW LINES FOR FIRST CUBE
                    gl.drawElements(gl.LINES, 6 * 3 * 2, gl.UNSIGNED_SHORT, 0); // Multiplicado por 2 porque cada triángulo tiene 3 líneas
                    // DRAW LINES FOR SECOND CUBE
                    gl.drawElements(gl.LINES, 6 * 3 * 2, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2); // Multiplicado por 2 para dibujar las líneas de los dos cubos
                    // DRAW LINES FOR PYRAMID
                    gl.drawElements(gl.LINES, 6 * 3 * 2 * 2, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2 * 2); // Multiplicado por 2 para dibujar las líneas de la pirámide
                    break;
                default:
            }

            // CALL DRAWSCENE AGAIN IN THE NEXT BROWSER REPAINT
            requestAnimationFrame(drawScene);
        }

    /**
     * This function is used to initialize the vertex buffers
     * @param {WebGLRenderingContext} gl 
     */
    function initVertexBuffers(gl) {
        // Vertexes and colors (X, Y, Z, R, G, B)
var vertexesAndColors = [
    // CUBO 1 (IZQUIERDA)
    // BACK - AZUL
    -0.75, -0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 0
    -0.25, -0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 1
    -0.25, 0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 2
    -0.75, 0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 3

    // FRONT - ROJO
    -0.75, -0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 4
    -0.25, -0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 5
    -0.25, 0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 6
    -0.75, 0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 7

    // LEFT - AMARILLO
    -0.75, -0.50, -0.25, 1.0, 1.0, 0.0, // Vértice 8
    -0.75, 0.50, -0.25, 1.0, 1.0, 0.0, // Vértice 9
    -0.75, 0.50, 0.25, 1.0, 1.0, 0.0, // Vértice 10
    -0.75, -0.50, 0.25, 1.0, 1.0, 0.0, // Vértice 11

    // RIGHT - VERDE
    -0.25, -0.50, -0.25, 0.0, 1.0, 0.0, // Vértice 12
    -0.25, 0.50, -0.25, 0.0, 1.0, 0.0, // Vértice 13
    -0.25, 0.50, 0.25, 0.0, 1.0, 0.0, // Vértice 14
    -0.25, -0.50, 0.25, 0.0, 1.0, 0.0, // Vértice 15

    // BOTTOM - TURQUESA
    -0.75, -0.50, -0.25, 0.0, 1.0, 1.0, // Vértice 16
    -0.75, -0.50, 0.25, 0.0, 1.0, 1.0, // Vértice 17
    -0.25, -0.50, 0.25, 0.0, 1.0, 1.0, // Vértice 18
    -0.25, -0.50, -0.25, 0.0, 1.0, 1.0, // Vértice 19

    // CUBO 2 (DERECHA)
    // BACK - AZUL
    0.25, -0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 20
    0.75, -0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 21
    0.75, 0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 22
    0.25, 0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 23

    // FRONT - ROJO
    0.25, -0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 24
    0.75, -0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 25
    0.75, 0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 26
    0.25, 0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 27

    // LEFT - AMARILLO
    0.25, -0.50, -0.25, 1.0, 1.0, 0.0, // Vértice 28
    0.25, 0.50, -0.25, 1.0, 1.0, 0.0, // Vértice 29
    0.25, 0.50, 0.25, 1.0, 1.0, 0.0, // Vértice 30
    0.25, -0.50, 0.25, 1.0, 1.0, 0.0, // Vértice 31

    // RIGHT - VERDE
    0.75, -0.50, -0.25, 0.0, 1.0, 0.0, // Vértice 32
    0.75, 0.50, -0.25, 0.0, 1.0, 0.0, // Vértice 33
    0.75, 0.50, 0.25, 0.0, 1.0, 0.0, // Vértice 34
    0.75, -0.50, 0.25, 0.0, 1.0, 0.0, // Vértice 35

    // BOTTOM - TURQUESA
    0.25, -0.50, -0.25, 0.0, 1.0, 1.0, // Vértice 36
    0.25, -0.50, 0.25, 0.0, 1.0, 1.0, // Vértice 37
    0.75, -0.50, 0.25, 0.0, 1.0, 1.0, // Vértice 38
    0.75, -0.50, -0.25, 0.0, 1.0, 1.0, // Vértice 39

    // PIRÁMIDE
     // 
     0.00, 1.00, 0.00, 1.0, 0.0, 0.0, // Vértice 40
// Base de la pirámide
// (v1) (Amarillo)
-0.75, 0.50, -0.75, 1.0, 1.0, 0.0, // Vértice 41 (Amarillo)
// (v2) (Azul)
-0.75, 0.50, 0.75, 0.0, 0.0, 1.0, // Vértice 42 (Azul)
// (v3) (Verde)
0.75, 0.50, 0.75, 0.0, 1.0, 0.0, // Vértice 43 (Verde)
// (v4) (Turquesa)
0.75, 0.50, -0.75, 0.0, 1.0, 1.0 // Vértice 44 (Turquesa)

        ];


// Indexes (for drawing squares using triangles)
var indexes = [
    // CUBO 1
    0, 1, 2,    // Triángulo #1
    0, 2, 3,    // Triángulo #2
    4, 5, 6,    // Triángulo #3
    4, 6, 7,    // Triángulo #4
    8, 9, 10,   // Triángulo #5
    8, 10, 11,  // Triángulo #6
    12, 13, 14, // Triángulo #7
    12, 14, 15, // Triángulo #8
    16, 17, 18, // Triángulo #9
    16, 18, 19, // Triángulo #10
    // CUBO 2
    20, 21, 22,    // Triángulo #11
    20, 22, 23,    // Triángulo #12
    24, 25, 26,    // Triángulo #13
    24, 26, 27,    // Triángulo #14
    28, 29, 30,    // Triángulo #15
    28, 30, 31,    // Triángulo #16
    32, 33, 34,    // Triángulo #17
    32, 34, 35,    // Triángulo #18
    36, 37, 38,    // Triángulo #19
    36, 38, 39,    // Triángulo #20
    // Pirámide
    40, 41, 42, // Triángulo #21 (base)
    40, 42, 43, // Triángulo #22 (base)
    40, 43, 44, // Triángulo #23 (base)
    40, 44, 41, // Triángulo #24 (base)
    41, 42, 43, // Triángulo #25 (caras laterales)
    41, 43, 44, // Triángulo #26 (caras laterales)
    42, 43, 44, // Triángulo #27 (caras laterales)
    42, 44, 45, // Triángulo #28 (caras laterales)
    43, 44, 45, // Triángulo #29 (caras laterales)
    41, 45, 42, // Triángulo #30 (caras laterales)
    40, 41, 45, // Triángulo #31 (caras inferiores)
    40, 45, 44, // Triángulo #32 (caras inferiores)
    40, 44, 43, // Triángulo #33 (caras inferiores)
    40, 43, 42  // Triángulo #34 (caras inferiores)
];

        // Write a_Position and a_TexCoord using gl.ARRAY_BUFFER
        gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexesAndTextures), gl.STATIC_DRAW);

        var vertexPositionAttribute = gl.getAttribLocation(gl.program, "a_Position");
        gl.enableVertexAttribArray(vertexPositionAttribute);
        gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 4 * (3 + 2), 0);

        var vertexColorAttribute = gl.getAttribLocation(gl.program, "a_TexCoord");
        gl.enableVertexAttribArray(vertexColorAttribute);
        gl.vertexAttribPointer(vertexColorAttribute, 2, gl.FLOAT, false, 4 * (3 + 2), 4 * 3);

        // Write indexes in gl.ELEMENT_ARRAY_BUFFER
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexes), gl.STATIC_DRAW);
    }

    /**
     * This function is used to convert degrees to radians
     * @param {Number} d 
	 * @returns {Number}
     */
    function toRadian(d){
        return d*Math.PI/180;
    }
    
    /**
     * This function is used to initialize the projection matrix
     * @param {WebGLRenderingContext} gl 
     * @param {HTMLCanvasElement} canvas 
     */
    function initProjection(gl, canvas) {
        // Write u_pMatrix
        var pMatrixUniform = gl.getUniformLocation(gl.program, "u_pMatrix");
        var ratio = canvas.width / canvas.height;
        var pMatrix = glMatrix.mat4.perspective(glMatrix.mat4.create(), toRadian(60), ratio, 0.1, 100);
        gl.uniformMatrix4fv(pMatrixUniform, false, pMatrix);

        // Write u_vMatrix
        var vMatrixUniform = gl.getUniformLocation(gl.program, "u_vMatrix");
        var vMatrix = glMatrix.mat4.lookAt(glMatrix.mat4.create(), [0, 0, 3], [0, 0, 0], [0, 1, 0]);
        gl.uniformMatrix4fv(vMatrixUniform, false, vMatrix);
    }
    function initProjection(gl, canvas) {
        var pMatrix = mat4.create(),
            u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
            ratio = canvas.width/canvas.height;

        mat4.perspective(pMatrix, toRadian(60), ratio, 0.1, 100);
        gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
    }
        /**
     * This function is used to initialize textures and draw the scene
     * @param {WebGLRenderingContext} gl 
     * @param {Number} rad_ang 
     */
    function initTexturesAndDraw(gl, rad_ang) {
        var image0 = new Image(0),
    image1 = new Image(1);
image0.src = 'portal.jpg';
image1.src = 'light.jpg';
image0.onload = function (){
            loadTexture(gl, "u_Sampler0", image0, 0, true);
            image1.onload = function (){
                loadTexture(gl, "u_Sampler1", image1, 1, true);
                drawScene();
            }
           
        };
    }

    /**
     * This function is used to check if a number is a power of 2
     * @param {Number} value 
     * @returns {Boolean}
     */
     
    function loadTexture(gl, samplerUniform, image, unitNumber, flip) {
        // Flip the image's y axis
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flip);

        // Activate and configure texture
        gl.activeTexture(gl.TEXTURE0 + unitNumber);
        gl.bindTexture(gl.TEXTURE_2D, gl.createTexture());
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);

        // Set texture to the sampler
        var fragmentSamplerUniform = gl.getUniformLocation(gl.program, samplerUniform);
        gl.uniform1i(fragmentSamplerUniform, unitNumber);
    }

    /**
     * This function is used to draw the scene and animate it
     * @param {WebGLRenderingContext} gl 
     * @param {Number} rad_ang 
     */
    function drawScene(gl, rad_ang) {
        // Clear
        gl.clear(gl.COLOR_BUFFER_BIT);

        // Rotate
        var mvMatrix = glMatrix.mat4.fromRotation(glMatrix.mat4.create(), rad_ang, [0.5, 0.5, 0.5]);
        var uMvMatrix = gl.getUniformLocation(gl.program, "u_mvMatrix");
        gl.uniformMatrix4fv(uMvMatrix, false, mvMatrix);

        // Draw
        gl.drawElements(gl.TRIANGLES, 6 * 2 * 3, gl.UNSIGNED_SHORT, 0);

        // Increase angle
        rad_ang += 0.01;

        // Call drawScene again in the next browser repaint
        requestAnimationFrame(function() {
			drawScene(gl, rad_ang)
		});
    }

    /**
     * This function is used to initialize the shaders
     * @param {WebGLRenderingContext} gl 
     * @param {String} vs_source 
     * @param {String} fs_source 
     * @returns {Boolean}
     */
     function initShaders(gl, vsSource, fsSource) {
        // Create vertex shader object and compile shader
        var vertexShader = gl.createShader(gl.VERTEX_SHADER);
        gl.shaderSource(vertexShader, vsSource);
        gl.compileShader(vertexShader);

        // Create fragment shader object and compile shader
        var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
        gl.shaderSource(fragmentShader, fsSource);
        gl.compileShader(fragmentShader);

        // Create shader program and attach shaders
        var program = gl.createProgram();
        gl.attachShader(program, vertexShader);
        gl.attachShader(program, fragmentShader);
        gl.linkProgram(program);

        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
            console.log("ERROR INITIALIZING SHADER PROGRAM: " + gl.getProgramInfoLog(program));
            return false;
        }

        gl.useProgram(program);
        gl.program = program;

        return true;
    }

    /**
     * This function is used to create a shader
     * @param {WebGLRenderingContext} gl 
     * @param {String} src 
     * @param {Number} type 
     * @returns {WebGLShader}
     */
    function makeShader(gl, src, type) {
        var shader = gl.createShader(type);
        gl.shaderSource(shader, src);
        gl.compileShader(shader);
        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            alert("Error compiling shader: " + gl.getShaderInfoLog(shader));
            return;
        }
        return shader;
    }
</script>
<body onload="init()">
    <canvas id="myCanvas" width="640" height="480"></canvas>
</body>

</html>
