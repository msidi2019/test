<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/2.8.1/gl-matrix-min.js"></script>
    <title>EJERCICIO EVALUABLE 7</title>
</head>

<body onload="init()">
    <canvas id="myCanvas" width="640" height="480"></canvas>
    <br>
    <b>Step:</b>
    <input type="text" value="0.1" id="step">
    <br>
    <b>Rotation</b>
    <input type="checkbox" name="rotation" checked>
    <input type="range" id="speed" min="1" max="3" value="1" step="1"><b>Speed</b><br>
    <b>WebGL primitive</b>
    <input type="radio" name="primitive" value="triangles" checked>Triangles
    <input type="radio" name="primitive" value="lines">Lines<br>
    <b>Projection type</b>
    <input type="radio" name="projection" value="perspective" checked> Perspective
    <input type="radio" name="projection" value="orthographic">Orthographic<br>
    <b>Daylight</b>
    <input type="radio" name="daylight" value="day" checked>Day
    <input type="radio" name="daylight" value="night">Night<br>
    <b>Light direction</b><br>
    <input type="range" id="x" min="-2" max="2" value="1.1" step="0.1">X<br>
    <input type="range" id="y" min="-2" max="2" value="0.8" step="0.1">Y<br>
    <input type="range" id="z" min="-2" max="2" value="1.1" step="0.1">Z<br>
</body>

<script id="shaderVs" type="x-shader/x-vertex">
    attribute vec4 a_Position;
    attribute vec2 a_TexCoord;
    attribute vec4 a_Normal;
    
    uniform mat4 u_pMatrix;
    uniform mat4 u_vMatrix;
    uniform mat4 u_mvMatrix;
    uniform mat4 u_normalMatrix;
    
    varying highp vec4 v_Normal;
    varying vec2 v_TexCoord;

    void main(){
        gl_Position = u_pMatrix * u_vMatrix * u_mvMatrix * a_Position;
        v_TexCoord = a_TexCoord;
        v_Normal = u_normalMatrix * a_Normal;
    }
</script>

<script id="shaderFs" type="x-shader/x-fragment">
    precision mediump float;
    
    uniform sampler2D u_Sampler0;
    uniform sampler2D u_Sampler1;

    uniform float u_Filter;

    uniform vec3 u_LightColor;
    uniform vec3 u_LightDirection;
    uniform vec3 u_AmbientLight;

    varying highp vec4 v_Normal;
    varying vec2 v_TexCoord;
    
    void main(void) {

        vec4 texture0 = texture2D(u_Sampler0, v_TexCoord);
        vec4 texture1 = texture2D(u_Sampler1, v_TexCoord);
        vec4 textures;
    
        float nDotL = max(dot(u_LightDirection, normalize(v_Normal.xyz)), 0.0);
    
        if (u_Filter == 0.0) { 
            textures =  texture0 * texture1;
        } else {
            textures =  texture0;
        }

        vec3 diffuse = u_LightColor * textures.rgb * nDotL;
        vec3 ambient = u_AmbientLight * textures.rgb;
    
        gl_FragColor = vec4(ambient + diffuse, textures.a);
    }
</script>

<script>
    const LATITUDE_BANDS = 15, // ESFERA
          LONGITUDE_BANDS = 15, // ESFERA
          RADIUS = 0.1, // ESFERA
          DIRECTIONAL_LIGHT_COLOR = [1.0, 1.0, 1.0], // COLOR DE LA LUZ DIRECCIONAL
          AMBIENT_LIGHT = [0.2, 0.2, 0.2]; // COLOR DE LA LUZ AMBIENTAL
    
    var canvas,
        gl,
        z = 3,
        ratio,
        count = 0.0,
        axisY = 0.0; 

    function init(){
        
        // Get canvas object from the DOM and Init WebGL Context
        canvas = document.getElementById("myCanvas");
        gl = canvas.getContext("webgl");

        if (!gl) {
        console.log("FAILED TO GET THE RENDERING CONTEXT FOR WEBGL.");
        return;
        }

        // Init Shaders 
        var vs = document.getElementById('shaderVs').innerHTML,
            fs = document.getElementById('shaderFs').innerHTML;

        if (!initShaders(gl, vs, fs)){
        console.log("FAILED TO INITIALIZE SHADERS.");
        return;
        }

        // Init Shaders
        initShaders(gl, vs, fs);

        // Init vertex shader
        initVertexShader(gl);

        // Init projection matrix
        initProjection(gl, canvas);

        // Set clear canvas color
        gl.clearColor(0.0, 0.0, 0.0, 1.0);

        // Hidden surface removal
        gl.enable(gl.DEPTH_TEST);

        // Init textures
        initTexturesAndDraw(gl);

        // Event listener for mouse wheel
        document.addEventListener('wheel', function (event) {
            projectionValue
            if (projectionValue == 'orthographic'){
                z = event.wheelDelta > 0 ? z + 0 : z - 0;
            }else if (projectionValue == 'perspective'){
                z = event.wheelDelta > 0 ? z + 1 : z - 1;
            }
        });

        document.onkeydown = function (ev) {
            var step = new Number(document.getElementById("step").value);

            switch (ev.keyCode) {         
                case 38: // Up
                    axisY += step;
                    console.log('UP CAMERA');
                    break;
                
                case 40: // Down
                    axisY -= step;
                    console.log('DOWN CAMERA');
                    break;
                
                default:
                    // If you press another key --> ¡ERROR!
                    console.log('¡ERROR!: You are not pressing the correct key.');
                    step = 0.0;
                    break;
                }
        }
    }

    function drawScene() {
        gl.clear(gl.COLOR_BUFFER_BIT);
        
        projectionValue = document.querySelector('input[name="projection"]:checked').value, 
        daylightValue = document.querySelector('input[name="daylight"]:checked').value,
        rotationChecked = document.querySelector('input[name="rotation"]:checked'),
        primitiveValue = document.querySelector('input[name="primitive"]:checked').value,
        
        u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
        u_vMatrix = gl.getUniformLocation(gl.program, "u_vMatrix"),
        u_mvMatrix = gl.getUniformLocation(gl.program, "u_mvMatrix"),
        u_normalMatrix = gl.getUniformLocation(gl.program, "u_normalMatrix"),
        
        ratio = canvas.width/canvas.height;

        // Write u_LightDirection
        var x_light = document.getElementById("x").value,
            y_light = document.getElementById("y").value,
            z_light = document.getElementById("z").value,
            lightDirection = [x_light, y_light, z_light],
            u_LightDirection = gl.getUniformLocation(gl.program, "u_LightDirection");
        gl.uniform3fv(u_LightDirection, lightDirection);
        
        switch (projectionValue) {
            case "perspective":
                var pMatrix = mat4.perspective(mat4.create(), toRadian(60), ratio, 0.1, 100),
                    vMatrix = mat4.lookAt(mat4.create(), [0, axisY, z], [0, 0, 0], [0, 1, 0]);
                break;
        
            case "orthographic":
                var pMatrix = mat4.ortho(mat4.create(), -ratio, ratio, -1.0, 1.50, -1.0, 1.50),
                    vMatrix = mat4.create();
                break;
            default:
        }

        gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
        gl.uniformMatrix4fv(u_vMatrix, false, vMatrix);

        switch(daylightValue){
            case "day":
                var u_Filter = gl.getUniformLocation(gl.program, "u_Filter");
                gl.uniform1f(u_Filter, 1);
                break;

            case "night":
                var u_Filter = gl.getUniformLocation(gl.program, "u_Filter");
                gl.uniform1f(u_Filter, 0);
                break;
        }

        switch (primitiveValue) {
            case "triangles":
                primitive = gl.TRIANGLES;
                break;
            case "lines":
                primitive = gl.LINES;
                break;
            default:
        }

        // Get Motion Matrix HOUSE
        var mvMatrix = mat4.fromRotation(mat4.create(), count, [0, 0.5, 0]);

        gl.uniformMatrix4fv(u_mvMatrix, false, mvMatrix);

        // Get normal direction
        var normalMatrix = mat4.invert(mat4.create(), mat4.transpose(mat4.create(), mat4.clone(mvMatrix)));
        gl.uniformMatrix4fv(u_normalMatrix, false, normalMatrix);

        // DRAW PRIMITIVE ELEMENTS
        gl.drawElements(primitive, 6 * 3 * 3, gl.UNSIGNED_SHORT, 0);
        

        // Get Motion Matrix SPHERE
        var mvMatrix = mat4.fromTranslation(mat4.create(), lightDirection);
        
        gl.uniformMatrix4fv(u_mvMatrix, false, mvMatrix);

        // Get normal direction
        var normalMatrix = mat4.invert(mat4.create(), mat4.transpose(mat4.create(), mat4.clone(mvMatrix)));
        gl.uniformMatrix4fv(u_normalMatrix, false, normalMatrix);
        
        // DRAW SPHERE PRIMITIVE ELEMENTS/POINTS
        gl.drawElements(primitive, LATITUDE_BANDS * LONGITUDE_BANDS * 3 * 2, gl.UNSIGNED_SHORT, 54*2);
        
        var speed = document.getElementById("speed").value;

        if (rotationChecked){
            count += 0.01 * speed;
        }

        // CALL DRAWSCENE AGAIN IN THE NEXT BROWSER REPAINT
        requestAnimationFrame(drawScene);
    }

    function initVertexShader(gl) {
        // Vertexes and Texture Coordinates
        var vertexesAndColors = [
            // CUBO 1 (IZQUIERDA)
            // BACK - Ventana
            -0.75, -0.50, -0.25, 0.5, 0.5, 0.0, // Vértice 0
            -0.25, -0.50, -0.25, 1.0, 0.5, 0.0, // Vértice 1
            -0.25, 0.50, -0.25, 1.0, 1.0, 0.0, // Vértice 2
            -0.75, 0.50, -0.25, 0.5, 1.0, 0.0, // Vértice 3

            // FRONT - Puerta
            -0.75, -0.50, 0.25, 0.0, 0.0, 0.0, // Vértice 4
            -0.25, -0.50, 0.25, 0.25, 0.0, 0.0, // Vértice 5
            -0.25, 0.50, 0.25, 0.25, 1.0, 0.0, // Vértice 6
            -0.75, 0.50, 0.25, 0.0, 1.0, 0.0, // Vértice 7

            // LEFT - Ventana
            -0.75, -0.50, -0.25, 0.5, 0.5, 0.0, // Vértice 8
            -0.75, 0.50, -0.25, 1.0, 0.5, 0.0, // Vértice 9
            -0.75, 0.50, 0.25, 1.0, 1.0, 0.0, // Vértice 10
            -0.75, -0.50, 0.25, 0.5, 1.0, 0.0, // Vértice 11

            // RIGHT - Ventana
            -0.25, -0.50, -0.25, 0.5, 0.5, 0.0, // Vértice 12
            -0.25, 0.50, -0.25, 1.0, 0.5, 0.0, // Vértice 13
            -0.25, 0.50, 0.25, 1.0, 1.0, 0.0, // Vértice 14
            -0.25, -0.50, 0.25, 0.5, 1.0, 0.0, // Vértice 15

            // BOTTOM - Ventana
            -0.75, -0.50, -0.25, 0.5, 0.5, 0.0, // Vértice 16
            -0.75, -0.50, 0.25, 0.5, 1.0, 0.0, // Vértice 17
            -0.25, -0.50, 0.25, 1.0, 1.0, 0.0, // Vértice 18
            -0.25, -0.50, -0.25, 1.0, 0.5, 0.0, // Vértice 19

            // CUBO 2 (DERECHA)
            // BACK - Ventana
            0.25, -0.50, -0.25, 0.5, 0.5, 0.0, // Vértice 20
            0.75, -0.50, -0.25, 1.0, 0.5, 0.0, // Vértice 21
            0.75, 0.50, -0.25, 1.0, 1.0, 0.0, // Vértice 22
            0.25, 0.50, -0.25, 0.5, 1.0, 0.0, // Vértice 23

            // FRONT - Puerta
            0.25, -0.50, 0.25, 0.0, 0.0, 0.0, // Vértice 24
            0.75, -0.50, 0.25, 0.25, 0.0, 0.0, // Vértice 25
            0.75, 0.50, 0.25, 0.25, 1.0, 0.0, // Vértice 26
            0.25, 0.50, 0.25, 0.0, 1.0, 0.0, // Vértice 27

            // LEFT - Ventana
            0.25, -0.50, -0.25, 0.5, 0.5, 0.0, // Vértice 28
            0.25, 0.50, -0.25, 1.0, 0.5, 0.0, // Vértice 29
            0.25, 0.50, 0.25, 1.0, 1.0, 0.0, // Vértice 30
            0.25, -0.50, 0.25, 0.5, 1.0, 0.0, // Vértice 31

            // RIGHT - Ventana
            0.75, -0.50, -0.25, 0.5, 0.5, 0.0, // Vértice 32
            0.75, 0.50, -0.25, 1.0, 0.5, 0.0, // Vértice 33
            0.75, 0.50, 0.25, 1.0, 1.0, 0.0, // Vértice 34
            0.75, -0.50, 0.25, 0.5, 1.0, 0.0, // Vértice 35

            // BOTTOM - Ventana
            0.25, -0.50, -0.25, 0.5, 0.5, 0.0, // Vértice 36
            0.25, -0.50, 0.25, 0.5, 1.0, 0.0, // Vértice 37
            0.75, -0.50, 0.25, 1.0, 1.0, 0.0, // Vértice 38
            0.75, -0.50, -0.25, 1.0, 0.5, 0.0, // Vértice 39

            // PIRÁMIDE
            // Cristalera en la cara frontal
            0.00, 1.00, 0.00, 0.5, 0.5, 0.0, // Vértice 40

            // Base de la pirámide - Tejas
            -0.75, 0.50, -0.75, 0.0, 0.0, 0.0, // Vértice 41
            -0.75, 0.50, 0.75, 1.0, 0.0, 0.0, // Vértice 42
            0.75, 0.50, 0.75, 1.0, 1.0, 0.0, // Vértice 43
            0.75, 0.50, -0.75, 0.0, 1.0, 0.0 // Vértice 44
        ];

        // Indexes (for drawing squares using triangles)
        var indexes = [
            // CUBO 1
            0, 1, 2,    // Triángulo #1
            0, 2, 3,    // Triángulo #2
            4, 5, 6,    // Triángulo #3
            4, 6, 7,    // Triángulo #4
            8, 9, 10,   // Triángulo #5
            8, 10, 11,  // Triángulo #6
            12, 13, 14, // Triángulo #7
            12, 14, 15, // Triángulo #8
            16, 17, 18, // Triángulo #9
            16, 18, 19, // Triángulo #10
            // CUBO 2
            20, 21, 22,    // Triángulo #11
            20, 22, 23,    // Triángulo #12
            24, 25, 26,    // Triángulo #13
            24, 26, 27,    // Triángulo #14
            28, 29, 30,    // Triángulo #15
            28, 30, 31,    // Triángulo #16
            32, 33, 34,    // Triángulo #17
            32, 34, 35,    // Triángulo #18
            36, 37, 38,    // Triángulo #19
            36, 38, 39,    // Triángulo #20
            // Pirámide
            40, 41, 42, // Triángulo #21 (base)
            40, 42, 43, // Triángulo #22 (base)
            40, 43, 44, // Triángulo #23 (base)
            40, 44, 41, // Triángulo #24 (base)
            41, 42, 43, // Triángulo #25 (caras laterales)
            41, 43, 44, // Triángulo #26 (caras laterales)
            42, 43, 44, // Triángulo #27 (caras laterales)
            42, 44, 45, // Triángulo #28 (caras laterales)
            43, 44, 45, // Triángulo #29 (caras laterales)
            41, 45, 42, // Triángulo #30 (caras laterales)
            40, 41, 45, // Triángulo #31 (caras inferiores)
            40, 45, 44, // Triángulo #32 (caras inferiores)
            40, 44, 43, // Triángulo #33 (caras inferiores)
            40, 43, 42  // Triángulo #34 (caras inferiores)
        ];
        // SPHERE

        for (var i = 0; i <= LATITUDE_BANDS; i++) {
            var theta = i * Math.PI / LATITUDE_BANDS;

            for (var j = 0; j <= LONGITUDE_BANDS; j++) {
                var phi = j * 2 * Math.PI / LONGITUDE_BANDS;
                    vertexesAndTextures.push(RADIUS * Math.sin(phi) * Math.sin(theta) + 0.15); // X
                    vertexesAndTextures.push(RADIUS * Math.cos(theta) + 0.15);                 // Y
                    vertexesAndTextures.push(RADIUS * Math.cos(phi) * Math.sin(theta) + 0.15); // Z

                    vertexesAndTextures.push(1 - (j / LONGITUDE_BANDS));  // U
                    vertexesAndTextures.push(1 - (i / LATITUDE_BANDS));   // V

                    // normal vector is a vec4
                    vertexesAndTextures.push(Math.sin(phi) * Math.sin(theta)) // X
                    vertexesAndTextures.push(Math.cos(theta))                 // Y
                    vertexesAndTextures.push(Math.cos(phi) * Math.sin(theta)) // Z
                                             
            }
        }
        
        for (var i = 0; i < LATITUDE_BANDS; i++) {
            for (var j = 0; j < LONGITUDE_BANDS; j++) {
                 var first = i * (LONGITUDE_BANDS + 1) + j + 32,
                     second = first + LONGITUDE_BANDS + 1;

                 indexes.push(first);
                 indexes.push(second);
                 indexes.push(first + 1);

                 indexes.push(second + 1);
                 indexes.push(first + 1);
                 indexes.push(second);
            }
        };
        console.log(indexes)
        // Write a_Position and a_TextCoord using gl.ARRAY_BUFFER
        gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexesAndTextures), gl.STATIC_DRAW);

        // a_Position
        var vertexPositionAttribute = gl.getAttribLocation(gl.program, "a_Position");
        gl.enableVertexAttribArray(vertexPositionAttribute);
        gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 4 * (3 + 2 + 3), 0);

        // a_TextCoord
        var vertexColorAttribute = gl.getAttribLocation(gl.program, "a_TexCoord");
        gl.enableVertexAttribArray(vertexColorAttribute);
        gl.vertexAttribPointer(vertexColorAttribute, 2, gl.FLOAT, false, 4 * (3 + 2 + 3), 4 * 3);
        
        var vertexNormalAttribute = gl.getAttribLocation(gl.program, "a_Normal");
        gl.enableVertexAttribArray(vertexNormalAttribute);
        gl.vertexAttribPointer(vertexNormalAttribute, 3, gl.FLOAT, false, 4 * (3 + 2 + 3), 4 * (3 + 2));

        // Write indexes in gl.ELEMENT_ARRAY_BUFFER
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexes), gl.STATIC_DRAW);
    }
    
    function toRadian(g){
		return g*Math.PI/180;
	}

    function initProjection(gl, canvas) {
        
        var pMatrixUniform = gl.getUniformLocation(gl.program, "u_pMatrix"),
            vMatrixUniform = gl.getUniformLocation(gl.program, "u_vMatrix"),
            
            ratio = canvas.width / canvas.height,
            
            vMatrix = mat4.lookAt(mat4.create(), [0, 0, 3], [0, 0, 0], [0, 1, 0]);
            pMatrix = mat4.perspective(mat4.create(), toRadian(60), ratio, 0.1, 100);
        
        // Write u_pMatrix
        gl.uniformMatrix4fv(pMatrixUniform, false, pMatrix);

        // Write u_vMatrix
        gl.uniformMatrix4fv(vMatrixUniform, false, vMatrix);

        // LUZ DIRECCIONAL WRITE "u_LightColor"
        var u_LightColor = gl.getUniformLocation(gl.program, "u_LightColor");
        gl.uniform3fv(u_LightColor, DIRECTIONAL_LIGHT_COLOR);

        // Write u_LightDirection
        var x_light = document.getElementById("x").value,
            y_light = document.getElementById("y").value,
            z_light = document.getElementById("z").value,
            lightDirection = [x_light, y_light, z_light],
            u_LightDirection = gl.getUniformLocation(gl.program, "u_LightDirection");
        gl.uniform3fv(u_LightDirection, lightDirection);

        // LUZ AMBIENTE WRITE "u_AmbientLight"
        var u_AmbientLight = gl.getUniformLocation(gl.program, "u_AmbientLight");
        gl.uniform3fv(u_AmbientLight, AMBIENT_LIGHT);
    }

    function initTexturesAndDraw(gl) {
    var image0 = new Image();
    var image1 = new Image();
    image0.src = 'portal.jpg';
    image1.src = 'light.jpg';
    image0.onload = function() {
        loadTexture(gl, "u_Sampler0", image0, 0, true);
        image1.onload = function() {
            loadTexture(gl, "u_Sampler1", image1, 1, true);
            drawScene(gl);
        };
    };
}

    function loadTexture(gl, samplerUniform, image1, unitNumber, flip) {
        // Flip the image's y axis
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flip);

        // Activate and configure texture
        gl.activeTexture(gl.TEXTURE0 + unitNumber);
        gl.bindTexture(gl.TEXTURE_2D, gl.createTexture());
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image1);

        // Set texture to the sampler
        var fragmentSamplerUniform = gl.getUniformLocation(gl.program, samplerUniform);
        gl.uniform1i(fragmentSamplerUniform, unitNumber);
    }

    function initShaders(gl, vs_source, fs_source){

        // Create Program & Compile shaders 
        var vertexShader = makeShader(gl, vs_source, gl.VERTEX_SHADER),
            fragmentShader = makeShader(gl, fs_source, gl.FRAGMENT_SHADER),
            glProgram = gl.createProgram();

        // Attach and link shaders to the program 
        gl.attachShader(glProgram, vertexShader);
        gl.attachShader(glProgram, fragmentShader);
        gl.linkProgram(glProgram);

        if (!gl.getProgramParameter(glProgram, gl.LINK_STATUS)){
            alert("UNABLE TO INITIALIZE THE SHADER PROGRAM");
            return false;
        }

        /* Use Program */
        gl.useProgram(glProgram);
        gl.program = glProgram;

        return true;
    }

    function makeShader(gl, src, type){

        var shader = gl.createShader(type);
        gl.shaderSource(shader, src);
        gl.compileShader(shader)

        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)){
            alert("ERROR COMPILE SHADER: " + gl.getShaderInfoLog(shader));
            return;     
        }
        return shader;
    }
</script>
