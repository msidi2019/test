<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/2.8.1/gl-matrix-min.js"></script>
    <title>Ejercicio 5</title>
</head>
<body onload="init()">
    <canvas id="myCanvas" width="640" height="480"></canvas><br>
    <b>Rotation</b>
    <input type="checkbox" name="rotation" checked>
    <input type="range" id="speed" min="1" max="3" value="1" step="1"> Speed<br>
    <b>WebGL primitive</b>
    <input type="radio" name="primitive" value="triangles" checked> Triangles
    <input type="radio" name="primitive" value="lines"> Lines<br>
    <b>Projection type</b>
    <input type="radio" name="projection" value="perspective" checked> Perspective
    <input type="radio" name="projection" value="orthographic"> Orthographic<br>
    <b>Decoration</b>
    <input type="radio" name="christmas" value="no" checked> No
    <input type="radio" name="christmas" value="yes"> Yes<br>

    <img id="portalTexture" src="portal_texture.jpg" style="display:none;">
    <img id="lightTexture" src="light_texture.jpg" style="display:none;">

    <script id="shaderVs" type="x-shader/x-vertex">
        attribute vec4 a_Position;
        attribute vec3 a_Color;
        attribute vec2 a_TextureCoord;
        uniform mat4 u_pMatrix;
        uniform mat4 u_vMatrix;
        uniform mat4 u_mvMatrix;
        varying highp vec4 v_Color;
        varying highp vec2 v_TextureCoord;
        void main(){
            gl_Position = u_pMatrix * u_vMatrix * u_mvMatrix * a_Position;
            v_Color = vec4(a_Color, 1.0);
            v_TextureCoord = a_TextureCoord;
        }
    </script>

    <script id="shaderFs" type="x-shader/x-fragment">
        varying highp vec4 v_Color;
        varying highp vec2 v_TextureCoord;
        uniform sampler2D u_Texture;
        uniform int u_Decoration; // 0: No, 1: Yes
        uniform sampler2D u_LightTexture;
        void main(){
            if (u_Decoration == 1) {
                vec4 lightColor = texture2D(u_LightTexture, v_TextureCoord);
                gl_FragColor = v_Color * lightColor;
            } else {
                gl_FragColor = v_Color * texture2D(u_Texture, v_TextureCoord);
            }
        }
    </script>

    <script>
        var gl,
            canvas,
            count = 0.0,
            ratio,
            z = 3,
            projectionValue = document.querySelector('input[name="projection"]:checked').value;

        function init(){
            
            // Get canvas object from the DOM and Init WebGL Context
            canvas = document.getElementById("myCanvas");
            gl = canvas.getContext("webgl");

            if (!gl) {
                console.log("FAILED TO GET THE RENDERING CONTEXT FOR WEBGL.");
                return;
            }

            // Init Shaders 
            var vs = document.getElementById('shaderVs').innerHTML,
                fs = document.getElementById('shaderFs').innerHTML;

            if (!initShaders(gl, vs, fs)){
                console.log("FAILED TO INITIALIZE SHADERS.");
                return;
            }

            // Init vertex shader
            initVertexShader(gl);

            // Init projection matrix
            initProjection(gl, canvas);

            // Set clear canvas color
            gl.clearColor(0.0, 0.0, 0.0, 1.0);

            // Hidden surface removal
            gl.enable(gl.DEPTH_TEST);

            // Load textures
            var texturePortal = loadTexture(gl, 'portalTexture');
            var textureLight = loadTexture(gl, 'lightTexture');

            // Event listener for mouse wheel
            document.addEventListener('wheel', function (event) {
                if (projectionValue == 'perspective'){
                    z = event.deltaY > 0 ? z - 1 : z + 1;
                }
            });
            drawScene();
        }

        function drawScene() {
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            
            projectionValue = document.querySelector('input[name="projection"]:checked').value,
            u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
            u_vMatrix = gl.getUniformLocation(gl.program, "u_vMatrix"),
            ratio = canvas.width/canvas.height;
            
            switch (projectionValue) {
                case "perspective":
                    var pMatrix = mat4.perspective(mat4.create(), toRadian(60), ratio, 0.1, 100),
                        vMatrix = mat4.lookAt(mat4.create(), [0, 0, z], [0, 0, 0], [0, 1, 0]);
                    break;
            
                case "orthographic":
                    var pMatrix = mat4.ortho(mat4.create(), -ratio, ratio, -1.0, 1.50, -1.0, 1.50),
                        vMatrix = mat4.create();
                    break;
                default:
            }

            gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
            gl.uniformMatrix4fv(u_vMatrix, false, vMatrix);

            var rotationChecked = document.querySelector('input[name="rotation"]').checked,
                primitiveValue = document.querySelector('input[name="primitive"]:checked').value,
                mvMatrix = mat4.fromRotation(mat4.create(), count, [0, 1, 0]),
                u_mvMatrix = gl.getUniformLocation(gl.program, "u_mvMatrix");

            gl.uniformMatrix4fv(u_mvMatrix, false, mvMatrix);

            var speed = parseInt(document.getElementById("speed").value);

            if (rotationChecked){
                count += 0.01 * speed;
            }

            switch (primitiveValue) {
                case "triangles":
                    // DRAW PRIMITIVE ELEMENTS FOR FIRST CUBE
                    gl.drawElements(gl.TRIANGLES, 6 * 3, gl.UNSIGNED_SHORT, 0);
                    // DRAW PRIMITIVE ELEMENTS FOR SECOND CUBE
                    gl.drawElements(gl.TRIANGLES, 6 * 3, gl.UNSIGNED_SHORT, 6 * 3 * 2);
                    // DRAW PRIMITIVE ELEMENTS FOR PYRAMID
                    gl.drawElements(gl.TRIANGLES, 6 * 3 * 2, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2); // Se multiplicó por 2 para dibujar los 6 triángulos de la pirámide
                    break;
                case "lines":
                    // DRAW LINES FOR FIRST CUBE
                    gl.drawArrays(gl.LINE_LOOP, 0, 4);
                    gl.drawArrays(gl.LINE_LOOP, 4, 4);
                    gl.drawArrays(gl.LINES, 8, 8); // Se dibujan las líneas diagonales
                    // DRAW LINES FOR SECOND CUBE
                    gl.drawArrays(gl.LINE_LOOP, 16, 4);
                    gl.drawArrays(gl.LINE_LOOP, 20, 4);
                    gl.drawArrays(gl.LINES, 24, 8); // Se dibujan las líneas diagonales
                    // DRAW LINES FOR PYRAMID
                    gl.drawArrays(gl.LINE_LOOP, 28, 3);
                    gl.drawArrays(gl.LINE_LOOP, 31, 3);
                    gl.drawArrays(gl.LINES, 34, 6); // Se dibujan las líneas diagonales
                    break;
                default:
            }

            requestAnimationFrame(drawScene);
        }

        function initVertexShader(gl) {
            var verticesColorsTexture = new Float32Array([
                // RECTANGLE
                // Vertex (x, y, z)            // Color (r, g, b)           // Texture coords (u, v)
                -0.5, 0.5, 0.5,                1.0, 0.0, 0.0,              0.0, 0.0,
                -0.5, -0.5, 0.5,               1.0, 0.0, 0.0,              0.0, 1.0,
                0.5, -0.5, 0.5,                1.0, 0.0, 0.0,              1.0, 1.0,
                0.5, 0.5, 0.5,                 1.0, 0.0, 0.0,              1.0, 0.0,

                // Vertex (x, y, z)            // Color (r, g, b)           // Texture coords (u, v)
                -0.5, 0.5, -0.5,               1.0, 0.0, 0.0,              0.0, 0.0,
                -0.5, -0.5, -0.5,              1.0, 0.0, 0.0,              0.0, 1.0,
                0.5, -0.5, -0.5,               1.0, 0.0, 0.0,              1.0, 1.0,
                0.5, 0.5, -0.5,                1.0, 0.0, 0.0,              1.0, 0.0,

                // PYRAMID
                // Vertex (x, y, z)            // Color (r, g, b)           // Texture coords (u, v)
                -0.5, -0.5, 0.5,               0.0, 1.0, 0.0,              0.5, 0.0,  // Base
                -0.5, -0.5, -0.5,              0.0, 1.0, 0.0,              0.0, 1.0,
                0.5, -0.5, -0.5,               0.0, 1.0, 0.0,              1.0, 1.0,
                0.5, -0.5, 0.5,                0.0, 1.0, 0.0,              1.0, 0.0,
                0.0, 0.5, 0.0,                 0.0, 1.0, 0.0,              0.5, 1.0,  // Top
            ]);

            var verticesColorsTextureIndices = new Uint16Array([
                0, 1, 2, 0, 2, 3,       // FRONT FACE
                4, 5, 6, 4, 6, 7,       // BACK FACE
                8, 9, 10, 8, 10, 11,    // TOP FACE
                12, 13, 14, 12, 14, 15, // BOTTOM FACE
                16, 17, 18, 16, 18, 19, // RIGHT FACE
                20, 21, 22, 20, 22, 23, // LEFT FACE

                // PYRAMID
                24, 25, 26,   // Front face
                24, 26, 27,   // Right face
                24, 27, 28,   // Back face
                24, 28, 25,   // Left face
                25, 26, 27,   // Base triangle 1
                25, 27, 28    // Base triangle 2
            ]);

            var vertexBuffer = gl.createBuffer();
            if (!vertexBuffer) {
                console.log('Failed to create the buffer object');
                return -1;
            }

            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, verticesColorsTexture, gl.STATIC_DRAW);

            var FSIZE = verticesColorsTexture.BYTES_PER_ELEMENT;

            // Assign the buffer object to a_Position and enable the assignment
            var a_Position = gl.getAttribLocation(gl.program, 'a_Position');
            if (a_Position < 0) {
                console.log('Failed to get the storage location of a_Position');
                return -1;
            }
            gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, FSIZE * 8, 0);
            gl.enableVertexAttribArray(a_Position);

            // Assign the buffer object to a_Color and enable the assignment
            var a_Color = gl.getAttribLocation(gl.program, 'a_Color');
            if (a_Color < 0) {
                console.log('Failed to get the storage location of a_Color');
                return -1;
            }
            gl.vertexAttribPointer(a_Color, 3, gl.FLOAT, false, FSIZE * 8, FSIZE * 3);
            gl.enableVertexAttribArray(a_Color);

            // Assign the buffer object to a_TextureCoord and enable the assignment
            var a_TextureCoord = gl.getAttribLocation(gl.program, 'a_TextureCoord');
            if (a_TextureCoord < 0) {
                console.log('Failed to get the storage location of a_TextureCoord');
                return -1;
            }
            gl.vertexAttribPointer(a_TextureCoord, 2, gl.FLOAT, false, FSIZE * 8, FSIZE * 6);
            gl.enableVertexAttribArray(a_TextureCoord);

            // Unbind the buffer object
            gl.bindBuffer(gl.ARRAY_BUFFER, null);

            // Create an buffer object for storing indices
            var indexBuffer = gl.createBuffer();
            if (!indexBuffer) {
                console.log('Failed to create the buffer object');
                return -1;
            }
            
            // Bind the buffer object to target
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);

            // Write data into the buffer object
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, verticesColorsTextureIndices, gl.STATIC_DRAW);
        }

        function toRadian(angle) {
            return angle * Math.PI / 180.0;
        }

        function initProjection(gl, canvas) {
            // Get the storage location of u_pMatrix
            var u_pMatrix = gl.getUniformLocation(gl.program, 'u_pMatrix');
            if (!u_pMatrix) {
                console.log('Failed to get the storage location of u_pMatrix');
                return;
            }
            var pMatrix = mat4.create();
            // Set the perspective projection matrix
            var ratio = canvas.width / canvas.height;
            mat4.perspective(pMatrix, toRadian(60), ratio, 1, 100);
            // Pass the projection matrix to u_pMatrix
            gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
        }

        function loadTexture(gl, textureId) {
            var texture = gl.createTexture();
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, document.getElementById(textureId));
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.bindTexture(gl.TEXTURE_2D, null);
            return texture;
        }
    </script>
</body>
</html>
