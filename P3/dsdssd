<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/2.8.1/gl-matrix-min.js"></script>
    <title>Ejercicio 5</title>
</head>

<body onload="init()">
    <canvas id="myCanvas" width="640" height="480"></canvas><br>
    <b>Rotation</b>
    <input type="checkbox" name="rotation" checked>
    <input type="range" id="speed" min="1" max="3" value="1" step="1"> Speed<br>
    <b>WebGL primitive</b>
    <input type="radio" name="primitive" value="triangles" checked> Triangles
    <input type="radio" name="primitive" value="lines"> Lines<br>
    <b>Projection type</b>
    <input type="radio" name="projection" value="perspective" checked> Perspective
    <input type="radio" name="projection" value="orthographic"> Orthographic<br>
    <b>Decoration</b>
    <input type="radio" name="christmas" value="no" checked> No
    <input type="radio" name="christmas" value="yes"> Yes<br>

    <script id="shaderVs" type="x-shader/x-vertex">
        attribute vec4 a_Position;
        attribute vec3 a_Color;
        attribute vec2 a_TextureCoord; // Nuevas coordenadas de textura
        uniform mat4 u_pMatrix;
        uniform mat4 u_vMatrix;
        uniform mat4 u_mvMatrix;
        varying highp vec4 v_Color;
        varying highp vec2 v_TextureCoord; // Pasar coordenadas de textura al fragment shader
        void main(){
            gl_Position = u_pMatrix * u_vMatrix * u_mvMatrix * a_Position;
            v_Color = vec4(a_Color, 1.0);
            v_TextureCoord = a_TextureCoord; // Asignar las coordenadas de textura a la salida
        }
    </script>

    <script id="shaderFs" type="x-shader/x-fragment">
        varying highp vec4 v_Color;
        varying highp vec2 v_TextureCoord; // Recibir coordenadas de textura del vertex shader
        uniform sampler2D u_Sampler; // Textura
        uniform sampler2D u_DecorationSampler; // Segunda textura para Decoration
        uniform int u_UseDecoration; // Indicador de si se usa la segunda textura
        void main(){
            if (u_UseDecoration == 1) {
                // Usar segunda textura para Decoration
                gl_FragColor = texture2D(u_DecorationSampler, v_TextureCoord);
            } else {
                // Usar textura original
                gl_FragColor = texture2D(u_Sampler, v_TextureCoord);
            }
        }
    </script>

    <script>
        var gl,
            canvas,
            count = 0.0,
            ratio,
            z = 3,
            projectionValue,
            useDecoration = 0; // Por defecto, no se usa la segunda textura

        function init(){
            // Get canvas object from the DOM and Init WebGL Context
            canvas = document.getElementById("myCanvas");
            gl = canvas.getContext("webgl");

            if (!gl) {
                console.log("FAILED TO GET THE RENDERING CONTEXT FOR WEBGL.");
                return;
            }

            // Init Shaders 
            var vs = document.getElementById('shaderVs').innerHTML,
                fs = document.getElementById('shaderFs').innerHTML;

            if (!initShaders(gl, vs, fs)){
                console.log("FAILED TO INITIALIZE SHADERS.");
                return;
            }

            // Init vertex shader
            initVertexShader(gl);

            // Init projection matrix
            initProjection(gl, canvas);

            // Set clear canvas color
            gl.clearColor(0.0, 0.0, 0.0, 1.0);

            // Hidden surface removal
            gl.enable(gl.DEPTH_TEST);

            // Event listener for mouse wheel
            document.addEventListener('wheel', function (event) {
                if (projectionValue == 'perspective'){
                    z = event.deltaY > 0 ? z - 1 : z + 1;
                }
            });
            drawScene();
        }

        function drawScene() {
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            
            projectionValue = document.querySelector('input[name="projection"]:checked').value,
            u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
            u_vMatrix = gl.getUniformLocation(gl.program, "u_vMatrix"),
            ratio = canvas.width/canvas.height;
            
            switch (projectionValue) {
                case "perspective":
                    var pMatrix = mat4.perspective(mat4.create(), toRadian(60), ratio, 0.1, 100),
                        vMatrix = mat4.lookAt(mat4.create(), [0, 0, z], [0, 0, 0], [0, 1, 0]);
                    break;
            
                case "orthographic":
                    var pMatrix = mat4.ortho(mat4.create(), -ratio, ratio, -1.0, 1.50, -1.0, 1.50),
                        vMatrix = mat4.create();
                    break;
                default:
            }

            gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
            gl.uniformMatrix4fv(u_vMatrix, false, vMatrix);

            var rotationChecked = document.querySelector('input[name="rotation"]').checked,
                primitiveValue = document.querySelector('input[name="primitive"]:checked').value,
                mvMatrix = mat4.fromRotation(mat4.create(), count, [0, 1, 0]),
                u_mvMatrix = gl.getUniformLocation(gl.program, "u_mvMatrix");

            gl.uniformMatrix4fv(u_mvMatrix, false, mvMatrix);

            var speed = parseInt(document.getElementById("speed").value);

            if (rotationChecked){
                count += 0.01 * speed;
            }

            // Update Decoration value based on user selection
            useDecoration = document.querySelector('input[name="christmas"]:checked').value === 'yes' ? 1 : 0;

            // Pass the Decoration value to the fragment shader
            var u_UseDecoration = gl.getUniformLocation(gl.program, "u_UseDecoration");
            gl.uniform1i(u_UseDecoration, useDecoration);

            // DRAW OBJECTS HERE
            
            // CALL DRAWSCENE AGAIN IN THE NEXT BROWSER REPAINT
            requestAnimationFrame(drawScene);
        }
        
        function initVertexShader(gl) {
            var verticesColorsTexCoords = new Float32Array([
                // Vértices          Colores               Coordenadas de textura
                // Cara frontal
                0.5, 0.5, 0.5,     1.0, 0.0, 0.0,        1.0, 1.0,
                -0.5, 0.5, 0.5,    1.0, 0.0, 0.0,        0.0, 1.0,
                -0.5, -0.5, 0.5,   1.0, 0.0, 0.0,        0.0, 0.0,
                0.5, -0.5, 0.5,    1.0, 0.0, 0.0,        1.0, 0.0,

                // Cara posterior
                0.5, 0.5, -0.5,    0.0, 1.0, 0.0,        1.0, 1.0,
                -0.5, 0.5, -0.5,   0.0, 1.0, 0.0,        0.0, 1.0,
                -0.5, -0.5, -0.5,  0.0, 1.0, 0.0,        0.0, 0.0,
                0.5, -0.5, -0.5,   0.0, 1.0, 0.0,        1.0, 0.0,

                // Cara superior
                0.5, 0.5, 0.5,     0.0, 0.0, 1.0,        1.0, 1.0,
                -0.5, 0.5, 0.5,    0.0, 0.0, 1.0,        0.0, 1.0,
                -0.5, 0.5, -0.5,   0.0, 0.0, 1.0,        0.0, 0.0,
                0.5, 0.5, -0.5,    0.0, 0.0, 1.0,        1.0, 0.0,

                // Cara inferior
                0.5, -0.5, 0.5,    1.0, 1.0, 0.0,        1.0, 1.0,
                -0.5, -0.5, 0.5,   1.0, 1.0, 0.0,        0.0, 1.0,
                -0.5, -0.5, -0.5,  1.0, 1.0, 0.0,        0.0, 0.0,
                0.5, -0.5, -0.5,   1.0, 1.0, 0.0,        1.0, 0.0
            ]);
            
            var vertexColorBuffer = gl.createBuffer(),
                FSIZE = verticesColorsTexCoords.BYTES_PER_ELEMENT;

            gl.bindBuffer(gl.ARRAY_BUFFER, vertexColorBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, verticesColorsTexCoords, gl.STATIC_DRAW);

            var a_Position = gl.getAttribLocation(gl.program, 'a_Position');
            gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, FSIZE * 8, 0);
            gl.enableVertexAttribArray(a_Position);

            var a_Color = gl.getAttribLocation(gl.program, 'a_Color');
            gl.vertexAttribPointer(a_Color, 3, gl.FLOAT, false, FSIZE * 8, FSIZE * 3);
            gl.enableVertexAttribArray(a_Color);

            // Obtener la ubicación de las coordenadas de textura y habilitar el atributo
            var a_TextureCoord = gl.getAttribLocation(gl.program, 'a_TextureCoord');
            gl.vertexAttribPointer(a_TextureCoord, 2, gl.FLOAT, false, FSIZE * 8, FSIZE * 6);
            gl.enableVertexAttribArray(a_TextureCoord);
        }

        function initProjection(gl, canvas) {
            var u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
                ratio = canvas.width/canvas.height,
                pMatrix = mat4.perspective(mat4.create(), toRadian(60), ratio, 0.1, 100);

            gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
        }

        function toRadian(angle) {
            return angle * Math.PI / 180;
        }
    </script>
</body>
</html>
