<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/2.8.1/gl-matrix-min.js"></script>
    <title>Ejercicio 5</title>
</head>

<body onload="init()">
    <canvas id="myCanvas" width="640" height="480"></canvas><br>
    <b>Decoration</b>
    <input type="radio" name="decoration" value="no" checked> No
    <input type="radio" name="decoration" value="yes"> Yes<br>

    <script id="shaderVs" type="x-shader/x-vertex">
        attribute vec4 a_Position;
        attribute vec3 a_Color;
        attribute vec2 a_TexCoord; // Texture coordinates attribute
        uniform mat4 u_pMatrix;
        uniform mat4 u_vMatrix;
        uniform mat4 u_mvMatrix;
        varying highp vec4 v_Color;
        varying highp vec2 v_TexCoord; // Pass texture coordinates to fragment shader
        void main(){
            gl_Position = u_pMatrix * u_vMatrix * u_mvMatrix * a_Position;
            v_Color = vec4(a_Color, 1.0);
            v_TexCoord = a_TexCoord; // Assign texture coordinates
        }
    </script>

    <script id="shaderFs" type="x-shader/x-fragment">
        varying highp vec4 v_Color;
        varying highp vec2 v_TexCoord; // Receive texture coordinates from vertex shader
        uniform sampler2D u_texture; // Texture sampler
        uniform bool u_decoration; // Decoration option
        void main(){
            // If decoration option is enabled, use light texture for the arch
            if (u_decoration) {
                gl_FragColor = texture2D(u_texture, v_TexCoord);
            } else {
                gl_FragColor = v_Color;
            }
        }
    </script>

    <script>
        var gl,
            canvas,
            count = 0.0,
            ratio,
            z = 3,
            projectionValue = document.querySelector('input[name="projection"]:checked').value,
            decorationValue = document.querySelector('input[name="decoration"]:checked').value;

        function init(){
            
            // Get canvas object from the DOM and Init WebGL Context
            canvas = document.getElementById("myCanvas");
            gl = canvas.getContext("webgl");

            if (!gl) {
                console.log("FAILED TO GET THE RENDERING CONTEXT FOR WEBGL.");
                return;
            }

            // Init Shaders 
            var vs = document.getElementById('shaderVs').innerHTML,
                fs = document.getElementById('shaderFs').innerHTML;

            if (!initShaders(gl, vs, fs)){
                console.log("FAILED TO INITIALIZE SHADERS.");
                return;
            }

            // Init vertex shader
            initVertexShader(gl);

            // Init projection matrix
            initProjection(gl, canvas);

            // Set clear canvas color
            gl.clearColor(0.0, 0.0, 0.0, 1.0);

            // Hidden surface removal
            gl.enable(gl.DEPTH_TEST);

            // Event listener for mouse wheel
            document.addEventListener('wheel', function (event) {
                if (projectionValue == 'perspective'){
                    z = event.deltaY > 0 ? z - 1 : z + 1;
                }
            });

            // Event listener for decoration option
            document.querySelectorAll('input[name="decoration"]').forEach(function(option) {
                option.addEventListener('change', function() {
                    decorationValue = this.value;
                });
            });

            // Event listener for keyboard input
            document.addEventListener('keydown', function(event) {
                switch (event.key) {
                    case 'ArrowUp':
                        // Elevar la cámara
                        elevation += step;
                        break;
                    case 'ArrowDown':
                        // Descender la cámara
                        elevation -= step;
                        break;
                }
            });

            drawScene();
        }

        function drawScene() {
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            
            projectionValue = document.querySelector('input[name="projection"]:checked').value,
            u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
            u_vMatrix = gl.getUniformLocation(gl.program, "u_vMatrix"),
            ratio = canvas.width/canvas.height;
            
            switch (projectionValue) {
                case "perspective":
                    var pMatrix = mat4.perspective(mat4.create(), toRadian(60), ratio, 0.1, 100),
                        vMatrix = mat4.lookAt(mat4.create(), [0, 0, z], [0, 0, 0], [0, 1, 0]);
                    break;
            
                case "orthographic":
                    var pMatrix = mat4.ortho(mat4.create(), -ratio, ratio, -1.0, 1.50, -1.0, 1.50),
                        vMatrix = mat4.create();
                    break;
                default:
            }

            gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
            gl.uniformMatrix4fv(u_vMatrix, false, vMatrix);

            var rotationChecked = document.querySelector('input[name="rotation"]').checked,
                primitiveValue = document.querySelector('input[name="primitive"]:checked').value,
                mvMatrix = mat4.fromRotation(mat4.create(), count, [0, 1, 0]),
                u_mvMatrix = gl.getUniformLocation(gl.program, "u_mvMatrix");

            gl.uniformMatrix4fv(u_mvMatrix, false, mvMatrix);

            var speed = parseInt(document.getElementById("speed").value);

            if (rotationChecked){
                count += 0.01 * speed;
            }

            switch (primitiveValue) {
                case "triangles":
                    // DRAW PRIMITIVE ELEMENTS FOR FIRST CUBE
                    gl.drawElements(gl.TRIANGLES, 6 * 3, gl.UNSIGNED_SHORT, 0);
                    // DRAW PRIMITIVE ELEMENTS FOR SECOND CUBE
                    gl.drawElements(gl.TRIANGLES, 6 * 3, gl.UNSIGNED_SHORT, 6 * 3 * 2);
                    // DRAW PRIMITIVE ELEMENTS FOR PYRAMID
                    gl.drawElements(gl.TRIANGLES, 6 * 3 * 2, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2); // Se multiplicó por 2 para dibujar los 6 triángulos de la pirámide
                    break;
                case "lines":
                    // DRAW LINES FOR FIRST CUBE
                    gl.drawElements(gl.LINES, 6 * 3 * 2, gl.UNSIGNED_SHORT, 0); // Multiplicado por 2 porque cada triángulo tiene 3 líneas
                    // DRAW LINES FOR SECOND CUBE
                    gl.drawElements(gl.LINES, 6 * 3 * 2, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2);
                    // DRAW LINES FOR PYRAMID
                    gl.drawElements(gl.LINES, 6 * 3 * 2 * 2, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2 * 2);
                    break;
            }
            requestAnimationFrame(drawScene);
        }

        function initVertexShader(gl) {
            // Vertexes, colors, and texture coordinates (X, Y, Z, R, G, B, S, T)
            var vertexesAndColors = [
                // CUBE 1 (LEFT)
                // BACK - BLUE
                -0.75, -0.50, -0.25, 0.0, 0.0, 1.0, 0.0, 0.0, // Vertex 0
                -0.25, -0.50, -0.25, 0.0, 0.0, 1.0, 1.0, 0.0, // Vertex 1
                -0.25, 0.50, -0.25, 0.0, 0.0, 1.0, 1.0, 1.0, // Vertex 2
                -0.75, 0.50, -0.25, 0.0, 0.0, 1.0, 0.0, 1.0, // Vertex 3
                // FRONT - RED
                -0.75, -0.50, 0.25, 1.0, 0.0, 0.0, 0.0, 0.0, // Vertex 4
                -0.25, -0.50, 0.25, 1.0, 0.0, 0.0, 1.0, 0.0, // Vertex 5
                -0.25, 0.50, 0.25, 1.0, 0.0, 0.0, 1.0, 1.0, // Vertex 6
                -0.75, 0.50, 0.25, 1.0, 0.0, 0.0, 0.0, 1.0, // Vertex 7
                // LEFT - YELLOW
                -0.75, -0.50, -0.25, 1.0, 1.0, 0.0, 0.0, 0.0, // Vertex 8
                -0.75, 0.50, -0.25, 1.0, 1.0, 0.0, 1.0, 0.0, // Vertex 9
                -0.75, 0.50, 0.25, 1.0, 1.0, 0.0, 1.0, 1.0, // Vertex 10
                -0.75, -0.50, 0.25, 1.0, 1.0, 0.0, 0.0, 1.0, // Vertex 11
                // RIGHT - GREEN
                -0.25, -0.50, -0.25, 0.0, 1.0, 0.0, 0.0, 0.0, // Vertex 12
                -0.25, 0.50, -0.25, 0.0, 1.0, 0.0, 1.0, 0.0, // Vertex 13
                -0.25, 0.50, 0.25, 0.0, 1.0, 0.0, 1.0, 1.0, // Vertex 14
                -0.25, -0.50, 0.25, 0.0, 1.0, 0.0, 0.0, 1.0, // Vertex 15
                // BOTTOM - TURQUOISE
                -0.75, -0.50, -0.25, 0.0, 1.0, 1.0, 0.0, 0.0, // Vertex 16
                -0.75, -0.50, 0.25, 0.0, 1.0, 1.0, 1.0, 0.0, // Vertex 17
                -0.25, -0.50, 0.25, 0.0, 1.0, 1.0, 1.0, 1.0, // Vertex 18
                -0.25, -0.50, -0.25, 0.0, 1.0, 1.0, 0.0, 1.0, // Vertex 19
                // TOP - WHITE
                -0.75, 0.50, -0.25, 1.0, 1.0, 1.0, 0.0, 0.0, // Vertex 20
                -0.75, 0.50, 0.25, 1.0, 1.0, 1.0, 1.0, 0.0, // Vertex 21
                -0.25, 0.50, 0.25, 1.0, 1.0, 1.0, 1.0, 1.0, // Vertex 22
                -0.25, 0.50, -0.25, 1.0, 1.0, 1.0, 0.0, 1.0, // Vertex 23
                
                // CUBE 2 (RIGHT)
                // BACK - BLUE
                0.25, -0.50, -0.25, 0.0, 0.0, 1.0, 0.0, 0.0, // Vertex 24
                0.75, -0.50, -0.25, 0.0, 0.0, 1.0, 1.0, 0.0, // Vertex 25
                0.75, 0.50, -0.25, 0.0, 0.0, 1.0, 1.0, 1.0, // Vertex 26
                0.25, 0.50, -0.25, 0.0, 0.0, 1.0, 0.0, 1.0, // Vertex 27
                // FRONT - RED
                0.25, -0.50, 0.25, 1.0, 0.0, 0.0, 0.0, 0.0, // Vertex 28
                0.75, -0.50, 0.25, 1.0, 0.0, 0.0, 1.0, 0.0, // Vertex 29
                0.75, 0.50, 0.25, 1.0, 0.0, 0.0, 1.0, 1.0, // Vertex 30
                0.25, 0.50, 0.25, 1.0, 0.0, 0.0, 0.0, 1.0, // Vertex 31
                // LEFT - YELLOW
                0.25, -0.50, -0.25, 1.0, 1.0, 0.0, 0.0, 0.0, // Vertex 32
                0.25, 0.50, -0.25, 1.0, 1.0, 0.0, 1.0, 0.0, // Vertex 33
                0.25, 0.50, 0.25, 1.0, 1.0, 0.0, 1.0, 1.0, // Vertex 34
                0.25, -0.50, 0.25, 1.0, 1.0, 0.0, 0.0, 1.0, // Vertex 35
                // RIGHT - GREEN
                0.75, -0.50, -0.25, 0.0, 1.0, 0.0, 0.0, 0.0, // Vertex 36
                0.75, 0.50, -0.25, 0.0, 1.0, 0.0, 1.0, 0.0, // Vertex 37
                0.75, 0.50, 0.25, 0.0, 1.0, 0.0, 1.0, 1.0, // Vertex 38
                0.75, -0.50, 0.25, 0.0, 1.0, 0.0, 0.0, 1.0, // Vertex 39
                // BOTTOM - TURQUOISE
                0.25, -0.50, -0.25, 0.0, 1.0, 1.0, 0.0, 0.0, // Vertex 40
                0.25, -0.50, 0.25, 0.0, 1.0, 1.0, 1.0, 0.0, // Vertex 41
                0.75, -0.50, 0.25, 0.0, 1.0, 1.0, 1.0, 1.0, // Vertex 42
                0.75, -0.50, -0.25, 0.0, 1.0, 1.0, 0.0, 1.0, // Vertex 43
                // TOP - WHITE
                0.25, 0.50, -0.25, 1.0, 1.0, 1.0, 0.0, 0.0, // Vertex 44
                0.25, 0.50, 0.25, 1.0, 1.0, 1.0, 1.0, 0.0, // Vertex 45
                0.75, 0.50, 0.25, 1.0, 1.0, 1.0, 1.0, 1.0, // Vertex 46
                0.75, 0.50, -0.25, 1.0, 1.0, 1.0, 0.0, 1.0, // Vertex 47
                
                // PYRAMID
                // BOTTOM - TURQUOISE
                0.25, -0.50, -0.75, 0.0, 1.0, 1.0, 0.0, 0.0, // Vertex 48
                -0.25, -0.50, -0.75, 0.0, 1.0, 1.0, 1.0, 0.0, // Vertex 49
                -0.25, -0.50, -0.25, 0.0, 1.0, 1.0, 1.0, 1.0, // Vertex 50
                0.25, -0.50, -0.25, 0.0, 1.0, 1.0, 0.0, 1.0, // Vertex 51
                // LEFT - YELLOW
                0.25, -0.50, -0.75, 1.0, 1.0, 0.0, 0.0, 0.0, // Vertex 52
                0.25, -0.50, -0.25, 1.0, 1.0, 0.0, 1.0, 0.0, // Vertex 53
                0.00, 0.00, -0.50, 1.0, 1.0, 0.0, 0.5, 1.0, // Vertex 54
                // RIGHT - GREEN
                -0.25, -0.50, -0.75, 0.0, 1.0, 0.0, 0.0, 0.0, // Vertex 55
                -0.25, -0.50, -0.25, 0.0, 1.0, 0.0, 1.0, 0.0, // Vertex 56
                0.00, 0.00, -0.50, 0.0, 1.0, 0.0, 0.5, 1.0, // Vertex 57
                // FRONT - RED
                0.25, -0.50, -0.75, 1.0, 0.0, 0.0, 0.0, 0.0, // Vertex 58
                -0.25, -0.50, -0.75, 1.0, 0.0, 0.0, 1.0, 0.0, // Vertex 59
                0.00, 0.00, -0.50, 1.0, 0.0, 0.0, 0.5, 1.0 // Vertex 60
            ];

            // Indices (Cada 3 índices representan un triángulo)
            var indexes = [
                0, 1, 2, 0, 2, 3, // BACK
                4, 5, 6, 4, 6, 7, // FRONT
                8, 9, 10, 8, 10, 11, // LEFT
                12, 13, 14, 12, 14, 15, // RIGHT
                16, 17, 18, 16, 18, 19, // BOTTOM
                20, 21, 22, 20, 22, 23, // TOP

                // CUBE 2
                24, 25, 26, 24, 26, 27, // BACK
                28, 29, 30, 28, 30, 31, // FRONT
                32, 33, 34, 32, 34, 35, // LEFT
                36, 37, 38, 36, 38, 39, // RIGHT
                40, 41, 42, 40, 42, 43, // BOTTOM
                44, 45, 46, 44, 46, 47, // TOP

                // PYRAMID
                48, 49, 50, 48, 50, 51, // BOTTOM
                52, 53, 54, // LEFT
                55, 56, 57, // RIGHT
                58, 59, 60 // FRONT
            ];

            // Init Buffer
            var vertexBuffer = gl.createBuffer(),
                indexBuffer = gl.createBuffer(),
                FSIZE = vertexesAndColors.BYTES_PER_ELEMENT;

            // Bind Buffer
            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexesAndColors), gl.STATIC_DRAW);

            // Attributes
            var a_Position = gl.getAttribLocation(gl.program, 'a_Position'),
                a_Color = gl.getAttribLocation(gl.program, 'a_Color'),
                a_TexCoord = gl.getAttribLocation(gl.program, 'a_TexCoord');

            // Bind Vertex Buffer Object
            gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, FSIZE * 8, 0);
            gl.vertexAttribPointer(a_Color, 3, gl.FLOAT, false, FSIZE * 8, FSIZE * 3);
            gl.vertexAttribPointer(a_TexCoord, 2, gl.FLOAT, false, FSIZE * 8, FSIZE * 6);

            // Enable the assignment of the buffer object
            gl.enableVertexAttribArray(a_Position);
            gl.enableVertexAttribArray(a_Color);
            gl.enableVertexAttribArray(a_TexCoord);

            // Index Buffer Object
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexes), gl.STATIC_DRAW);
            return indexes.length;
        }

        // Initialize shaders
        var vertexSource = document.getElementById("vs").text,
            fragmentSource = document.getElementById("fs").text;

        var gl = createWebGLContext("canvas");

        gl.program = createProgram(gl, vertexSource, fragmentSource);
        gl.clearColor(0.0, 0.0, 0.0, 1.0);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
        gl.enable(gl.DEPTH_TEST);

        var numIndices = initVertexShader(gl);

        var u_ProjMatrix = gl.getUniformLocation(gl.program, "u_ProjMatrix"),
            u_mvMatrix = gl.getUniformLocation(gl.program, "u_mvMatrix"),
            u_sampler = gl.getUniformLocation(gl.program, 'u_sampler');

        // Create camera matrix
        var projMatrix = new Matrix4(),
            mvMatrix = new Matrix4();

        projMatrix.setPerspective(90, canvas.width / canvas.height, 0.1, 10);
        gl.uniformMatrix4fv(u_ProjMatrix, false, projMatrix.elements);

        var cameraX = 0, cameraY = 0, cameraZ = 1;

        document.getElementById("camera").addEventListener("click", function (event) {
            if (event.target.checked){
                cameraX = 0; cameraY = 0; cameraZ = 1;
            }
            else {
                cameraX = 1; cameraY = 1; cameraZ = 1;
            }
        });

        document.getElementById("rotation").addEventListener("click", function (event) {
            rotationChecked = event.target.checked;
        });

        var primitiveValue = "triangles";

        document.getElementById("triangles").addEventListener("click", function (event) {
            primitiveValue = event.target.value;
        });

        document.getElementById("lines").addEventListener("click", function (event) {
            primitiveValue = event.target.value;
        });

        function drawScene() {
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

            // LookAt
            mvMatrix.setLookAt(cameraX, cameraY, cameraZ, 0, 0, 0, 0, 1, 0);

            // Rotation
            mvMatrix.rotate(count, 0, 1, 0);

            // Draw
            var u_mvMatrix = gl.getUniformLocation(gl.program, "u_mvMatrix");

            gl.uniformMatrix4fv(u_mvMatrix, false, mvMatrix);

            var speed = parseInt(document.getElementById("speed").value);

            if (rotationChecked){
                count += 0.01 * speed;
            }

            switch (primitiveValue) {
                case "triangles":
                    // DRAW PRIMITIVE ELEMENTS FOR FIRST CUBE
                    gl.drawElements(gl.TRIANGLES, 6 * 3, gl.UNSIGNED_SHORT, 0);
                    // DRAW PRIMITIVE ELEMENTS FOR SECOND CUBE
                    gl.drawElements(gl.TRIANGLES, 6 * 3, gl.UNSIGNED_SHORT, 6 * 3 * 2);
                    // DRAW PRIMITIVE ELEMENTS FOR PYRAMID
                    gl.drawElements(gl.TRIANGLES, 6 * 3 * 2, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2); // Se multiplicó por 2 para dibujar los 6 triángulos de la pirámide
                    break;
                case "lines":
                    // DRAW LINES FOR FIRST CUBE
                    gl.drawElements(gl.LINES, 6 * 3 * 2, gl.UNSIGNED_SHORT, 0); // Multiplicado por 2 porque cada triángulo tiene 3 líneas
                    // DRAW LINES FOR SECOND CUBE
                    gl.drawElements(gl.LINES, 6 * 3 * 2, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2);
                    // DRAW LINES FOR PYRAMID
                    gl.drawElements(gl.LINES, 6 * 3 * 2 * 2, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2 * 2);
                    break;
            }
            requestAnimationFrame(drawScene);
        }

        drawScene();
    </script>
</body>
</html>
