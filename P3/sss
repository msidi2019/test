<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/2.8.1/gl-matrix-min.js"></script>
    <title>Ejercicio 5</title>
</head>

<body onload="init()">
    <canvas id="myCanvas" width="640" height="480"></canvas>
    <br>
    <b>Step:</b>
    <input type="text" value="0.1" id="step">
    <br>
    <b>Rotation</b>
    <input type="checkbox" name="rotation" checked>
    <input type="range" id="speed" min="1" max="3" value="1" step="1"><b>Speed</b><br>
    <b>WebGL primitive</b>
    <input type="radio" name="primitive" value="triangles" checked>Triangles
    <input type="radio" name="primitive" value="lines">Lines<br>
    <b>Projection type</b>
    <input type="radio" name="projection" value="perspective" checked> Perspective
    <input type="radio" name="projection" value="orthographic">Orthographic<br>
    <b>Decoration</b>
    <input type="radio" name="christmas" value="no" checked onclick="toggleDecoration()"> No
    <input type="radio" name="christmas" value="yes" onclick="toggleDecoration()"> Yes<br>
</body>

    <script id="shaderVs" type="x-shader/x-vertex">
        attribute vec4 a_Position;
        attribute vec3 a_Color;
        attribute vec2 a_TextureCoord;
        varying highp vec4 v_Color;
        varying highp vec2 v_TextureCoord;
        uniform mat4 u_pMatrix;
        uniform mat4 u_vMatrix;
        uniform mat4 u_mvMatrix;
        void main(){
            gl_Position = u_pMatrix * u_vMatrix * u_mvMatrix * a_Position;
            v_Color = vec4(a_Color, 1.0);
            v_TextureCoord = a_TextureCoord;
        }
    </script>

    <script id="shaderFs" type="x-shader/x-fragment">
        precision mediump float;
        varying highp vec4 v_Color;
        varying highp vec2 v_TextureCoord;
        uniform sampler2D u_Sampler;
        uniform bool u_ApplyDecoration;
        void main(){
            if (u_ApplyDecoration) {
                gl_FragColor = texture2D(u_Sampler, v_TextureCoord);
            } else {
                gl_FragColor = v_Color;
            }
        }
    </script>

    <script>
        var gl,
            canvas,
            count = 0.0,
            ratio,
            z = 3,
            projectionValue = document.querySelector('input[name="projection"]:checked').value,
            applyDecoration = false;

        function init(){
            canvas = document.getElementById("myCanvas");
            gl = canvas.getContext("webgl");

            if (!gl) {
                console.log("FAILED TO GET THE RENDERING CONTEXT FOR WEBGL.");
                return;
            }

            var vs = document.getElementById('shaderVs').innerHTML,
                fs = document.getElementById('shaderFs').innerHTML;

            if (!initShaders(gl, vs, fs)){
                console.log("FAILED TO INITIALIZE SHADERS.");
                return;
            }

            initVertexShader(gl);
            initProjection(gl, canvas);

            gl.clearColor(0.0, 0.0, 0.0, 1.0);
            gl.enable(gl.DEPTH_TEST);

            document.addEventListener('wheel', function (event) {
                if (projectionValue == 'perspective'){
                    z = event.deltaY > 0 ? z - 1 : z + 1;
                }
            });

            document.addEventListener('keydown', function(event) {
                var step = parseFloat(document.getElementById("step").value);
                switch(event.key) {
                    case "ArrowUp":
                        // Elevate the camera
                        // Implement as needed
                        break;
                    case "ArrowDown":
                        // Descend the camera
                        // Implement as needed
                        break;
                    default:
                        return; // Exit function if key press doesn't match any expected case
                }
                // Perform camera transformation based on key press
                // Implement as needed
            });

            drawScene();
        }

        function toggleDecoration() {
            applyDecoration = !applyDecoration;
        }

        function drawScene() {
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            
            projectionValue = document.querySelector('input[name="projection"]:checked').value,
            u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
            u_vMatrix = gl.getUniformLocation(gl.program, "u_vMatrix"),
            ratio = canvas.width/canvas.height;
            
            switch (projectionValue) {
                case "perspective":
                    var pMatrix = mat4.perspective(mat4.create(), toRadian(60), ratio, 0.1, 100),
                        vMatrix = mat4.lookAt(mat4.create(), [0, 0, z], [0, 0, 0], [0, 1, 0]);
                    break;
            
                case "orthographic":
                    var pMatrix = mat4.ortho(mat4.create(), -ratio, ratio, -1.0, 1.50, -1.0, 1.50),
                        vMatrix = mat4.create();
                    break;
                default:
            }

            gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
            gl.uniformMatrix4fv(u_vMatrix, false, vMatrix);

            var rotationChecked = document.querySelector('input[name="rotation"]').checked,
                primitiveValue = document.querySelector('input[name="primitive"]:checked').value,
                mvMatrix = mat4.fromRotation(mat4.create(), count, [0, 1, 0]),
                u_mvMatrix = gl.getUniformLocation(gl.program, "u_mvMatrix");

            gl.uniformMatrix4fv(u_mvMatrix, false, mvMatrix);

            var speed = parseInt(document.getElementById("speed").value);

            if (rotationChecked){
                count += 0.01 * speed;
            }

            if (applyDecoration) {
                var u_ApplyDecoration = gl.getUniformLocation(gl.program, "u_ApplyDecoration");
                gl.uniform1i(u_ApplyDecoration, true);
            } else {
                var u_ApplyDecoration = gl.getUniformLocation(gl.program, "u_ApplyDecoration");
                gl.uniform1i(u_ApplyDecoration, false);
            }

            var textureCoords = [
                // Front
                0.0, 0.0,
                1.0, 0.0,
                1.0, 1.0,
                0.0, 1.0,
                // Back
                0.0, 0.0,
                1.0, 0.0,
                1.0, 1.0,
                0.0, 1.0,
                // Top
                0.0, 0.0,
                1.0, 0.0,
                1.0, 1.0,
                0.0, 1.0,
                // Bottom
                0.0, 0.0,
                1.0, 0.0,
                1.0, 1.0,
                0.0, 1.0,
                // Right
                0.0, 0.0,
                1.0, 0.0,
                1.0, 1.0,
                0.0, 1.0,
                // Left
                0.0, 0.0,
                1.0, 0.0,
                1.0, 1.0,
                0.0, 1.0
            ];

            var textureCoordBuffer = gl.createBuffer();
            gl.bindBuffer(gl.ARRAY_BUFFER, textureCoordBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoords), gl.STATIC_DRAW);
            var a_TextureCoord = gl.getAttribLocation(gl.program, 'a_TextureCoord');
            gl.vertexAttribPointer(a_TextureCoord, 2, gl.FLOAT, false, 0, 0);
            gl.enableVertexAttribArray(a_TextureCoord);

            var texture = gl.createTexture();
            var u_Sampler = gl.getUniformLocation(gl.program, 'u_Sampler');
            var image = new Image();
            image.onload = function() {
                loadTexture(gl, texture, u_Sampler, image);
            };
            image.src = applyDecoration ? 'light.jpg' : 'portal.jpg';

            switch (primitiveValue) {
                case "triangles":
                    // DRAW PRIMITIVE ELEMENTS FOR FIRST CUBE
                    gl.drawElements(gl.TRIANGLES, 6 * 3, gl.UNSIGNED_SHORT, 0);
                    // DRAW PRIMITIVE ELEMENTS FOR SECOND CUBE
                    gl.drawElements(gl.TRIANGLES, 6 * 3, gl.UNSIGNED_SHORT, 6 * 3 * 2);
                    // DRAW PRIMITIVE ELEMENTS FOR PYRAMID
                    gl.drawElements(gl.TRIANGLES, 6 * 3 * 2, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2);
                    break;
                case "lines":
                    // DRAW LINES FOR FIRST CUBE
                    gl.drawElements(gl.LINES, 6 * 3 * 2, gl.UNSIGNED_SHORT, 0);
                    // DRAW LINES FOR SECOND CUBE
                    gl.drawElements(gl.LINES, 6 * 3 * 2, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2);
                    // DRAW LINES FOR PYRAMID
                    gl.drawElements(gl.LINES, 6 * 3 * 2 * 2, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2 * 2);
                    break;
                default:
            }

            requestAnimationFrame(drawScene);
        }

        function loadTexture(gl, texture, u_Sampler, image) {
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1); // Flip the image's y-axis
            gl.activeTexture(gl.TEXTURE0);
            gl.bindTexture(gl.TEXTURE_2D, texture);

            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image);

            gl.uniform1i(u_Sampler, 0);
        }

        function initVertexShader(gl) {
            var vertexesAndColors = [
                // Vertexes
                // CUBO 1 (IZQUIERDA)
                // BACK - AZUL
                -0.75, -0.50, -0.25,  // Vértice 0
                -0.25, -0.50, -0.25,  // Vértice 1
                -0.25, 0.50, -0.25,   // Vértice 2
                -0.75, 0.50, -0.25,   // Vértice 3
                // FRONT - ROJO
                -0.75, -0.50, 0.25,   // Vértice 4
                -0.25, -0.50, 0.25,   // Vértice 5
                -0.25, 0.50, 0.25,    // Vértice 6
                -0.75, 0.50, 0.25,    // Vértice 7
                // LEFT - AMARILLO
                -0.75, -0.50, -0.25,  // Vértice 8
                -0.75, 0.50, -0.25,   // Vértice 9
                -0.75, 0.50, 0.25,    // Vértice 10
                -0.75, -0.50, 0.25,   // Vértice 11
                // RIGHT - VERDE
                -0.25, -0.50, -0.25,  // Vértice 12
                -0.25, 0.50, -0.25,   // Vértice 13
                -0.25, 0.50, 0.25,    // Vértice 14
                -0.25, -0.50, 0.25,   // Vértice 15
                // TOP - BLANCO
                -0.75, 0.50, -0.25,   // Vértice 16
                -0.25, 0.50, -0.25,   // Vértice 17
                -0.25, 0.50, 0.25,    // Vértice 18
                -0.75, 0.50, 0.25,    // Vértice 19
                // BOTTOM - NEGRO
                -0.75, -0.50, -0.25,  // Vértice 20
                -0.25, -0.50, -0.25,  // Vértice 21
                -0.25, -0.50, 0.25,   // Vértice 22
                -0.75, -0.50, 0.25,   // Vértice 23

                // CUBO 2 (DERECHA)
                // BACK - AZUL
                0.25, -0.50, -0.25,  // Vértice 24
                0.75, -0.50, -0.25,  // Vértice 25
                0.75, 0.50, -0.25,   // Vértice 26
                0.25, 0.50, -0.25,   // Vértice 27
                // FRONT - ROJO
                0.25, -0.50, 0.25,   // Vértice 28
                0.75, -0.50, 0.25,   // Vértice 29
                0.75, 0.50, 0.25,    // Vértice 30
                0.25, 0.50, 0.25,    // Vértice 31
                // LEFT - AMARILLO
                0.25, -0.50, -0.25,  // Vértice 32
                0.25, 0.50, -0.25,   // Vértice 33
                0.25, 0.50, 0.25,    // Vértice 34
                0.25, -0.50, 0.25,   // Vértice 35
                // RIGHT - VERDE
                0.75, -0.50, -0.25,  // Vértice 36
                0.75, 0.50, -0.25,   // Vértice 37
                0.75, 0.50, 0.25,    // Vértice 38
                0.75, -0.50, 0.25,   // Vértice 39
                // TOP - BLANCO
                0.25, 0.50, -0.25,   // Vértice 40
                0.75, 0.50, -0.25,   // Vértice 41
                0.75, 0.50, 0.25,    // Vértice 42
                0.25, 0.50, 0.25,    // Vértice 43
                // BOTTOM - NEGRO
                0.25, -0.50, -0.25,  // Vértice 44
                0.75, -0.50, -0.25,  // Vértice 45
                0.75, -0.50, 0.25,   // Vértice 46
                0.25, -0.50, 0.25,   // Vértice 47

                // PYRAMID
                // BOTTOM
                -0.25, -0.50, -0.25, // Vértice 48
                0.25, -0.50, -0.25,  // Vértice 49
                0.25, -0.50, 0.25,   // Vértice 50
                -0.25, -0.50, 0.25,  // Vértice 51
                // FACE 1
                0.0, 0.50, 0.0,      // Vértice 52
                0.25, -0.50, 0.25,   // Vértice 53
                0.25, -0.50, -0.25,  // Vértice 54
                // FACE 2
                0.0, 0.50, 0.0,      // Vértice 55
                -0.25, -0.50, -0.25, // Vértice 56
                -0.25, -0.50, 0.25,  // Vértice 57
                // FACE 3
                0.0, 0.50, 0.0,      // Vértice 58
                0.25, -0.50, -0.25,  // Vértice 59
                -0.25, -0.50, -0.25, // Vértice 60
                // FACE 4
                0.0, 0.50, 0.0,      // Vértice 61
                -0.25, -0.50, 0.25,  // Vértice 62
                0.25, -0.50, 0.25    // Vértice 63
            ];

            var vertexesAndColorsBuffer = gl.createBuffer();
            gl.bindBuffer(gl.ARRAY_BUFFER, vertexesAndColorsBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexesAndColors), gl.STATIC_DRAW);

            var FSIZE = vertexesAndColors.BYTES_PER_ELEMENT;

            var a_Position = gl.getAttribLocation(gl.program, 'a_Position');
            gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, FSIZE * 3, 0);
            gl.enableVertexAttribArray(a_Position);

            var a_Color = gl.getAttribLocation(gl.program, 'a_Color');
            gl.vertexAttribPointer(a_Color, 3, gl.FLOAT, false, FSIZE * 3, FSIZE * 3 * 24);
            gl.enableVertexAttribArray(a_Color);

            var indices = new Uint16Array([
                // First Cube
                0, 1, 2, 0, 2, 3,
                4, 5, 6, 4, 6, 7,
                8, 9, 10, 8, 10, 11,
                12, 13, 14, 12, 14, 15,
                16, 17, 18, 16, 18, 19,
                20, 21, 22, 20, 22, 23,
                // Second Cube
                24, 25, 26, 24, 26, 27,
                28, 29, 30, 28, 30, 31,
                32, 33, 34, 32, 34, 35,
                36, 37, 38, 36, 38, 39,
                40, 41, 42, 40, 42, 43,
                44, 45, 46, 44, 46, 47,
                // Pyramid
                48, 49, 50, 48, 50, 51,
                52, 53, 54,
                55, 56, 57,
                58, 59, 60,
                61, 62, 63
            ]);

            var indexBuffer = gl.createBuffer();
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
        }

        function initProjection(gl, canvas) {
            var u_pMatrix = gl.getUniformLocation(gl.program, 'u_pMatrix'),
                u_vMatrix = gl.getUniformLocation(gl.program, 'u_vMatrix'),
                ratio = canvas.width/canvas.height;

            switch (projectionValue) {
                case "perspective":
                    var pMatrix = mat4.perspective(mat4.create(), toRadian(60), ratio, 0.1, 100),
                        vMatrix = mat4.lookAt(mat4.create(), [0, 0, z], [0, 0, 0], [0, 1, 0]);
                    break;
            
                case "orthographic":
                    var pMatrix = mat4.ortho(mat4.create(), -ratio, ratio, -1.0, 1.50, -1.0, 1.50),
                        vMatrix = mat4.create();
                    break;
                default:
            }

            gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
            gl.uniformMatrix4fv(u_vMatrix, false, vMatrix);
        }

        function toRadian(angle) {
            return angle * Math.PI / 180;
        }

        function initShaders(gl, vs_source, fs_source) {
            var vertexShader = gl.createShader(gl.VERTEX_SHADER),
                fragmentShader = gl.createShader(gl.FRAGMENT_SHADER),
                program = gl.createProgram();

            gl.shaderSource(vertexShader, vs_source);
            gl.shaderSource(fragmentShader, fs_source);

            gl.compileShader(vertexShader);
            if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
                console.error('ERROR compiling vertex shader!', gl.getShaderInfoLog(vertexShader));
                return false;
            }

            gl.compileShader(fragmentShader);
            if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
                console.error('ERROR compiling fragment shader!', gl.getShaderInfoLog(fragmentShader));
                return false;
            }

            gl.attachShader(program, vertexShader);
            gl.attachShader(program, fragmentShader);

            gl.linkProgram(program);
            if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
                console.error('ERROR linking program!', gl.getProgramInfoLog(program));
                return false;
            }

            gl.useProgram(program);
            gl.program = program;

            return true;
        }
    </script>
</html>
