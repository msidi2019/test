<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/2.8.1/gl-matrix-min.js"></script>
    <title>Ejercicio 5</title>
</head>

<body onload="init()">
    <canvas id="myCanvas" width="640" height="480"></canvas><br>
    <b>Rotation</b>
    <input type="checkbox" name="rotation" checked>
    <input type="range" id="speed" min="1" max="3" value="1" step="1"> Speed<br>
    <b>WebGL primitive</b>
    <input type="radio" name="primitive" value="triangles" checked> Triangles
    <input type="radio" name="primitive" value="lines"> Lines<br>
    <b>Projection type</b>
    <input type="radio" name="projection" value="perspective" checked> Perspective
    <input type="radio" name="projection" value="orthographic"> Orthographic<br>

    <script id="shaderVs" type="x-shader/x-vertex">
        attribute vec4 a_Position;
        attribute vec3 a_Color;
        uniform mat4 u_pMatrix;
        uniform mat4 u_vMatrix;
        uniform mat4 u_mvMatrix;
        varying highp vec4 v_Color;
        void main(){
            gl_Position = u_pMatrix * u_vMatrix * u_mvMatrix * a_Position;
            v_Color = vec4(a_Color, 1.0);
        }
    </script>

    <script id="shaderFs" type="x-shader/x-fragment">
        varying highp vec4 v_Color;
        void main(){
            gl_FragColor = v_Color;
        }
    </script>

    <script>
        var gl,
            canvas,
            count = 0.0,
            ratio,
            z = 3,
            projectionValue = document.querySelector('input[name="projection"]:checked').value;

        function init(){
            
            // Get canvas object from the DOM and Init WebGL Context
            canvas = document.getElementById("myCanvas");
            gl = canvas.getContext("webgl");

            if (!gl) {
            console.log("FAILED TO GET THE RENDERING CONTEXT FOR WEBGL.");
            return;
            }

            // Init Shaders 
            var vs = document.getElementById('shaderVs').innerHTML,
                fs = document.getElementById('shaderFs').innerHTML;

            if (!initShaders(gl, vs, fs)){
            console.log("FAILED TO INITIALIZE SHADERS.");
            return;
            }

            // Init vertex shader
            initVertexShader(gl);

            // Init projection matrix
            initProjection(gl, canvas);

            // Set clear canvas color
            gl.clearColor(0.0, 0.0, 0.0, 1.0);

            // Hidden surface removal
            gl.enable(gl.DEPTH_TEST);

            // Event listener for mouse wheel
            document.addEventListener('wheel', function (event) {
                if (projectionValue == 'perspective'){
                    z = event.deltaY > 0 ? z - 1 : z + 1;
                }
            });
            drawScene();
        }

        function drawScene() {
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            
            projectionValue = document.querySelector('input[name="projection"]:checked').value,
            u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
            u_vMatrix = gl.getUniformLocation(gl.program, "u_vMatrix"),
            ratio = canvas.width/canvas.height;
            
            switch (projectionValue) {
                case "perspective":
                    var pMatrix = mat4.perspective(mat4.create(), toRadian(60), ratio, 0.1, 100),
                        vMatrix = mat4.lookAt(mat4.create(), [0, 0, z], [0, 0, 0], [0, 1, 0]);
                    break;
            
                case "orthographic":
                    var pMatrix = mat4.ortho(mat4.create(), -ratio, ratio, -1.0, 1.50, -1.0, 1.50),
                        vMatrix = mat4.create();
                    break;
                default:
            }

            gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
            gl.uniformMatrix4fv(u_vMatrix, false, vMatrix);

            var rotationChecked = document.querySelector('input[name="rotation"]').checked,
                primitiveValue = document.querySelector('input[name="primitive"]:checked').value,
                mvMatrix = mat4.fromRotation(mat4.create(), count, [0, 1, 0]),
                u_mvMatrix = gl.getUniformLocation(gl.program, "u_mvMatrix");

            gl.uniformMatrix4fv(u_mvMatrix, false, mvMatrix);

            var speed = parseInt(document.getElementById("speed").value);

            if (rotationChecked){
                count += 0.01 * speed;
            }

            switch (primitiveValue) {
    case "triangles":
        // DRAW PRIMITIVE ELEMENTS FOR FIRST CUBE
        gl.drawElements(gl.TRIANGLES, 6 * 3, gl.UNSIGNED_SHORT, 0);
        // DRAW PRIMITIVE ELEMENTS FOR SECOND CUBE
        gl.drawElements(gl.TRIANGLES, 6 * 3, gl.UNSIGNED_SHORT, 6 * 3 * 2);
        // DRAW PRIMITIVE ELEMENTS FOR PYRAMID
        gl.drawElements(gl.TRIANGLES, 6 * 3 * 2, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2); // Se multiplicó por 2 para dibujar los 6 triángulos de la pirámide
        break;
    case "lines":
        // DRAW LINES FOR FIRST CUBE
        gl.drawElements(gl.LINES, 6 * 3 * 2, gl.UNSIGNED_SHORT, 0); // Multiplicado por 2 porque cada triángulo tiene 3 líneas
        // DRAW LINES FOR SECOND CUBE
        gl.drawElements(gl.LINES, 6 * 3 * 2, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2); // Multiplicado por 2 para dibujar las líneas de los dos cubos
        // DRAW LINES FOR PYRAMID
        gl.drawElements(gl.LINES, 6 * 3 * 2 * 2, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2 * 2); // Multiplicado por 2 para dibujar las líneas de la pirámide
        break;
    default:
}


            // CALL DRAWSCENE AGAIN IN THE NEXT BROWSER REPAINT
            requestAnimationFrame(drawScene);
        }
           

        function initVertexShader(gl) {
  // Vertexes and colors (X, Y, Z, R, G, B)
var vertexesAndColors = [
    // CUBO 1 (IZQUIERDA)
    // BACK - AZUL
    -0.75, -0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 0
    -0.25, -0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 1
    -0.25, 0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 2
    -0.75, 0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 3

    // FRONT - ROJO
    -0.75, -0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 4
    -0.25, -0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 5
    -0.25, 0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 6
    -0.75, 0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 7

    // LEFT - AMARILLO
    -0.75, -0.50, -0.25, 1.0, 1.0, 0.0, // Vértice 8
    -0.75, 0.50, -0.25, 1.0, 1.0, 0.0, // Vértice 9
    -0.75, 0.50, 0.25, 1.0, 1.0, 0.0, // Vértice 10
    -0.75, -0.50, 0.25, 1.0, 1.0, 0.0, // Vértice 11

    // RIGHT - VERDE
    -0.25, -0.50, -0.25, 0.0, 1.0, 0.0, // Vértice 12
    -0.25, 0.50, -0.25, 0.0, 1.0, 0.0, // Vértice 13
    -0.25, 0.50, 0.25, 0.0, 1.0, 0.0, // Vértice 14
    -0.25, -0.50, 0.25, 0.0, 1.0, 0.0, // Vértice 15

    // BOTTOM - TURQUESA
    -0.75, -0.50, -0.25, 0.0, 1.0, 1.0, // Vértice 16
    -0.75, -0.50, 0.25, 0.0, 1.0, 1.0, // Vértice 17
    -0.25, -0.50, 0.25, 0.0, 1.0, 1.0, // Vértice 18
    -0.25, -0.50, -0.25, 0.0, 1.0, 1.0, // Vértice 19

    // CUBO 2 (DERECHA)
    // BACK - AZUL
    0.25, -0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 20
    0.75, -0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 21
    0.75, 0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 22
    0.25, 0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 23

    // FRONT - ROJO
    0.25, -0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 24
    0.75, -0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 25
    0.75, 0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 26
    0.25, 0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 27

    // LEFT - AMARILLO
    0.25, -0.50, -0.25, 1.0, 1.0, 0.0, // Vértice 28
    0.25, 0.50, -0.25, 1.0, 1.0, 0.0, // Vértice 29
    0.25, 0.50, 0.25, 1.0, 1.0, 0.0, // Vértice 30
    0.25, -0.50, 0.25, 1.0, 1.0, 0.0, // Vértice 31

    // RIGHT - VERDE
    0.75, -0.50, -0.25, 0.0, 1.0, 0.0, // Vértice 32
    0.75, 0.50, -0.25, 0.0, 1.0, 0.0, // Vértice 33
    0.75, 0.50, 0.25, 0.0, 1.0, 0.0, // Vértice 34
    0.75, -0.50, 0.25, 0.0, 1.0, 0.0, // Vértice 35

    // BOTTOM - TURQUESA
    0.25, -0.50, -0.25, 0.0, 1.0, 1.0, // Vértice 36
    0.25, -0.50, 0.25, 0.0, 1.0, 1.0, // Vértice 37
    0.75, -0.50, 0.25, 0.0, 1.0, 1.0, // Vértice 38
    0.75, -0.50, -0.25, 0.0, 1.0, 1.0, // Vértice 39

    // PIRÁMIDE
     // 
     0.00, 1.00, 0.00, 1.0, 0.0, 0.0, // Vértice 40
// Base de la pirámide
// (v1) (Amarillo)
-0.75, 0.50, -0.75, 1.0, 1.0, 0.0, // Vértice 41 (Amarillo)
// (v2) (Azul)
-0.75, 0.50, 0.75, 0.0, 0.0, 1.0, // Vértice 42 (Azul)
// (v3) (Verde)
0.75, 0.50, 0.75, 0.0, 1.0, 0.0, // Vértice 43 (Verde)
// (v4) (Turquesa)
0.75, 0.50, -0.75, 0.0, 1.0, 1.0 // Vértice 44 (Turquesa)

        ];


// Indexes (for drawing squares using triangles)
var indexes = [
    // CUBO 1
    0, 1, 2,    // Triángulo #1
    0, 2, 3,    // Triángulo #2
    4, 5, 6,    // Triángulo #3
    4, 6, 7,    // Triángulo #4
    8, 9, 10,   // Triángulo #5
    8, 10, 11,  // Triángulo #6
    12, 13, 14, // Triángulo #7
    12, 14, 15, // Triángulo #8
    16, 17, 18, // Triángulo #9
    16, 18, 19, // Triángulo #10
    // CUBO 2
    20, 21, 22,    // Triángulo #11
    20, 22, 23,    // Triángulo #12
    24, 25, 26,    // Triángulo #13
    24, 26, 27,    // Triángulo #14
    28, 29, 30,    // Triángulo #15
    28, 30, 31,    // Triángulo #16
    32, 33, 34,    // Triángulo #17
    32, 34, 35,    // Triángulo #18
    36, 37, 38,    // Triángulo #19
    36, 38, 39,    // Triángulo #20
    // Pirámide
    40, 41, 42, // Triángulo #21 (base)
    40, 42, 43, // Triángulo #22 (base)
    40, 43, 44, // Triángulo #23 (base)
    40, 44, 41, // Triángulo #24 (base)
    41, 42, 43, // Triángulo #25 (caras laterales)
    41, 43, 44, // Triángulo #26 (caras laterales)
    42, 43, 44, // Triángulo #27 (caras laterales)
    42, 44, 45, // Triángulo #28 (caras laterales)
    43, 44, 45, // Triángulo #29 (caras laterales)
    41, 45, 42, // Triángulo #30 (caras laterales)
    40, 41, 45, // Triángulo #31 (caras inferiores)
    40, 45, 44, // Triángulo #32 (caras inferiores)
    40, 44, 43, // Triángulo #33 (caras inferiores)
    40, 43, 42  // Triángulo #34 (caras inferiores)
];



    // Write a_Position and a_Color using gl.ARRAY_BUFFER
    gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexesAndColors), gl.STATIC_DRAW);

    var vertexPositionAttribute = gl.getAttribLocation(gl.program, "a_Position");
    gl.enableVertexAttribArray(vertexPositionAttribute);
    gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 4 * (3 + 3), 0);

    var vertexColorAttribute = gl.getAttribLocation(gl.program, "a_Color");
    gl.enableVertexAttribArray(vertexColorAttribute);
    gl.vertexAttribPointer(vertexColorAttribute, 3, gl.FLOAT, false, 4 * (3 + 3), 4 * 3);

    // Write indexes in gl.ELEMENT_ARRAY_BUFFER
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexes), gl.STATIC_DRAW);
}

    function initProjection(gl, canvas) {
        var pMatrix = mat4.create(),
            u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
            ratio = canvas.width/canvas.height;

        mat4.perspective(pMatrix, toRadian(60), ratio, 0.1, 100);
        gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
    }

    function toRadian(angle) {
        return angle * Math.PI / 180;
    }

    function initShaders(gl, vsSource, fsSource) {
        // Create vertex shader object and compile shader
        var vertexShader = gl.createShader(gl.VERTEX_SHADER);
        gl.shaderSource(vertexShader, vsSource);
        gl.compileShader(vertexShader);

        // Create fragment shader object and compile shader
        var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
        gl.shaderSource(fragmentShader, fsSource);
        gl.compileShader(fragmentShader);

        // Create shader program and attach shaders
        var program = gl.createProgram();
        gl.attachShader(program, vertexShader);
        gl.attachShader(program, fragmentShader);
        gl.linkProgram(program);

        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
            console.log("ERROR INITIALIZING SHADER PROGRAM: " + gl.getProgramInfoLog(program));
            return false;
        }

        gl.useProgram(program);
        gl.program = program;

        return true;
    }
</script>

</html>
