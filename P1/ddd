<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/2.8.1/gl-matrix-min.js"></script>
    <title>Ejercicio 5</title>
</head>

<body onload="init()">
    <canvas id="myCanvas" width="640" height="480"></canvas>
    <br>
    <b>Step:</b>
    <input type="text" value="0.1" id="step">
    <br>
    <b>Rotation</b>
    <input type="checkbox" name="rotation" checked>
    <input type="range" id="speed" min="1" max="3" value="1" step="1"><b>Speed</b><br>
    <b>WebGL primitive</b>
    <input type="radio" name="primitive" value="triangles" checked>Triangles
    <input type="radio" name="primitive" value="lines">Lines<br>
    <b>Projection type</b>
    <input type="radio" name="projection" value="perspective" checked> Perspective
    <input type="radio" name="projection" value="orthographic">Orthographic<br>
    <b>Decoration</b>
    <input type="radio" name="christmas" value="no" checked>Day
    <input type="radio" name="christmas" value="yes">Night<br>
</body>

<script id="shaderVs" type="x-shader/x-vertex">
    attribute vec4 a_Position;
    attribute vec3 a_Color;
    attribute vec2 a_TexCoord;
    uniform mat4 u_pMatrix;
    uniform mat4 u_vMatrix;
    uniform mat4 u_mvMatrix;
    varying highp vec4 v_Color;
    varying highp vec2 v_TexCoord;
    void main(){
        gl_Position = u_pMatrix * u_vMatrix * u_mvMatrix * a_Position;
        v_Color = vec4(a_Color, 1.0);
        v_TexCoord = a_TexCoord;
    }
</script>

<script id="shaderFs" type="x-shader/x-fragment">
    varying highp vec4 v_Color;
    varying highp vec2 v_TexCoord;
    uniform sampler2D u_Sampler;
    void main(){
        gl_FragColor = texture2D(u_Sampler, v_TexCoord) * v_Color;
    }
</script>

<script>
    var gl,
        canvas,
        count = 0.0,
        ratio,
        z = 3,
        projectionValue = document.querySelector('input[name="projection"]:checked').value,
        textureDay,
        textureNight,
        isNight = false;

    function init() {
        // Get canvas object from the DOM and Init WebGL Context
        canvas = document.getElementById("myCanvas");
        gl = canvas.getContext("webgl");

        if (!gl) {
            console.log("FAILED TO GET THE RENDERING CONTEXT FOR WEBGL.");
            return;
        }

        // Init Shaders 
        var vs = document.getElementById('shaderVs').innerHTML,
            fs = document.getElementById('shaderFs').innerHTML;

        if (!initShaders(gl, vs, fs)) {
            console.log("FAILED TO INITIALIZE SHADERS.");
            return;
        }

        // Init vertex shader
        initVertexShader(gl);

        // Init textures
        textureDay = initTextures(gl, 'portal.jpg');
        textureNight = initTextures(gl, 'light.jpg');

        // Init projection matrix
        initProjection(gl, canvas);

        // Set clear canvas color
        gl.clearColor(0.0, 0.0, 0.0, 1.0);

        // Hidden surface removal
        gl.enable(gl.DEPTH_TEST);

        // Event listener for mouse wheel
        document.addEventListener('wheel', function (event) {
            if (projectionValue == 'perspective') {
                z = event.deltaY > 0 ? z - 1 : z + 1;
            }
        });

        // Event listener for decoration change
        document.querySelectorAll('input[name="christmas"]').forEach(function (radio) {
            radio.addEventListener('change', function () {
                isNight = document.querySelector('input[name="christmas"]:checked').value === 'yes';
            });
        });

        // Event listeners for camera control
        document.addEventListener('keydown', function (event) {
            var step = parseFloat(document.getElementById("step").value);
            if (event.key === 'ArrowUp') {
                z -= step;
            } else if (event.key === 'ArrowDown') {
                z += step;
            }
        });

        drawScene();
    }

    function drawScene() {
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

        projectionValue = document.querySelector('input[name="projection"]:checked').value,
            u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
            u_vMatrix = gl.getUniformLocation(gl.program, "u_vMatrix"),
            ratio = canvas.width / canvas.height;

        switch (projectionValue) {
            case "perspective":
                var pMatrix = mat4.perspective(mat4.create(), toRadian(60), ratio, 0.1, 100),
                    vMatrix = mat4.lookAt(mat4.create(), [0, 0, z], [0, 0, 0], [0, 1, 0]);
                break;

            case "orthographic":
                var pMatrix = mat4.ortho(mat4.create(), -ratio, ratio, -1.0, 1.50, -1.0, 1.50),
                    vMatrix = mat4.create();
                break;
            default:
        }

        gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
        gl.uniformMatrix4fv(u_vMatrix, false, vMatrix);

        var rotationChecked = document.querySelector('input[name="rotation"]').checked,
            primitiveValue = document.querySelector('input[name="primitive"]:checked').value,
            mvMatrix = mat4.fromRotation(mat4.create(), count, [0, 1, 0]),
            u_mvMatrix = gl.getUniformLocation(gl.program, "u_mvMatrix");

        gl.uniformMatrix4fv(u_mvMatrix, false, mvMatrix);

        var speed = parseInt(document.getElementById("speed").value);

        if (rotationChecked) {
            count += 0.01 * speed;
        }

        var texture = isNight ? textureNight : textureDay;
        gl.bindTexture(gl.TEXTURE_2D, texture);

        switch (primitiveValue) {
            case "triangles":
                // DRAW PRIMITIVE ELEMENTS FOR FIRST CUBE
                gl.drawElements(gl.TRIANGLES, 6 * 3, gl.UNSIGNED_SHORT, 0);
                // DRAW PRIMITIVE ELEMENTS FOR SECOND CUBE
                gl.drawElements(gl.TRIANGLES, 6 * 3, gl.UNSIGNED_SHORT, 6 * 3 * 2);
                // DRAW PRIMITIVE ELEMENTS FOR PYRAMID
                gl.drawElements(gl.TRIANGLES, 6 * 3 * 2, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2); // Se multiplicó por 2 para dibujar los 6 triángulos de la pirámide
                break;
            case "lines":
                // DRAW LINES FOR FIRST CUBE
                gl.drawElements(gl.LINES, 6 * 3 * 2, gl.UNSIGNED_SHORT, 0); // Multiplicado por 2 porque cada triángulo tiene 3 líneas
                // DRAW LINES FOR SECOND CUBE
                gl.drawElements(gl.LINES, 6 * 3 * 2, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2); // Multiplicado por 2 para dibujar las líneas de los dos cubos
                // DRAW LINES FOR PYRAMID
                gl.drawElements(gl.LINES, 6 * 3 * 2 * 2, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2 * 2); // Multiplicado por 2 para dibujar las líneas de la pirámide
                break;
            default:
        }

        // CALL DRAWSCENE AGAIN IN THE NEXT BROWSER REPAINT
        requestAnimationFrame(drawScene);
    }

    function initVertexShader(gl) {
        // Vertexes, colors and texture coordinates (X, Y, Z, R, G, B, U, V)
        var vertexesColorsTexCoords = [
            // CUBO 1 (IZQUIERDA)
            // BACK - AZUL
            0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
            1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,
            1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0,
            // LEFT - VERDE
            0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0,
            0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0,
            0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0,
            // RIGHT - AMARILLO
            1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0,
            1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0,
            1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0,
            1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0,
            // BOTTOM - ROJO
            0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0,
            1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0,
            0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
            1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0,
            // FRONT - BLANCO
            0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0,
            0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0,
            // TOP - GRIS
            0.0, 1.0, 0.0, 0.5, 0.5, 0.5, 0.0, 1.0,
            1.0, 1.0, 0.0, 0.5, 0.5, 0.5, 0.0, 0.0,
            1.0, 1.0, 1.0, 0.5, 0.5, 0.5, 1.0, 0.0,
            0.0, 1.0, 1.0, 0.5, 0.5, 0.5, 1.0, 1.0,

            // CUBO 2 (DERECHA)
            // BACK - AZUL
            1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0,
            1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
            2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,
            2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0,
            // LEFT - VERDE
            1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0,
            1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0,
            1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0,
            1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0,
            // RIGHT - AMARILLO
            2.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0,
            2.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0,
            2.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0,
            2.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0,
            // BOTTOM - ROJO
            1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0,
            2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0,
            1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
            2.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0,
            // FRONT - BLANCO
            1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0,
            2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0,
            1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
            2.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0,
            // TOP - GRIS
            1.0, 1.0, 0.0, 0.5, 0.5, 0.5, 0.0, 1.0,
            2.0, 1.0, 0.0, 0.5, 0.5, 0.5, 0.0, 0.0,
            2.0, 1.0, 1.0, 0.5, 0.5, 0.5, 1.0, 0.0,
            1.0, 1.0, 1.0, 0.5, 0.5, 0.5, 1.0, 1.0,

            // PIRAMIDE
            // BASE - BLANCO
            3.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0,
            2.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0,
            1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
            3.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0,
            2.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0,
            2.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0,
            // FRONT - ROJO
            3.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.5, 0.0,
            2.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0,
            2.5, 1.0, 0.5, 1.0, 0.0, 0.0, 1.0, 1.0,
            // LEFT - VERDE
            2.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
            1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0,
            2.5, 1.0, 0.5, 0.0, 1.0, 0.0, 0.5, 0.5,
            // RIGHT - AZUL
            1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0,
            3.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0,
            2.5, 1.0, 0.5, 0.0, 0.0, 1.0, 1.0, 1.0
        ];

        // Define the vertex indexes
        var indexes = [
            // Cube 1 (izquierda)
            0, 1, 2, 1, 2, 3,      // Back
            4, 5, 6, 5, 6, 7,      // Left
            8, 9, 10, 9, 10, 11,   // Right
            12, 13, 14, 13, 14, 15, // Bottom
            16, 17, 18, 17, 18, 19, // Front
            20, 21, 22, 21, 22, 23, // Top

            // Cube 2 (derecha)
            24, 25, 26, 25, 26, 27,    // Back
            28, 29, 30, 29, 30, 31,    // Left
            32, 33, 34, 33, 34, 35,    // Right
            36, 37, 38, 37, 38, 39,    // Bottom
            40, 41, 42, 41, 42, 43,    // Front
            44, 45, 46, 45, 46, 47,    // Top

            // Piramide
            48, 49, 50, 49, 50, 51, 51, 52, 53, // Base
            54, 55, 56, // Front
            57, 58, 59, // Left
            60, 61, 62 // Right
        ];

        var vertexBuffer = gl.createBuffer(),
            indexBuffer = gl.createBuffer();

        if (!vertexBuffer || !indexBuffer) {
            console.log("FAILED TO CREATE THE BUFFER OBJECT.");
            return -1;
        }

        // Bind the vertex buffer object
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);

        // Pass vertex data to buffer
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexesColorsTexCoords), gl.STATIC_DRAW);

        // Bind the index buffer object
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);

        // Pass index data to buffer
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexes), gl.STATIC_DRAW);

        var FSIZE = vertexesColorsTexCoords.BYTES_PER_ELEMENT,
            a_Position = gl.getAttribLocation(gl.program, "a_Position");

        if (a_Position < 0) {
            console.log("FAILED TO GET THE STORAGE LOCATION OF a_Position.");
            return -1;
        }

        gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, FSIZE * 8, 0);
        gl.enableVertexAttribArray(a_Position);

        var a_Color = gl.getAttribLocation(gl.program, "a_Color");

        if (a_Color < 0) {
            console.log("FAILED TO GET THE STORAGE LOCATION OF a_Color.");
            return -1;
        }

        gl.vertexAttribPointer(a_Color, 3, gl.FLOAT, false, FSIZE * 8, FSIZE * 3);
        gl.enableVertexAttribArray(a_Color);

        var a_TexCoord = gl.getAttribLocation(gl.program, 'a_TexCoord');

        if (a_TexCoord < 0) {
            console.log('Failed to get the storage location of a_TexCoord');
            return -1;
        }

        gl.vertexAttribPointer(a_TexCoord, 2, gl.FLOAT, false, FSIZE * 8, FSIZE * 6);
        gl.enableVertexAttribArray(a_TexCoord);

        var u_Sampler = gl.getUniformLocation(gl.program, 'u_Sampler');
        if (!u_Sampler) {
            console.log('Failed to get the storage location of u_Sampler');
            return false;
        }
        gl.uniform1i(u_Sampler, 0);

        return 0;
    }

    function initProjection(gl, canvas) {
        var u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
            ratio = canvas.width / canvas.height,
            pMatrix = mat4.perspective(mat4.create(), toRadian(60), ratio, 0.1, 100);

        gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
    }

    function toRadian(degree) {
        return degree * Math.PI / 180;
    }

    function initTextures(gl, src) {
        var texture = gl.createTexture(),
            image = new Image();

        image.onload = function () {
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);

            gl.bindTexture(gl.TEXTURE_2D, null);
        };

        image.src = src;
        return texture;
    }
</script>
</html>
