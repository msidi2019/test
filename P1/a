<!DOCTYPE html>
<html>

<head>
    <title> Casa con Textura</title>
</head>
<body onload="init()">
    <canvas id="myCanvas" width="640" height="480"></canvas><br>
    Step: <input type="text" value="0.01" id="step"> <br>
    <b>Rotation</b>
    <input type="checkbox" id="rotation"name="rotation" checked>
    <input type="range" id="speed" min="1" max="3" value="1" step="1"> Speed<br>
    <b>WebGL primitive</b>
    <input type="radio" id="primTriangulos" name="primitive" value="triangles" checked> Triangles
    <input type="radio" id="primLineas" name="primitive" value="lines"> Lines<br>
    <b>Projection type</b>
    <input type="radio" name="projection" id="projPerspectiva" value="perspective" checked> Perspective
    <input type="radio" name="projection" id="projOrtografica" value="orthographic"> Orthographic<br>
    <b>Decoration</b>
    <input type="radio" name="christmas" value="no" checked> No
    <input type="radio" name="christmas" value="yes"> Yes<br>
</body>

<script src="https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/3.4.2/gl-matrix-min.js"></script>

<script id="shaderVs" type="x-shader/x-vertex">
    attribute vec4 a_Position;
    attribute vec2 a_TexCoord;
    varying vec2 v_TexCoord;

    uniform mat4 u_pMatrix;
    uniform mat4 u_vMatrix;
    uniform mat4 u_mvMatrix;
    void main() {
        gl_Position = u_pMatrix * u_vMatrix * u_mvMatrix * a_Position;
        v_TexCoord = a_TexCoord;
    }
</script>

<script id="shaderFs" type="x-shader/x-fragment">
    precision mediump float;
    uniform sampler2D u_Sampler0;
    uniform sampler2D u_Sampler1;
    uniform int navidad;
    varying vec2 v_TexCoord;
    void main(void) {
        vec4 color0 = texture2D(u_Sampler0, v_TexCoord);
        vec4 color1 = texture2D(u_Sampler1, v_TexCoord);
        if (navidad == 0) {
            gl_FragColor = color0;
        } else {
            gl_FragColor = color0 * color1 ;
        } 
    }
</script>

<script>
    var z = 3; //para la rueda del raton
    var projOrtografica = document.getElementById("projOrtografica");
    var projPerspectiva = document.getElementById("projPerspectiva");
    var camaraY = 0.0; //para mover la camara en el eje Y 
    function init() {
        // Variables
        var rad_ang = 0.0;
        
        // Get canvas object from the DOM
        var canvas = document.getElementById("myCanvas");

        // Init WebGL context
        var gl = canvas.getContext("webgl");
        if (!gl) {
            console.log("Failed to get the rendering context for WebGL");
            return;
        }

        // Init shaders
        var vs = document.getElementById('shaderVs').innerHTML;
        var fs = document.getElementById('shaderFs').innerHTML;
        if (!initShaders(gl, vs, fs)) {
            console.log('Failed to intialize shaders.');
            return;
        }

        // Init vertex shader
        initVertexBuffers(gl);

        // Event listener for mouse wheel
        document.addEventListener('wheel', function (event) {
            if (projPerspectiva.checked){
                z = event.wheelDelta > 0 ? z - 1 : z + 1;  
            }
        });   
    
        // Set clear canvas color
        gl.clearColor(0.0, 0.0, 0.0, 1.0);

        // Draw Scene
        drawScene(gl, rad_ang, canvas);

        document.onkeydown = function (ev) {
            if (projPerspectiva.checked){
                var step = new Number(document.getElementById("step").value);
                switch (ev.key) {
                    case "ArrowUp": // Up
                        camaraY += step;
                        break;
                    case "ArrowDown": // Down
                        camaraY -= step;
                        break;
                }
            }
           
            // Draw Scene
            drawScene(gl, ev.key); //se pasa la tecla que se pulsa al drawscene
        };


        // Hidden surface removal
        gl.enable(gl.DEPTH_TEST);

        // Init textures
        initTexturesAndDraw(gl, rad_ang);
    }
    function isPowerOf2(value) {
        return (value & (value - 1)) == 0;
    }

    /**
     * This function is used to load a texture
     * @param {WebGLRenderingContext} gl 
     * @param {String} samplerUniform 
     * @param {Image} image 
     * @param {Number} unitNumber 
     * @param {Boolean} flip 
     */
     function loadTexture(gl, samplerUniform, image, unitNumber, flip) {
        // Flip the image's y axis
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flip);

        // Activate and configure texture
        gl.activeTexture(gl.TEXTURE0 + unitNumber);
        gl.bindTexture(gl.TEXTURE_2D, gl.createTexture());
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);

        // Check if the image is a power of 2 in both dimensions.
        if (isPowerOf2(image.width) && isPowerOf2(image.height)) {
            // Yes, it's a power of 2. Generate mips.
            gl.generateMipmap(gl.TEXTURE_2D);
        } else {
            // No, it's not a power of 2. Turn off mips and set wrapping to clamp to edge
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        }

        // Set texture to the sampler
        var fragmentSamplerUniform = gl.getUniformLocation(gl.program, samplerUniform);
        gl.uniform1i(fragmentSamplerUniform, unitNumber);
    }
    function initTexturesAndDraw(gl) {
        var image0 = new Image();
        image0.src = 'portal.jpg';
        var image1 = new Image();
        image1.src = 'light.jpg';
        image0.onload = function () {
            loadTexture(gl, "u_Sampler0", image0, 0, true);
            image1.onload = function () {
                loadTexture(gl, "u_Sampler1",  (image1), 1, true);
                drawScene(gl);
            };
        };
    }
    function drawScene(gl, rad_ang, canvas) {
        // Init projection matrix
        initProjection(gl, canvas);

        // Change interacciones
        var rotation = document.getElementById("rotation");
        var speed = document.getElementById("speed").value;
        var primTriangulos = document.getElementById("primTriangulos");
        var primLineas = document.getElementById("primLineas");
        var Decoration = document.querySelector('input[name="christmas"]:checked').value;
        var navidad = gl.getUniformLocation(gl.program, "navidad") // para el fragment shader

        // Clear
        gl.clear(gl.COLOR_BUFFER_BIT);

        // Rotate
        var mvMatrix = glMatrix.mat4.fromYRotation(glMatrix.mat4.create(), rad_ang, [0.5, 0.5, 0.5]);
        var uMvMatrix = gl.getUniformLocation(gl.program, "u_mvMatrix");
        gl.uniformMatrix4fv(uMvMatrix, false, mvMatrix);
 
       rotation.addEventListener('change', rotacionActivado()) 
       function rotacionActivado(){
            if (rotation.checked) {
                 // Increase angle
                rad_ang += (speed * 0.01); 
            }
        }
        // Draw 
        // techo 4 caras de 3 vertices + lo de abajo del techo 2 caras mas de 3 vertices = 6
        // 4 caras * 2 triangulos (col izq) = 8 mas 
        // 8 mas de la columna dch 
        // 2 caras * 2 triangulos (el suelo de las columnas) = 4 mas
        // 6 + 8 + 8 + 4 = 26
        // gl.drawElements(gl.TRIANGLES, 26 * 3 , gl.UNSIGNED_SHORT, 0);
        
        primTriangulos.addEventListener('change',primitiva())
        primLineas.addEventListener('change', primitiva())
        function primitiva() {
            if (primTriangulos.checked){
                gl.drawElements(gl.TRIANGLES, 26 * 3 , gl.UNSIGNED_SHORT, 0);
            } else {
                console.log("entra a lineas primitiva")
                gl.drawElements(gl.LINES, 26 * 3 , gl.UNSIGNED_SHORT, 0);
            }
        }
        //para pasarle al shader el valor de navidad
        if (Decoration == 'no'){
            gl.uniform1i(navidad, 0)
        } else {
            gl.uniform1i(navidad, 1)
        }

        // Call drawScene again in the next browser repaint
        requestAnimationFrame(function() {
			drawScene(gl, rad_ang, canvas)
		});
    }
    
    
    function initVertexBuffers(gl) {
        
        var vertexesAndColors = [
           // CUBO 1 (IZQUIERDA)
    // BACK - AZUL
    -0.75, -0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 0
    -0.25, -0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 1
    -0.25, 0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 2
    -0.75, 0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 3

    // FRONT - ROJO
    -0.75, -0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 4
    -0.25, -0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 5
    -0.25, 0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 6
    -0.75, 0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 7

    // LEFT - AMARILLO
    -0.75, -0.50, -0.25, 1.0, 1.0, 0.0, // Vértice 8
    -0.75, 0.50, -0.25, 1.0, 1.0, 0.0, // Vértice 9
    -0.75, 0.50, 0.25, 1.0, 1.0, 0.0, // Vértice 10
    -0.75, -0.50, 0.25, 1.0, 1.0, 0.0, // Vértice 11

    // RIGHT - VERDE
    -0.25, -0.50, -0.25, 0.0, 1.0, 0.0, // Vértice 12
    -0.25, 0.50, -0.25, 0.0, 1.0, 0.0, // Vértice 13
    -0.25, 0.50, 0.25, 0.0, 1.0, 0.0, // Vértice 14
    -0.25, -0.50, 0.25, 0.0, 1.0, 0.0, // Vértice 15

    // BOTTOM - TURQUESA
    -0.75, -0.50, -0.25, 0.0, 1.0, 1.0, // Vértice 16
    -0.75, -0.50, 0.25, 0.0, 1.0, 1.0, // Vértice 17
    -0.25, -0.50, 0.25, 0.0, 1.0, 1.0, // Vértice 18
    -0.25, -0.50, -0.25, 0.0, 1.0, 1.0, // Vértice 19

    // CUBO 2 (DERECHA)
    // BACK - AZUL
    0.25, -0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 20
    0.75, -0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 21
    0.75, 0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 22
    0.25, 0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 23

    // FRONT - ROJO
    0.25, -0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 24
    0.75, -0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 25
    0.75, 0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 26
    0.25, 0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 27

    // LEFT - AMARILLO
    0.25, -0.50, -0.25, 1.0, 1.0, 0.0, // Vértice 28
    0.25, 0.50, -0.25, 1.0, 1.0, 0.0, // Vértice 29
    0.25, 0.50, 0.25, 1.0, 1.0, 0.0, // Vértice 30
    0.25, -0.50, 0.25, 1.0, 1.0, 0.0, // Vértice 31

    // RIGHT - VERDE
    0.75, -0.50, -0.25, 0.0, 1.0, 0.0, // Vértice 32
    0.75, 0.50, -0.25, 0.0, 1.0, 0.0, // Vértice 33
    0.75, 0.50, 0.25, 0.0, 1.0, 0.0, // Vértice 34
    0.75, -0.50, 0.25, 0.0, 1.0, 0.0, // Vértice 35

    // BOTTOM - TURQUESA
    0.25, -0.50, -0.25, 0.0, 1.0, 1.0, // Vértice 36
    0.25, -0.50, 0.25, 0.0, 1.0, 1.0, // Vértice 37
    0.75, -0.50, 0.25, 0.0, 1.0, 1.0, // Vértice 38
    0.75, -0.50, -0.25, 0.0, 1.0, 1.0, // Vértice 39

    // PIRÁMIDE
     // 
     0.00, 1.00, 0.00, 1.0, 0.0, 0.0, // Vértice 40
// Base de la pirámide
// (v1) (Amarillo)
-0.75, 0.50, -0.75, 1.0, 1.0, 0.0, // Vértice 41 (Amarillo)
// (v2) (Azul)
-0.75, 0.50, 0.75, 0.0, 0.0, 1.0, // Vértice 42 (Azul)
// (v3) (Verde)
0.75, 0.50, 0.75, 0.0, 1.0, 0.0, // Vértice 43 (Verde)
// (v4) (Turquesa)
0.75, 0.50, -0.75, 0.0, 1.0, 1.0 // Vértice 44 (Turquesa)

        ];


// Indexes (for drawing squares using triangles)
var indexes = [
    // CUBO 1
    0, 1, 2,    // Triángulo #1
    0, 2, 3,    // Triángulo #2
    4, 5, 6,    // Triángulo #3
    4, 6, 7,    // Triángulo #4
    8, 9, 10,   // Triángulo #5
    8, 10, 11,  // Triángulo #6
    12, 13, 14, // Triángulo #7
    12, 14, 15, // Triángulo #8
    16, 17, 18, // Triángulo #9
    16, 18, 19, // Triángulo #10
    // CUBO 2
    20, 21, 22,    // Triángulo #11
    20, 22, 23,    // Triángulo #12
    24, 25, 26,    // Triángulo #13
    24, 26, 27,    // Triángulo #14
    28, 29, 30,    // Triángulo #15
    28, 30, 31,    // Triángulo #16
    32, 33, 34,    // Triángulo #17
    32, 34, 35,    // Triángulo #18
    36, 37, 38,    // Triángulo #19
    36, 38, 39,    // Triángulo #20
    // Pirámide
    40, 41, 42, // Triángulo #21 (base)
    40, 42, 43, // Triángulo #22 (base)
    40, 43, 44, // Triángulo #23 (base)
    40, 44, 41, // Triángulo #24 (base)
    41, 42, 43, // Triángulo #25 (caras laterales)
    41, 43, 44, // Triángulo #26 (caras laterales)
    42, 43, 44, // Triángulo #27 (caras laterales)
    42, 44, 45, // Triángulo #28 (caras laterales)
    43, 44, 45, // Triángulo #29 (caras laterales)
    41, 45, 42, // Triángulo #30 (caras laterales)
    40, 41, 45, // Triángulo #31 (caras inferiores)
    40, 45, 44, // Triángulo #32 (caras inferiores)
    40, 44, 43, // Triángulo #33 (caras inferiores)
    40, 43, 42  // Triángulo #34 (caras inferiores)
];


        // Write a_Position and a_Color using gl.ARRAY_BUFFER
        gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexesAndColors), gl.STATIC_DRAW);

        var vertexPositionAttribute = gl.getAttribLocation(gl.program, "a_Position");
        gl.enableVertexAttribArray(vertexPositionAttribute);
        gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 4 * (3 + 2), 0);

        var vertexColorAttribute = gl.getAttribLocation(gl.program, "a_TexCoord");
        gl.enableVertexAttribArray(vertexColorAttribute);
        gl.vertexAttribPointer(vertexColorAttribute, 2, gl.FLOAT, false, 4 * (3 + 2), 4 * 3);

        // Write indexes in gl.ELEMENT_ARRAY_BUFFER
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexes), gl.STATIC_DRAW);
    }
    

    function toRadian(d){
        return d*Math.PI/180;
    }

    function initProjection(gl, canvas) {
        
        projOrtografica.addEventListener('change', proyeccion());
        projPerspectiva.addEventListener('change', proyeccion());

        function proyeccion(){
            if (projOrtografica.checked){
                var pMatrixUniform = gl.getUniformLocation(gl.program, "u_pMatrix");
                var ratio = canvas.width / canvas.height;
                var pMatrix = glMatrix.mat4.ortho(glMatrix.mat4.create(), -ratio, ratio, -1.0, 1.0, -1.0, 1.0);
                gl.uniformMatrix4fv(pMatrixUniform, false, pMatrix);

                // // Write u_vMatrix
                var vMatrixUniform = gl.getUniformLocation(gl.program, "u_vMatrix");
                var vMatrix = glMatrix.mat4.lookAt(glMatrix.mat4.create(), [0, 0, 0], [0, 0, 0], [0, 0, 0]);
                gl.uniformMatrix4fv(vMatrixUniform, false, vMatrix);

            } else if (projPerspectiva.checked) {
                // Write u_pMatrix
                var pMatrixUniform = gl.getUniformLocation(gl.program, "u_pMatrix");
                var ratio = canvas.width / canvas.height;
                var pMatrix = glMatrix.mat4.perspective(glMatrix.mat4.create(), toRadian(60), ratio, 0.1, 100);
                gl.uniformMatrix4fv(pMatrixUniform, false, pMatrix);

                // // Write u_vMatrix
                var vMatrixUniform = gl.getUniformLocation(gl.program, "u_vMatrix");
                var vMatrix = glMatrix.mat4.lookAt(glMatrix.mat4.create(), [0, camaraY, z], [0, 0, 0], [0, 1, 0]);
                gl.uniformMatrix4fv(vMatrixUniform, false, vMatrix);

            }
        }
    }

 
     function initShaders(gl, vs_source, fs_source) {
        // Compile shaders
        var vertexShader = makeShader(gl, vs_source, gl.VERTEX_SHADER);
        var fragmentShader = makeShader(gl, fs_source, gl.FRAGMENT_SHADER);

        // Create program
        var glProgram = gl.createProgram();

        // Attach and link shaders to the program
        gl.attachShader(glProgram, vertexShader);
        gl.attachShader(glProgram, fragmentShader);
        gl.linkProgram(glProgram);
        if (!gl.getProgramParameter(glProgram, gl.LINK_STATUS)) {
            alert("Unable to initialize the shader program");
            return false;
        }

        // Use program
        gl.useProgram(glProgram);
        gl.program = glProgram;

        return true;
    }

    function makeShader(gl, src, type) {
        var shader = gl.createShader(type);
        gl.shaderSource(shader, src);
        gl.compileShader(shader);
        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
            alert("Error compiling shader: " + gl.getShaderInfoLog(shader));
            return;
        }
        return shader;
    }
</script>

</html>

