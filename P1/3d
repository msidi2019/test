<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/2.8.1/gl-matrix-min.js"></script>
    <title>Proyecciones con WebGL</title>
</head>

<body onload="init()">
    <canvas id="myCanvas" width="640" height="480"></canvas><br>
    <b>Rotation</b>
    <input type="checkbox" name="rotation" checked>
    <input type="range" id="speed" min="1" max="3" value="1" step="1"> Speed<br>
    <b>WebGL primitive</b>
    <input type="radio" name="primitive" value="triangles" checked> Triangles
    <input type="radio" name="primitive" value="lines"> Lines<br>
    <b>Projection type</b>
    <input type="radio" name="projection" value="perspective" checked> Perspective
    <input type="radio" name="projection" value="orthographic"> Orthographic<br>
</body>

<script id="shaderVs" type="x-shader/x-vertex">
    attribute vec4 a_Position;
    attribute vec3 a_Color;
    uniform mat4 u_pMatrix;
    uniform mat4 u_vMatrix;
    uniform mat4 u_mvMatrix;
    varying highp vec4 v_Color;
    void main(){
        gl_Position = u_pMatrix * u_vMatrix * u_mvMatrix * a_Position;
        v_Color = vec4(a_Color, 1.0);
    }
</script>

<script id="shaderFs" type="x-shader/x-fragment">
    varying highp vec4 v_Color;
    void main(){
        gl_FragColor = v_Color;
    }
</script>

<script>
    var gl,
        canvas,
        count = 0.0,
        ratio,
        z = 3,
        projectionValue = document.querySelector('input[name="projection"]:checked').value;

    function init(){
        
        // Get canvas object from the DOM and Init WebGL Context
        canvas = document.getElementById("myCanvas");
        gl = canvas.getContext("webgl");

        if (!gl) {
        console.log("FAILED TO GET THE RENDERING CONTEXT FOR WEBGL.");
        return;
        }

        // Init Shaders 
        var vs = document.getElementById('shaderVs').innerHTML,
            fs = document.getElementById('shaderFs').innerHTML;

        if (!initShaders(gl, vs, fs)){
        console.log("FAILED TO INITIALIZE SHADERS.");
        return;
        }

        // Init vertex shader
        initVertexShader(gl);

        // Init projection matrix
        initProjection(gl, canvas);

        // Set clear canvas color
        gl.clearColor(0.0, 0.0, 0.0, 1.0);

        // Hidden surface removal
        gl.enable(gl.DEPTH_TEST);

        // Event listener for mouse wheel
        document.addEventListener('wheel', function (event) {
            if (projectionValue == 'perspective'){
                z = event.deltaY > 0 ? z - 1 : z + 1;
            }
        });
        drawScene();
    }

    function drawScene() {
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
        
        projectionValue = document.querySelector('input[name="projection"]:checked').value,
        u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
        u_vMatrix = gl.getUniformLocation(gl.program, "u_vMatrix"),
        ratio = canvas.width/canvas.height;
        
        switch (projectionValue) {
            case "perspective":
                var pMatrix = mat4.perspective(mat4.create(), toRadian(60), ratio, 0.1, 100),
                    vMatrix = mat4.lookAt(mat4.create(), [0, 0, z], [0, 0, 0], [0, 1, 0]);
                break;
        
            case "orthographic":
                var pMatrix = mat4.ortho(mat4.create(), -ratio, ratio, -1.0, 1.50, -1.0, 1.50),
                    vMatrix = mat4.create();
                break;
            default:
        }

        gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
        gl.uniformMatrix4fv(u_vMatrix, false, vMatrix);

        var rotationChecked = document.querySelector('input[name="rotation"]').checked,
            primitiveValue = document.querySelector('input[name="primitive"]:checked').value,
            mvMatrix = mat4.fromRotation(mat4.create(), count, [0, 1, 0]),
            u_mvMatrix = gl.getUniformLocation(gl.program, "u_mvMatrix");

        gl.uniformMatrix4fv(u_mvMatrix, false, mvMatrix);

        var speed = parseInt(document.getElementById("speed").value);

        if (rotationChecked){
            count += 0.01 * speed;
        }

        switch (primitiveValue) {
            case "triangles":
                // DRAW PRIMITIVE ELEMENTS FOR FIRST CUBE
                gl.drawElements(gl.TRIANGLES, 6 * 3, gl.UNSIGNED_SHORT, 0);
                // DRAW PRIMITIVE ELEMENTS FOR SECOND CUBE
                gl.drawElements(gl.TRIANGLES, 6 * 3, gl.UNSIGNED_SHORT, 6 * 3 * 2);
                // DRAW PRIMITIVE ELEMENTS FOR PYRAMID
                gl.drawElements(gl.TRIANGLES, 4 * 3, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2);
                break;
            case "lines":
                // DRAW LINES FOR FIRST CUBE
                gl.drawElements(gl.LINES, 6 * 3 * 2, gl.UNSIGNED_SHORT, 0);
                // DRAW LINES FOR SECOND CUBE
                gl.drawElements(gl.LINES, 6 * 3 * 2, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2);
                // DRAW LINES FOR PYRAMID
                gl.drawElements(gl.LINES, 4 * 3 * 2, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2 * 2);
                break;
            default:
        }

        // CALL DRAWSCENE AGAIN IN THE NEXT BROWSER REPAINT
        requestAnimationFrame(drawScene);
    }
       

    function initVertexShader(gl) {
    // Vertexes and colors (X, Y, Z, R, G, B)
    var vertexesAndColors = [

        // CUBE 1 POINTS
        // BACK
        -0.75, -0.50, -0.25, 1, 1, 0, // Vértice 0
        -0.25, -0.50, -0.25, 1, 1, 0, // Vértice 1
        -0.25, 0.50, -0.25, 1, 1, 0, // Vértice 2
        -0.75, 0.50, -0.25, 1, 1, 0, // Vértice 3
        // FRONT
        -0.75, -0.50, 0.25, 0, 0, 1, // Vértice 4
        -0.25, -0.50, 0.25, 0, 0, 1, // Vértice 5
        -0.25, 0.50, 0.25, 0, 0, 1, // Vértice 6
        -0.75, 0.50, 0.25, 0, 0, 1, // Vértice 7
        // LEFT
        -0.75, -0.50, -0.25, 0, 1, 1, // Vértice 8
        -0.75, 0.50, -0.25, 0, 1, 1, // Vértice 9
        -0.75, 0.50, 0.25, 0, 1, 1, // Vértice 10
        -0.75, -0.50, 0.25, 0, 1, 1, // Vértice 11
        // RIGHT
        -0.25, -0.50, -0.25, 1, 0, 0, // Vértice 12
        -0.25, 0.50, -0.25, 1, 0, 0, // Vértice 13
        -0.25, 0.50, 0.25, 1, 0, 0, // Vértice 14
        -0.25, -0.50, 0.25, 1, 0, 0, // Vértice 15
        // BOTTOM
        -0.75, -0.50, -0.25, 1, 0, 1, // Vértice 16
        -0.75, -0.50, 0.25, 1, 0, 1, // Vértice 17
        -0.25, -0.50, 0.25, 1, 0, 1, // Vértice 18
        -0.25, -0.50, -0.25, 1, 0, 1, // Vértice 19

        // CUBE 2 POINTS
        // BACK
        0.25, -0.50, -0.25, 1, 1, 0, // Vértice 20
        0.75, -0.50, -0.25, 1, 1, 0, // Vértice 21
        0.75, 0.50, -0.25, 1, 1, 0, // Vértice 22
        0.25, 0.50, -0.25, 1, 1, 0, // Vértice 23
        // FRONT
        0.25, -0.50, 0.25, 0, 0, 1, // Vértice 24
        0.75, -0.50, 0.25, 0, 0, 1, // Vértice 25
        0.75, 0.50, 0.25, 0, 0, 1, // Vértice 26
        0.25, 0.50, 0.25, 0, 0, 1, // Vértice 27
        // LEFT
        0.25, -0.50, -0.25, 0, 1, 1, // Vértice 28
        0.25, 0.50, -0.25, 0, 1, 1, // Vértice 29
        0.25, 0.50, 0.25, 0, 1, 1, // Vértice 30
        0.25, -0.50, 0.25, 0, 1, 1, // Vértice 31
        // RIGHT
        0.75, -0.50, -0.25, 1, 0, 0, // Vértice 32
        0.75, 0.50, -0.25, 1, 0, 0, // Vértice 33
        0.75, 0.50, 0.25, 1, 0, 0, // Vértice 34
        0.75, -0.50, 0.25, 1, 0, 0, // Vértice 35
        // BOTTOM
        0.25, -0.50, -0.25, 1, 0, 1, // Vértice 36
        0.25, -0.50, 0.25, 1, 0, 1, // Vértice 37
        0.75, -0.50, 0.25, 1, 0, 1, // Vértice 38
        0.75, -0.50, -0.25, 1, 0, 1, // Vértice 39

        // PYRAMID POINTS
        // BASE
        -0.25, 0.50, -0.25, 1, 1, 0, // Vértice 40
        -0.25, 0.50, 0.25, 1, 1, 0, // Vértice 41
        0.25, 0.50, 0.25, 1, 1, 0, // Vértice 42
        0.25, 0.50, -0.25, 1, 1, 0, // Vértice 43
        // TOP
        0, 1.25, 0, 0, 1, 1 // Vértice 44
    ];

    // Indexes for drawing triangles
    var indexes = [
        // FIRST CUBE
        0, 1, 2, 0, 2, 3,    // Back face
        4, 5, 6, 4, 6, 7,    // Front face
        8, 9, 10, 8, 10, 11,  // Left face
        12, 13, 14, 12, 14, 15, // Right face
        16, 17, 18, 16, 18, 19, // Bottom face
        // SECOND CUBE
        20, 21, 22, 20, 22, 23,    // Back face
        24, 25, 26, 24, 26, 27,    // Front face
        28, 29, 30, 28, 30, 31,  // Left face
        32, 33, 34, 32, 34, 35, // Right face
        36, 37, 38, 36, 38, 39, // Bottom face
        // PYRAMID
        40, 41, 42, // Base - Front
        40, 42, 43, // Base - Back
        40, 43, 44, // Side 1
        41, 40, 44, // Side 2
        41, 44, 42, // Side 3
        42, 44, 43, // Side 4
    ];

    var vertexBuffer = gl.createBuffer();
    if (!vertexBuffer) {
        console.log('Failed to create the buffer object');
        return -1;
    }
    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexesAndColors), gl.STATIC_DRAW);

    var FSIZE = vertexesAndColors.BYTES_PER_ELEMENT;

    // Color and Position
    var a_Color = gl.getAttribLocation(gl.program, 'a_Color');
    if (a_Color < 0) {
        console.log('Failed to get the storage location of a_Color');
        return -1;
    }
    gl.vertexAttribPointer(a_Color, 3, gl.FLOAT, false, FSIZE * 6, FSIZE * 3);
    gl.enableVertexAttribArray(a_Color);

    var a_Position = gl.getAttribLocation(gl.program, 'a_Position');
    if (a_Position < 0) {
        console.log('Failed to get the storage location of a_Position');
        return -1;
    }
    gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, FSIZE * 6, 0);
    gl.enableVertexAttribArray(a_Position);

    var indexBuffer = gl.createBuffer();
    if (!indexBuffer) {
        console.log('Failed to create the buffer object');
        return -1;
    }
    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexes), gl.STATIC_DRAW);

    return indexes.length;
}

function initProjection(gl, canvas) {
    var u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
        pMatrix = mat4.perspective(mat4.create(), toRadian(60), canvas.width/canvas.height, 0.1, 100);
    gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
}

function toRadian(angle){
    return angle * Math.PI / 180;
}

function initShaders(gl, vsSource, fsSource) {
    var vertexShader = gl.createShader(gl.VERTEX_SHADER),
        fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
    
    // Load the shader source
    gl.shaderSource(vertexShader, vsSource);
    gl.shaderSource(fragmentShader, fsSource);

    // Compile the shaders
    gl.compileShader(vertexShader);
    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
        console.error('ERROR compiling vertex shader!', gl.getShaderInfoLog(vertexShader));
        return false;
    }

    gl.compileShader(fragmentShader);
    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
        console.error('ERROR compiling fragment shader!', gl.getShaderInfoLog(fragmentShader));
        return false;
    }

    // Create and link the program
    gl.program = gl.createProgram();
    gl.attachShader(gl.program, vertexShader);
    gl.attachShader(gl.program, fragmentShader);
    gl.linkProgram(gl.program);

    if (!gl.getProgramParameter(gl.program, gl.LINK_STATUS)) {
        console.error('ERROR linking program!', gl.getProgramInfoLog(gl.program));
        return false;
    }

    gl.useProgram(gl.program);

    return true;
}
</script>

</html>
