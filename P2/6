<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/2.8.1/gl-matrix-min.js"></script>
    <title>Ejercicio 5</title>
</head>

<body onload="init()">
    <canvas id="myCanvas" width="640" height="480"></canvas><br>
    <b>Rotation</b>
    <input type="checkbox" name="rotation" checked>
    <input type="range" id="speed" min="1" max="3" value="1" step="1"> Speed<br>
    <b>WebGL primitive</b>
    <input type="radio" name="primitive" value="triangles" checked> Triangles
    <input type="radio" name="primitive" value="lines"> Lines<br>
    <b>Projection type</b>
    <input type="radio" name="projection" value="perspective" checked> Perspective
    <input type="radio" name="projection" value="orthographic"> Orthographic<br>
    <b>Decoration</b>
    <input type="radio" name="decoration" value="no" checked onchange="toggleDecoration()"> No
    <input type="radio" name="decoration" value="yes" onchange="toggleDecoration()"> Yes<br>
    <b>Step</b>
    <input type="number" id="step" value="0.1" step="0.1">

    <script id="shaderVs" type="x-shader/x-vertex">
        attribute vec4 a_Position;
        attribute vec3 a_Color;
        attribute vec2 a_TexCoord;
        uniform mat4 u_pMatrix;
        uniform mat4 u_vMatrix;
        uniform mat4 u_mvMatrix;
        varying highp vec4 v_Color;
        varying highp vec2 v_TexCoord;
        void main(){
            gl_Position = u_pMatrix * u_vMatrix * u_mvMatrix * a_Position;
            v_Color = vec4(a_Color, 1.0);
            v_TexCoord = a_TexCoord;
        }
    </script>

    <script id="shaderFs" type="x-shader/x-fragment">
        precision mediump float;
        varying highp vec4 v_Color;
        varying highp vec2 v_TexCoord;
        uniform sampler2D u_Texture;
        uniform sampler2D u_DecorationTexture;
        uniform bool u_ApplyDecoration;
        void main(){
            vec4 texColor = texture2D(u_Texture, v_TexCoord);
            if (u_ApplyDecoration) {
                vec4 decorationColor = texture2D(u_DecorationTexture, v_TexCoord);
                gl_FragColor = texColor * decorationColor;
            } else {
                gl_FragColor = texColor;
            }
        }
    </script>

    <script>
        var gl,
            canvas,
            count = 0.0,
            ratio,
            z = 3,
            projectionValue = document.querySelector('input[name="projection"]:checked').value;

        var decorationApplied = false;

        function init(){
            // Get canvas object from the DOM and Init WebGL Context
            canvas = document.getElementById("myCanvas");
            gl = canvas.getContext("webgl");

            if (!gl) {
                console.log("FAILED TO GET THE RENDERING CONTEXT FOR WEBGL.");
                return;
            }

            // Init Shaders 
            var vs = document.getElementById('shaderVs').innerHTML,
                fs = document.getElementById('shaderFs').innerHTML;

            if (!initShaders(gl, vs, fs)){
                console.log("FAILED TO INITIALIZE SHADERS.");
                return;
            }

            // Init vertex shader
            initVertexShader(gl);

            // Init projection matrix
            initProjection(gl, canvas);

            // Set clear canvas color
            gl.clearColor(0.0, 0.0, 0.0, 1.0);

            // Hidden surface removal
            gl.enable(gl.DEPTH_TEST);

            // Event listener for mouse wheel
            document.addEventListener('wheel', function (event) {
                if (projectionValue == 'perspective'){
                    z = event.deltaY > 0 ? z - 1 : z + 1;
                }
            });

            // Event listener for keyboard
            document.addEventListener('keydown', function (event) {
                handleKeyDown(event);
            });

            drawScene();
        }

        function toggleDecoration() {
            var decorationOption = document.querySelector('input[name="decoration"]:checked').value;
            decorationApplied = (decorationOption === "yes");
        }

        function handleKeyDown(event) {
            var step = parseFloat(document.getElementById("step").value);
            var u_vMatrix = gl.getUniformLocation(gl.program, "u_vMatrix");
            var viewMatrix = mat4.create();
            mat4.lookAt(viewMatrix, [0, 0, z], [0, 0, 0], [0, 1, 0]);
            switch(event.key) {
                case "ArrowUp":
                    // Elevate the camera
                    mat4.translate(viewMatrix, viewMatrix, [0, step, 0]);
                    break;
                case "ArrowDown":
                    // Descend the camera
                    mat4.translate(viewMatrix, viewMatrix, [0, -step, 0]);
                    break;
            }
            gl.uniformMatrix4fv(u_vMatrix, false, viewMatrix);
        }

        function drawScene() {
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            
            projectionValue = document.querySelector('input[name="projection"]:checked').value,
            u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
            u_vMatrix = gl.getUniformLocation(gl.program, "u_vMatrix"),
            ratio = canvas.width/canvas.height;
            
            switch (projectionValue) {
                case "perspective":
                    var pMatrix = mat4.perspective(mat4.create(), toRadian(60), ratio, 0.1, 100),
                        vMatrix = mat4.lookAt(mat4.create(), [0, 0, z], [0, 0, 0], [0, 1, 0]);
                    break;
            
                case "orthographic":
                    var pMatrix = mat4.ortho(mat4.create(), -ratio, ratio, -1.0, 1.50, -1.0, 1.50),
                        vMatrix = mat4.create();
                    break;
            }
            var u_mvMatrix = gl.getUniformLocation(gl.program, "u_mvMatrix");
            var mvMatrix = mat4.create();
            mat4.translate(mvMatrix, mvMatrix, [0, 0, -5]);
            mat4.rotate(mvMatrix, mvMatrix, toRadian(count), [1, 1, 0]);

            gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
            gl.uniformMatrix4fv(u_vMatrix, false, vMatrix);
            gl.uniformMatrix4fv(u_mvMatrix, false, mvMatrix);

            if (document.querySelector('input[name="primitive"]:checked').value == "triangles") {
                gl.drawArrays(gl.TRIANGLES, 0, 36);
            } else {
                gl.drawArrays(gl.LINES, 0, 36);
            }
            if (document.querySelector('input[name="rotation"]').checked) {
                count += parseFloat(document.getElementById("speed").value);
            }

            requestAnimationFrame(drawScene);
        }

        function initVertexShader(gl) {
            var verticesColorsTexCoords = new Float32Array([
                // Vertex coordinates, color, texture coordinates
                -0.5,  0.5, -0.5,  1.0,  1.0,  1.0,  0.0,  1.0,
                -0.5, -0.5, -0.5,  1.0,  1.0,  1.0,  0.0,  0.0,
                 0.5, -0.5, -0.5,  1.0,  1.0,  1.0,  1.0,  0.0,
                 0.5,  0.5, -0.5,  1.0,  1.0,  1.0,  1.0,  1.0,
                 0.5,  0.5, -0.5,  1.0,  1.0,  1.0,  1.0,  1.0,
                 0.5, -0.5, -0.5,  1.0,  1.0,  1.0,  1.0,  0.0,
                -0.5, -0.5, -0.5,  1.0,  1.0,  1.0,  0.0,  0.0,
                -0.5,  0.5, -0.5,  1.0,  1.0,  1.0,  0.0,  1.0,
                // Rest of the cube...
            ]);

            var vertexColorBuffer = gl.createBuffer();
            if (!vertexColorBuffer) {
                console.log("FAILED TO CREATE THE BUFFER OBJECT.");
                return;
            }

            gl.bindBuffer(gl.ARRAY_BUFFER, vertexColorBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, verticesColorsTexCoords, gl.STATIC_DRAW);

            var FSIZE = verticesColorsTexCoords.BYTES_PER_ELEMENT;

            var a_Position = gl.getAttribLocation(gl.program, 'a_Position');
            var a_Color = gl.getAttribLocation(gl.program, 'a_Color');
            var a_TexCoord = gl.getAttribLocation(gl.program, 'a_TexCoord');

            gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, FSIZE * 8, 0);
            gl.vertexAttribPointer(a_Color, 3, gl.FLOAT, false, FSIZE * 8, FSIZE * 3);
            gl.vertexAttribPointer(a_TexCoord, 2, gl.FLOAT, false, FSIZE * 8, FSIZE * 6);

            gl.enableVertexAttribArray(a_Position);
            gl.enableVertexAttribArray(a_Color);
            gl.enableVertexAttribArray(a_TexCoord);

            var u_Texture = gl.getUniformLocation(gl.program, "u_Texture");
            var u_DecorationTexture = gl.getUniformLocation(gl.program, "u_DecorationTexture");
            var u_ApplyDecoration = gl.getUniformLocation(gl.program, "u_ApplyDecoration");

            var texture = gl.createTexture();
            var decorationTexture = gl.createTexture();

            var textureImage = new Image();
            var decorationTextureImage = new Image();

            textureImage.onload = function () {
                loadTexture(gl, texture, textureImage, u_Texture, 0);
            }
            textureImage.src = "portal.jpg";

            decorationTextureImage.onload = function () {
                loadTexture(gl, decorationTexture, decorationTextureImage, u_DecorationTexture, 1);
            }
            decorationTextureImage.src = "light.jpg";

            gl.uniform1i(u_ApplyDecoration, 0);
        }

        function loadTexture(gl, texture, image, u_Texture, textureUnit) {
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);
            gl.activeTexture(gl.TEXTURE0 + textureUnit);
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
            gl.uniform1i(u_Texture, textureUnit);
        }

        function initProjection(gl, canvas) {
            var u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
                ratio = canvas.width / canvas.height;

            mat4.perspective(pMatrix, toRadian(60), ratio, 0.1, 100);
            gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
        }

        function initShaders(gl, vs, fs) {
            var program = createProgram(gl, vs, fs);
            if (!program) {
                console.log('FAILED TO CREATE SHADER PROGRAM.');
                return false;
            }
            gl.useProgram(program);
            gl.program = program;
            return true;
        }

        function createProgram(gl, vs, fs) {
            var vertexShader = loadShader(gl, gl.VERTEX_SHADER, vs);
            var fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fs);

            if (!vertexShader || !fragmentShader) {
                return null;
            }

            var program = gl.createProgram();
            if (!program) {
                return null;
            }

            gl.attachShader(program, vertexShader);
            gl.attachShader(program, fragmentShader);
            gl.linkProgram(program);

            var linked = gl.getProgramParameter(program, gl.LINK_STATUS);
            if (!linked) {
                var error = gl.getProgramInfoLog(program);
                console.log('FAILED TO LINK PROGRAM: ' + error);
                gl.deleteProgram(program);
                gl.deleteShader(fragmentShader);
                gl.deleteShader(vertexShader);
                return null;
            }
            return program;
        }

        function loadShader(gl, type, source) {
            var shader = gl.createShader(type);
            if (shader == null) {
                console.log('UNABLE TO CREATE SHADER.');
                return null;
            }
            gl.shaderSource(shader, source);
            gl.compileShader(shader);

            var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
            if (!compiled) {
                var error = gl.getShaderInfoLog(shader);
                console.log('FAILED TO COMPILE SHADER: ' + error);
                gl.deleteShader(shader);
                return null;
            }
            return shader;
        }

        function toRadian(degree) {
            return degree * Math.PI / 180;
        }
    </script>
</body>
</html>
