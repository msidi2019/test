<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/2.8.1/gl-matrix-min.js"></script>
    <title>Ejercicio 6</title>
</head>

<body onload="init()">
    <canvas id="myCanvas" width="640" height="480"></canvas><br>
    <b>Rotation</b>
    <input type="checkbox" name="rotation" checked>
    <input type="range" id="speed" min="1" max="3" value="1" step="1"> Speed<br>
    <b>WebGL primitive</b>
    <input type="radio" name="primitive" value="triangles" checked> Triangles
    <input type="radio" name="primitive" value="lines"> Lines<br>
    <b>Projection type</b>
    <input type="radio" name="projection" value="perspective" checked> Perspective
    <input type="radio" name="projection" value="orthographic"> Orthographic<br>
    <b>Decoration</b>
    <input type="radio" name="decoration" value="no" checked> No
    <input type="radio" name="decoration" value="yes"> Yes<br>

    <script id="shaderVs" type="x-shader/x-vertex">
        attribute vec4 a_Position;
        attribute vec3 a_Color;
        attribute vec2 a_TextureCoord; // Texture coordinates
        uniform mat4 u_pMatrix;
        uniform mat4 u_vMatrix;
        uniform mat4 u_mvMatrix;
        varying highp vec4 v_Color;
        varying highp vec2 v_TextureCoord; // Varying texture coordinates
        void main(){
            gl_Position = u_pMatrix * u_vMatrix * u_mvMatrix * a_Position;
            v_Color = vec4(a_Color, 1.0);
            v_TextureCoord = a_TextureCoord; // Pass the texture coordinate to the fragment shader
        }
    </script>

    <script id="shaderFs" type="x-shader/x-fragment">
        precision mediump float;
        varying highp vec4 v_Color;
        varying highp vec2 v_TextureCoord; // Received texture coordinates
        uniform sampler2D u_Sampler; // Texture sampler
        void main(){
            gl_FragColor = texture2D(u_Sampler, v_TextureCoord) * v_Color; // Multiply texture color with vertex color
        }
    </script>

    <script>
        var gl,
            canvas,
            count = 0.0,
            ratio,
            z = 3,
            projectionValue = document.querySelector('input[name="projection"]:checked').value,
            decorationValue = document.querySelector('input[name="decoration"]:checked').value;

            function init(){
    // Get canvas object from the DOM and Init WebGL Context
    canvas = document.getElementById("myCanvas");
    gl = canvas.getContext("webgl");

    if (!gl) {
        console.log("FAILED TO GET THE RENDERING CONTEXT FOR WEBGL.");
        return;
    }

    // Init Shaders 
    var vs = document.getElementById('shaderVs').innerHTML,
        fs = document.getElementById('shaderFs').innerHTML;

    if (!initShaders(gl, vs, fs)){
        console.log("FAILED TO INITIALIZE SHADERS.");
        return;
    }

    // Init vertex shader
    initVertexShader(gl);

    // Init projection matrix
    initProjection(gl, canvas);

    // Set clear canvas color
    gl.clearColor(0.0, 0.0, 0.0, 1.0);

    // Hidden surface removal
    gl.enable(gl.DEPTH_TEST);

    // Event listener for mouse wheel
    document.addEventListener('wheel', function (event) {
        if (projectionValue == 'perspective'){
            z = event.deltaY > 0 ? z - 1 : z + 1;
        }
    });

    // Event listener for radio button
    var decorationRadio = document.getElementsByName('decoration');
    for (var i = 0; i < decorationRadio.length; i++) {
        decorationRadio[i].addEventListener('change', function() {
            decorationValue = this.value;
        });
    }

    // Call loadTextureAndDrawScene() to draw the scene with textures
    loadTextureAndDrawScene();
}


        function drawScene() {
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            
            projectionValue = document.querySelector('input[name="projection"]:checked').value,
            u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
            u_vMatrix = gl.getUniformLocation(gl.program, "u_vMatrix"),
            ratio = canvas.width/canvas.height;
            
            switch (projectionValue) {
                case "perspective":
                    var pMatrix = mat4.perspective(mat4.create(), toRadian(60), ratio, 0.1, 100),
                        vMatrix = mat4.lookAt(mat4.create(), [0, 0, z], [0, 0, 0], [0, 1, 0]);
                    break;
            
                case "orthographic":
                    var pMatrix = mat4.ortho(mat4.create(), -ratio, ratio, -1.0, 1.50, -1.0, 1.50),
                        vMatrix = mat4.create();
                    break;
                default:
            }

            gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
            gl.uniformMatrix4fv(u_vMatrix, false, vMatrix);

            var rotationChecked = document.querySelector('input[name="rotation"]').checked,
                primitiveValue = document.querySelector('input[name="primitive"]:checked').value,
                mvMatrix = mat4.fromRotation(mat4.create(), count, [0, 1, 0]),
                u_mvMatrix = gl.getUniformLocation(gl.program, "u_mvMatrix");

            gl.uniformMatrix4fv(u_mvMatrix, false, mvMatrix);

            var speed = parseInt(document.getElementById("speed").value);

            if (rotationChecked){
                count += 0.01 * speed;
            }

            // Load texture and draw scene
            loadTextureAndDrawScene();
        }

        function loadTextureAndDrawScene() {
    var texture = gl.createTexture();
    var image = new Image();
    image.onload = function() {
        console.log("Imagen cargada correctamente.");
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1); // Flip the image's y axis
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
        gl.generateMipmap(gl.TEXTURE_2D);
        gl.bindTexture(gl.TEXTURE_2D, null);

        // Pass texture to the shader
        gl.uniform1i(gl.getUniformLocation(gl.program, "u_Sampler"), 0);

        // Call drawScene after texture is loaded
        drawScene(); // Move drawScene() here
    };
    image.onerror = function() {
        console.error("Error al cargar la imagen.");
    };
    if (decorationValue == "yes") {
        image.src = light.jpg; // Use light texture for decoration
    } else {
        image.src = portal.jpg; // Use portal texture as default
    }
}


        function initVertexShader(gl) {
            // Vertexes and colors (X, Y, Z, R, G, B)
            var vertexesAndColors = [
                // CUBO 1 (IZQUIERDA)
                // BACK - AZUL
                -0.75, -0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 0
                -0.25, -0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 1
                -0.25, 0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 2
                -0.75, 0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 3

                // FRONT - ROJO
                -0.75, -0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 4
                -0.25, -0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 5
                -0.25, 0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 6
                -0.75, 0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 7

                // LEFT - AMARILLO
                -0.75, -0.50, -0.25, 1.0, 1.0, 0.0, // Vértice 8
                -0.75, 0.50, -0.25, 1.0, 1.0, 0.0, // Vértice 9
                -0.75, 0.50, 0.25, 1.0, 1.0, 0.0, // Vértice 10
                -0.75, -0.50, 0.25, 1.0, 1.0, 0.0, // Vértice 11

                // RIGHT - VERDE
                -0.25, -0.50, -0.25, 0.0, 1.0, 0.0, // Vértice 12
                -0.25, 0.50, -0.25, 0.0, 1.0, 0.0, // Vértice 13
                -0.25, 0.50, 0.25, 0.0, 1.0, 0.0, // Vértice 14
                -0.25, -0.50, 0.25, 0.0, 1.0, 0.0, // Vértice 15

                // BOTTOM - TURQUESA
                -0.75, -0.50, -0.25, 0.0, 1.0, 1.0, // Vértice 16
                -0.75, -0.50, 0.25, 0.0, 1.0, 1.0, // Vértice 17
                -0.25, -0.50, 0.25, 0.0, 1.0, 1.0, // Vértice 18
                -0.25, -0.50, -0.25, 0.0, 1.0, 1.0, // Vértice 19

                // CUBO 2 (DERECHA)
                // BACK - AZUL
                0.25, -0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 20
                0.75, -0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 21
                0.75, 0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 22
                0.25, 0.50, -0.25, 0.0, 0.0, 1.0, // Vértice 23

                // FRONT - ROJO
                0.25, -0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 24
                0.75, -0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 25
                0.75, 0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 26
                0.25, 0.50, 0.25, 1.0, 0.0, 0.0, // Vértice 27

                // LEFT - AMARILLO
                0.25, -0.50, -0.25, 1.0, 1.0, 0.0, // Vértice 28
                0.25, 0.50, -0.25, 1.0, 1.0, 0.0, // Vértice 29
                0.25, 0.50, 0.25, 1.0, 1.0, 0.0, // Vértice 30
                0.25, -0.50, 0.25, 1.0, 1.0, 0.0, // Vértice 31

                // RIGHT - VERDE
                0.75, -0.50, -0.25, 0.0, 1.0, 0.0, // Vértice 32
                0.75, 0.50, -0.25, 0.0, 1.0, 0.0, // Vértice 33
                0.75, 0.50, 0.25, 0.0, 1.0, 0.0, // Vértice 34
                0.75, -0.50, 0.25, 0.0, 1.0, 0.0, // Vértice 35

                // BOTTOM - TURQUESA
                0.25, -0.50, -0.25, 0.0, 1.0, 1.0, // Vértice 36
                0.25, -0.50, 0.25, 0.0, 1.0, 1.0, // Vértice 37
                0.75, -0.50, 0.25, 0.0, 1.0, 1.0, // Vértice 38
                0.75, -0.50, -0.25, 0.0, 1.0, 1.0, // Vértice 39

                // PIRÁMIDE
                // PUNTO INICIAL
                0.00, 1.00, 0.00, 1.0, 0.0, 0.0, // Vértice 40
                // Base de la pirámide
                // (v1) (Amarillo)
                -0.75, 0.50, -0.75, 1.0, 1.0, 0.0, // Vértice 41 (Amarillo)
                // (v2) (Azul)
                -0.75, 0.50, 0.75, 0.0, 0.0, 1.0, // Vértice 42 (Azul)
                // (v3) (Verde)
                0.75, 0.50, 0.75, 0.0, 1.0, 0.0, // Vértice 43 (Verde)
                // (v4) (Turquesa)
                0.75, 0.50, -0.75, 0.0, 1.0, 1.0 // Vértice 44 (Turquesa)
            ];

            // Indexes (for drawing squares using triangles)
            var indexes = [
                // CUBO 1
                0, 1, 2,    // Triángulo #1
                0, 2, 3,    // Triángulo #2
                4, 5, 6,    // Triángulo #3
                4, 6, 7,    // Triángulo #4
                8, 9, 10,   // Triángulo #5
                8, 10, 11,  // Triángulo #6
                12, 13, 14, // Triángulo #7
                12, 14, 15, // Triángulo #8
                16, 17, 18, // Triángulo #9
                16, 18, 19, // Triángulo #10
                // CUBO 2
                20, 21, 22,    // Triángulo #11
                20, 22, 23,    // Triángulo #12
                24, 25, 26,    // Triángulo #13
                24, 26, 27,    // Triángulo #14
                28, 29, 30,    // Triángulo #15
                28, 30, 31,    // Triángulo #16
                32, 33, 34,    // Triángulo #17
                32, 34, 35,    // Triángulo #18
                36, 37, 38,    // Triángulo #19
                36, 38, 39,    // Triángulo #20
                // PIRÁMIDE
                // BASE DE LA PIRÁMIDE
                41, 42, 43,   // Triángulo #21
                41, 43, 44,   // Triángulo #22
                // CARA TRASERA
                40, 41, 42,   // Triángulo #23
                // CARA LATERAL IZQUIERDA
                40, 41, 44,   // Triángulo #24
                // CARA LATERAL DERECHA
                40, 42, 43    // Triángulo #25
            ];

            var vertexBuffer = gl.createBuffer(),
                indexBuffer = gl.createBuffer();

            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexesAndColors), gl.STATIC_DRAW);
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexes), gl.STATIC_DRAW);

            // Get the attribute and uniform locations
            var a_Position = gl.getAttribLocation(gl.program, "a_Position"),
                a_Color = gl.getAttribLocation(gl.program, "a_Color");

            var FSIZE = vertexesAndColors.BYTES_PER_ELEMENT;

            gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, FSIZE * 6, 0);
            gl.vertexAttribPointer(a_Color, 3, gl.FLOAT, false, FSIZE * 6, FSIZE * 3);

            gl.enableVertexAttribArray(a_Position);
            gl.enableVertexAttribArray(a_Color);
        }

        function initProjection(gl, canvas) {
            var u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
                u_vMatrix = gl.getUniformLocation(gl.program, "u_vMatrix"),
                projectionValue = document.querySelector('input[name="projection"]:checked').value;

            var ratio = canvas.width / canvas.height;

            switch (projectionValue) {
                case "perspective":
                    var pMatrix = mat4.perspective(mat4.create(), toRadian(60), ratio, 0.1, 100),
                        vMatrix = mat4.lookAt(mat4.create(), [0, 0, z], [0, 0, 0], [0, 1, 0]);
                    break;

                case "orthographic":
                    var pMatrix = mat4.ortho(mat4.create(), -ratio, ratio, -1.0, 1.50, -1.0, 1.50),
                        vMatrix = mat4.create();
                    break;
                default:
            }

            gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
            gl.uniformMatrix4fv(u_vMatrix, false, vMatrix);
        }

        function toRadian(angle) {
            return angle * Math.PI / 180;
        }

        function initShaders(gl, vs, fs) {
            var vertexShader = gl.createShader(gl.VERTEX_SHADER);
            var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
            gl.shaderSource(vertexShader, vs);
            gl.shaderSource(fragmentShader, fs);
            gl.compileShader(vertexShader);
            if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
                console.error("ERROR COMPILING THE SHADER:", gl.getShaderInfoLog(vertexShader));
                return false;
            }
            gl.compileShader(fragmentShader);
            if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
                console.error("ERROR COMPILING THE SHADER:", gl.getShaderInfoLog(fragmentShader));
                return false;
            }
            var program = gl.createProgram();
            gl.attachShader(program, vertexShader);
            gl.attachShader(program, fragmentShader);
            gl.linkProgram(program);
            if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
                console.error("ERROR LINKING THE SHADER PROGRAM:", gl.getProgramInfoLog(program));
                return false;
            }
            gl.useProgram(program);
            gl.program = program;
            return true;
        }
    </script>
</body>
</html>
