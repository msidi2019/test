<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/2.8.1/gl-matrix-min.js"></script>
    <title>EJERCICIO EVALUABLE 5</title>
</head>

<body onload="init()">
    <canvas id="myCanvas" width="640" height="480"></canvas>
    <br>
    <b>Step:</b>
    <input type="text" value="0.1" id="step">
    <br>
    <b>Rotation</b>
    <input type="checkbox" name="rotation" checked>
    <input type="range" id="speed" min="1" max="3" value="1" step="1"><b>Speed</b><br>
    <b>WebGL primitive</b>
    <input type="radio" name="primitive" value="triangles" checked>Triangles
    <input type="radio" name="primitive" value="lines">Lines<br>
    <b>Projection type</b>
    <input type="radio" name="projection" value="perspective" checked> Perspective
    <input type="radio" name="projection" value="orthographic">Orthographic<br>
    <b>Daylight</b>
    <input type="radio" name="daylight" value="day" checked>Day
    <input type="radio" name="daylight" value="night">Night<br>
</body>

<script id="shaderVs" type="x-shader/x-vertex">
    attribute vec4 a_Position;
    attribute vec2 a_TexCoord;
    varying vec2 v_TexCoord;
    uniform mat4 u_pMatrix;
    uniform mat4 u_vMatrix;
    uniform mat4 u_mvMatrix;

    void main(){
        gl_Position = u_pMatrix * u_vMatrix * u_mvMatrix * a_Position;
        v_TexCoord = a_TexCoord;
    }
</script>

<script id="shaderFs" type="x-shader/x-fragment">
    precision mediump float;
    uniform sampler2D u_Sampler0;
    uniform sampler2D u_Sampler1;
    uniform float u_filter;
    varying vec2 v_TexCoord;
    uniform float u_Filter;
    void main(void) {
        vec4 color0 = texture2D(u_Sampler0, v_TexCoord);
        vec4 color1 = texture2D(u_Sampler1, v_TexCoord);
        
        if (u_Filter == 0.0){
            gl_FragColor = color0 * color1;
        }else{
            gl_FragColor = color0;
        }
    }
</script>

<script>
    var gl,
        canvas,
        count = 0.0,
        ratio,
        z = 3,
        axisY = 0.0; 

    function init(){
        
        // Get canvas object from the DOM and Init WebGL Context
        canvas = document.getElementById("myCanvas");
        gl = canvas.getContext("webgl");

        if (!gl) {
        console.log("FAILED TO GET THE RENDERING CONTEXT FOR WEBGL.");
        return;
        }

        // Init Shaders 
        var vs = document.getElementById('shaderVs').innerHTML,
            fs = document.getElementById('shaderFs').innerHTML;

        if (!initShaders(gl, vs, fs)){
        console.log("FAILED TO INITIALIZE SHADERS.");
        return;
        }

        initShaders(gl, vs, fs);

        // Init vertex shader
        initVertexShader(gl);

        // Init projection matrix
        initProjection(gl, canvas);

        // Set clear canvas color
        gl.clearColor(0.0, 0.0, 0.0, 1.0);

        // Hidden surface removal
        gl.enable(gl.DEPTH_TEST);

        // Init textures
        initTexturesAndDraw(gl);

        // Event listener for mouse wheel
        document.addEventListener('wheel', function (event) {
            projectionValue
            if (projectionValue == 'orthographic'){
                z = event.wheelDelta > 0 ? z + 0 : z - 0;
            }else if (projectionValue == 'perspective'){
                z = event.wheelDelta > 0 ? z + 1 : z - 1;
            }
        });

        document.onkeydown = function (ev) {
            var step = new Number(document.getElementById("step").value);

            switch (ev.keyCode) {         
                case 38: // Up
                    axisY += step;
                    console.log('UP CAMERA');
                    break;
                
                case 40: // Down
                    axisY -= step;
                    console.log('DOWN CAMERA');
                    break;
                
                default:
                    // If you press another key --> ¡ERROR!
                    console.log('¡ERROR!: You are not pressing the correct key.');
                    step = 0.0;
                    break;
                }
        }
    }

    function drawScene() {
        gl.clear(gl.COLOR_BUFFER_BIT);
        
        projectionValue = document.querySelector('input[name="projection"]:checked').value, 
        daylightValue = document.querySelector('input[name="daylight"]:checked').value,      
        u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
        u_vMatrix = gl.getUniformLocation(gl.program, "u_vMatrix"),
        ratio = canvas.width/canvas.height;
        
        switch (projectionValue) {
            case "perspective":
                var pMatrix = mat4.perspective(mat4.create(), toRadian(60), ratio, 0.1, 100),
                    vMatrix = mat4.lookAt(mat4.create(), [0, axisY, z], [0, 0, 0], [0, 1, 0]);
                break;
        
            case "orthographic":
                var pMatrix = mat4.ortho(mat4.create(), -ratio, ratio, -1.0, 1.50, -1.0, 1.50),
                    vMatrix = mat4.create();
                break;
            default:
        }

        gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
        gl.uniformMatrix4fv(u_vMatrix, false, vMatrix);

        switch(daylightValue){
            case "day":
                var u_Filter = gl.getUniformLocation(gl.program, "u_Filter");
                gl.uniform1f(u_Filter, 1);
                break;

            case "night":
                var u_Filter = gl.getUniformLocation(gl.program, "u_Filter");
                gl.uniform1f(u_Filter, 0);
                break;
        }

        var rotationChecked = document.querySelector('input[name="rotation"]:checked'),
            primitiveValue = document.querySelector('input[name="primitive"]:checked').value,
            mvMatrix = mat4.fromRotation(mat4.create(), count, [0, 0.5, 0]),
            u_mvMatrix = gl.getUniformLocation(gl.program, "u_mvMatrix");

        gl.uniformMatrix4fv(u_mvMatrix, false, mvMatrix);

        switch (primitiveValue) {
            case "triangles":
                primitive = gl.TRIANGLES;
                break;
            case "lines":
                primitive = gl.LINES;
                break;
            default:
        }
        
        // DRAW PRIMITIVE ELEMENTS
        gl.drawElements(primitive, 6 * 3 * 3, gl.UNSIGNED_SHORT, 0);

        var speed = document.getElementById("speed").value;

        if (rotationChecked){
            count += 0.01 * speed;
        }

        // CALL DRAWSCENE AGAIN IN THE NEXT BROWSER REPAINT
        requestAnimationFrame(drawScene);
    }

    function initVertexShader(gl) {
        // Vertexes and Texture Coordinates)
        var vertexesAndTextures = [
        // CUBE POINTS
            // BACK
            -0.50, -0.50, -0.50,    0.5, 0.5, // Vértice 0
             0.50, -0.50, -0.50,    0.0, 0.5, // Vértice 1
             0.50,  0.50, -0.50,    0.0, 1.0, // Vértice 2
            -0.50,  0.50, -0.50,    0.5, 1.0, // Vértice 3

            // FRONT
            -0.50, -0.50,  0.50,    0.5, 0.5, // Vértice 4
             0.50, -0.50,  0.50,    1.0, 0.5, // Vértice 5
             0.50,  0.50,  0.50,    1.0, 1.0, // Vértice 6
            -0.50,  0.50,  0.50,    0.5, 1.0, // Vértice 7
            
            // LEFT
            -0.50, -0.50, -0.50,    0.0, 0.5, // Vértice 8
            -0.50,  0.50, -0.50,    0.0, 1.0, // Vértice 9
            -0.50,  0.50,  0.50,    0.5, 1.0, // Vértice 10
            -0.50, -0.50,  0.50,    0.5, 0.5, // Vértice 11
            
            // RIGHT
             0.50,  -0.50, -0.50,   0.5, 0.5, // Vértice 12
             0.50,   0.50, -0.50,   0.5, 1.0, // Vértice 13
             0.50,   0.50,  0.50,   0.0, 1.0, // Vértice 14
             0.50,  -0.50,  0.50,   0.0, 0.5, // Vértice 15
            
            // BOTTOM 
            -0.50,  -0.50, -0.50,   0.5, 0.7, // Vértice 16
            -0.50,  -0.50,  0.50,   0.7, 0.7, // Vértice 17
             0.50,  -0.50,  0.50,   0.7, 1.0, // Vértice 18
             0.50,  -0.50, -0.50,   0.5, 1.0, // Vértice 19
            
            // TOP
            -0.75,   0.50, -0.75,   0.0, 0.0, // Vértice 20
            -0.75,   0.50,  0.75,   1.0, 0.5, // Vértice 21
             0.75,   0.50,  0.75,   1.0, 0.0, // Vértice 22
             0.75,   0.50, -0.75,   0.0, 0.5, // Vértice 23

        // PYRAMID POINTS
             0.00,   1.00,  0.00,   0.5, 0.5, // Vértice 24
             0.00,   1.00,  0.00,   0.5, 0.5, // Vértice 25
             0.00,   1.00,  0.00,   0.5, 0.5, // Vértice 26
             0.00,   1.00,  0.00,   0.5, 0.5, // Vértice 27
        
        // PYRAMID BASE POINTS
            -0.75,   0.50, -0.75,    1.0, 0.0, // Vértice 28
            -0.75,   0.50,  0.75,    0.0, 0.0, // Vértice 29
             0.75,   0.50,  0.75,    1.0, 0.0, // Vértice 30
             0.75,   0.50, -0.75,    0.0, 0.0  // Vértice 31            

        ];

        // Indexes (for drawing squares using triangles)
        var indexes = [
            0, 1, 2,    // TRIANGLE #1
            0, 2, 3,    // TRIANGLE #2

            4, 5, 6,    // TRIANGLE #3
            4, 6, 7,    // Triangle #4

            8, 9, 10,   // TRIANGLE #5
            8, 10, 11,  // TRIANGLE #6

            12, 13, 14, // TRIANGLE #7
            12, 14, 15, // Triangle #8

            16, 17, 18, // TRIANGLE #9
            16, 18, 19, // TRIANGLE #10

            20, 21, 22, // TRIANGLE #11
            20, 22, 23, // TRIANGLE #12

            24, 28, 31, // TRIANGLE #13
            25, 29, 30, // TRIANGLE #14

            26, 30, 31, // TRIANGLE #15
            27, 28, 29, // TRIANGLE #16

            28, 29, 30, // TRIANGLE #17
            28, 30, 31 // TRIANGLE #18 

        ];

        // Write a_Position and a_Color using gl.ARRAY_BUFFER
        gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexesAndTextures), gl.STATIC_DRAW);

        var vertexPositionAttribute = gl.getAttribLocation(gl.program, "a_Position");
        gl.enableVertexAttribArray(vertexPositionAttribute);
        gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 4 * (3 + 2), 0);

        var vertexColorAttribute = gl.getAttribLocation(gl.program, "a_TexCoord");
        gl.enableVertexAttribArray(vertexColorAttribute);
        gl.vertexAttribPointer(vertexColorAttribute, 2, gl.FLOAT, false, 4 * (3 + 2), 4 * 3);

        // Write indexes in gl.ELEMENT_ARRAY_BUFFER
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexes), gl.STATIC_DRAW);
    }
    
    function toRadian(g){
		return g*Math.PI/180;
	}

    function initProjection(gl, canvas) {
        // Write u_pMatrix
        var pMatrixUniform = gl.getUniformLocation(gl.program, "u_pMatrix"),
            ratio = canvas.width / canvas.height,
            pMatrix = mat4.perspective(mat4.create(), toRadian(60), ratio, 0.1, 100);
        gl.uniformMatrix4fv(pMatrixUniform, false, pMatrix);

        // Write u_vMatrix
        var vMatrixUniform = gl.getUniformLocation(gl.program, "u_vMatrix"),
            vMatrix = mat4.lookAt(mat4.create(), [0, 0, 3], [0, 0, 0], [0, 1, 0]);
        gl.uniformMatrix4fv(vMatrixUniform, false, vMatrix);
    }

    function initTexturesAndDraw(gl) {
        var image0 = new Image(0),
            image1 = new Image(1);
        image0.src = 'house.jpg';
        image1.src = 'dark.gif';
        image0.onload = function (){
            loadTexture(gl, "u_Sampler0", image0, 0, true);
            image1.onload = function (){
                loadTexture(gl, "u_Sampler1", image1, 1, true);
                drawScene();
            }
           
        };
    }

    function loadTexture(gl, samplerUniform, image1, unitNumber, flip) {
        // Flip the image's y axis
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flip);

        // Activate and configure texture
        gl.activeTexture(gl.TEXTURE0 + unitNumber);
        gl.bindTexture(gl.TEXTURE_2D, gl.createTexture());
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image1);

        // Set texture to the sampler
        var fragmentSamplerUniform = gl.getUniformLocation(gl.program, samplerUniform);
        gl.uniform1i(fragmentSamplerUniform, unitNumber);
    }

    function initShaders(gl, vs_source, fs_source){

        // Create Program & Compile shaders 
        var vertexShader = makeShader(gl, vs_source, gl.VERTEX_SHADER),
            fragmentShader = makeShader(gl, fs_source, gl.FRAGMENT_SHADER),
            glProgram = gl.createProgram();

        // Attach and link shaders to the program 
        gl.attachShader(glProgram, vertexShader);
        gl.attachShader(glProgram, fragmentShader);
        gl.linkProgram(glProgram);

        if (!gl.getProgramParameter(glProgram, gl.LINK_STATUS)){
            alert("UNABLE TO INITIALIZE THE SHADER PROGRAM");
            return false;
        }

        /* Use Program */
        gl.useProgram(glProgram);
        gl.program = glProgram;

        return true;
    }

    function makeShader(gl, src, type){

        var shader = gl.createShader(type);
        gl.shaderSource(shader, src);
        gl.compileShader(shader)

        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)){
            alert("ERROR COMPILE SHADER: " + gl.getShaderInfoLog(shader));
            return;     
        }
        return shader;
    }
</script>
