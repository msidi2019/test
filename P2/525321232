<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>WebGL Texturas</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/2.8.1/gl-matrix-min.js"></script>
</head>
<body onload="init()">
    <canvas id="webgl-canvas" width="500" height="500"></canvas><br>
    <b>Decoration</b>
    <input type="radio" name="decoration" value="no" checked> No
    <input type="radio" name="decoration" value="yes"> Yes<br>
    <label for="step">Step:</label>
    <input type="number" id="step" name="step" min="0.1" max="10" value="0.1"><br>
    <button onclick="toggleRotation()">Toggle Rotation</button><br>
    Rotation Speed: <input type="range" id="speed" min="0" max="10" value="1"><br>
    
    <script id="vertex-shader" type="x-shader/x-vertex">
        attribute vec3 a_Position;
        attribute vec2 a_TexCoord;
        varying vec2 v_TexCoord;
        uniform mat4 u_pMatrix;
        uniform mat4 u_mvMatrix;
        
        void main() {
            gl_Position = u_pMatrix * u_mvMatrix * vec4(a_Position, 1.0);
            v_TexCoord = a_TexCoord;
        }
    </script>
    
    <script id="fragment-shader" type="x-shader/x-fragment">
        precision mediump float;
        varying vec2 v_TexCoord;
        uniform sampler2D u_Sampler0;
        uniform sampler2D u_Sampler1;
        void main() {
            gl_FragColor = texture2D(u_Sampler0, v_TexCoord);
            if (v_TexCoord.y > 0.5 && v_TexCoord.x > 0.2 && v_TexCoord.x < 0.8) {
                gl_FragColor += texture2D(u_Sampler1, v_TexCoord);
            }
        }
    </script>
    
    <script>
        var gl;
        var rotationChecked = true;
        var count = 0;
        
        function init() {
            var canvas = document.getElementById("webgl-canvas");
            gl = canvas.getContext("webgl");
            if (!gl) {
                alert("Unable to initialize WebGL. Your browser may not support it.");
                return;
            }
            
            var vs_source = document.getElementById("vertex-shader").text;
            var fs_source = document.getElementById("fragment-shader").text;
            
            if (!initShaders(gl, vs_source, fs_source)) {
                return;
            }
            
            initVertexShader(gl);
            initProjection(gl, canvas);
            initTexturesAndDraw(gl);
        }
        
        function drawScene() {
            gl.clearColor(0.0, 0.0, 0.0, 1.0);
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            gl.enable(gl.DEPTH_TEST);
            
            var primitive;
            var primitiveValue = "triangles"; // Assuming default primitive value is triangles
            
            // Set the model-view matrix
            var mvMatrix = mat4.create();
            mat4.rotateY(mvMatrix, mvMatrix, count);
            var u_mvMatrix = gl.getUniformLocation(gl.program, "u_mvMatrix");
            gl.uniformMatrix4fv(u_mvMatrix, false, mvMatrix);
            
            switch (primitiveValue) {
                case "triangles":
                    primitive = gl.TRIANGLES;
                    break;
                case "lines":
                    primitive = gl.LINES;
                    break;
                default:
            }
            
            // DRAW PRIMITIVE ELEMENTS
            gl.drawElements(primitive, 6 * 3 * 3, gl.UNSIGNED_SHORT, 0);
            
            var speed = document.getElementById("speed").value;
            
            if (rotationChecked) {
                count += 0.01 * speed;
            }
            
            // CALL DRAWSCENE AGAIN IN THE NEXT BROWSER REPAINT
            requestAnimationFrame(drawScene);
        }
        
        function initVertexShader(gl) {
            // Vertexes and Texture Coordinates
            var vertexesAndTextures = [
    // Coordenadas XYZ de los vértices, seguidas de coordenadas de textura UV
    // Cara frontal (columnas con puerta)
    -0.5, -0.5, 0.5, 0.0, 0.5,  // Vértice 0
     0.5, -0.5, 0.5, 1.0, 0.5,  // Vértice 1
     0.5,  0.5, 0.5, 1.0, 0.0,  // Vértice 2
    -0.5,  0.5, 0.5, 0.0, 0.0,  // Vértice 3

    // Cara izquierda (ventana)
    // Coordenadas y coordenadas de textura para la cara izquierda
    -0.5, -0.5, -0.5, 0.0, 0.5, // Vértice 4
    -0.5,  0.5, -0.5, 1.0, 0.5, // Vértice 5
    -0.5,  0.5,  0.5, 1.0, 0.0, // Vértice 6
    -0.5, -0.5,  0.5, 0.0, 0.0, // Vértice 7

    // Cara derecha (ventana)
    // Coordenadas y coordenadas de textura para la cara derecha
     0.5, -0.5, -0.5, 0.0, 0.5, // Vértice 8
     0.5,  0.5, -0.5, 1.0, 0.5, // Vértice 9
     0.5,  0.5,  0.5, 1.0, 0.0, // Vértice 10
     0.5, -0.5,  0.5, 0.0, 0.0, // Vértice 11

    // Cara trasera (ventana)
    // Coordenadas y coordenadas de textura para la cara trasera
    -0.5, -0.5, -0.5, 1.0, 0.5, // Vértice 12
    -0.5,  0.5, -0.5, 1.0, 1.0, // Vértice 13
     0.5,  0.5, -0.5, 0.0, 1.0, // Vértice 14
     0.5, -0.5, -0.5, 0.0, 0.5, // Vértice 15

    // Cara inferior (ventana)
    // Coordenadas y coordenadas de textura para la cara inferior
    -0.5, -0.5, -0.5, 0.5, 0.0, // Vértice 16
    -0.5, -0.5,  0.5, 0.5, 0.5, // Vértice 17
     0.5, -0.5,  0.5, 1.0, 0.5, // Vértice 18
     0.5, -0.5, -0.5, 1.0, 0.0, // Vértice 19

    // Cara superior (tejas)
    // Coordenadas y coordenadas de textura para la cara superior
    -0.5,  0.5, -0.5, 0.0, 0.0, // Vértice 20
    -0.5,  0.5,  0.5, 0.0, 1.0, // Vértice 21
     0.5,  0.5,  0.5, 1.0, 1.0, // Vértice 22
     0.5,  0.5, -0.5, 1.0, 0.0  // Vértice 23
];

var indexes = [
    // Índices para los triángulos de cada cara
    // Cara frontal
    0, 1, 2,
    0, 2, 3,

    // Cara izquierda
    4, 5, 6,
    4, 6, 7,

    // Cara derecha
    8, 9, 10,
    8, 10, 11,

    // Cara trasera
    12, 13, 14,
    12, 14, 15,

    // Cara inferior
    16, 17, 18,
    16, 18, 19,

    // Cara superior
    20, 21, 22,
    20, 22, 23
];


            // Write a_Position and a_Color using gl.ARRAY_BUFFER
            gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexesAndTextures), gl.STATIC_DRAW);

            var vertexPositionAttribute = gl.getAttribLocation(gl.program, "a_Position");
            gl.enableVertexAttribArray(vertexPositionAttribute);
            gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 4 * (3 + 2), 0);

            var vertexColorAttribute = gl.getAttribLocation(gl.program, "a_TexCoord");
            gl.enableVertexAttribArray(vertexColorAttribute);
            gl.vertexAttribPointer(vertexColorAttribute, 2, gl.FLOAT, false, 4 * (3 + 2), 4 * 3);

            // Write indexes in gl.ELEMENT_ARRAY_BUFFER
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexes), gl.STATIC_DRAW);
        }

        function initProjection(gl, canvas) {
            // Write u_pMatrix
            var pMatrixUniform = gl.getUniformLocation(gl.program, "u_pMatrix"),
                ratio = canvas.width / canvas.height,
                pMatrix = mat4.perspective(mat4.create(), toRadian(60), ratio, 0.1, 100);
            gl.uniformMatrix4fv(pMatrixUniform, false, pMatrix);

            // Write u_vMatrix
            var vMatrixUniform = gl.getUniformLocation(gl.program, "u_vMatrix"),
                vMatrix = mat4.lookAt(mat4.create(), [0, 0, 3], [0, 0, 0], [0, 1, 0]);
            gl.uniformMatrix4fv(vMatrixUniform, false, vMatrix);
        }

        function initTexturesAndDraw(gl) {
            var image0 = new Image(0),
                image1 = new Image(1);
            image0.src = 'portal.jpg';
            image1.src = 'light.jpg';
            image0.onload = function () {
                loadTexture(gl, "u_Sampler0", image0, 0, true);
                image1.onload = function () {
                    loadTexture(gl, "u_Sampler1", image1, 1, true);
                    drawScene();
                }

            };
        }

        function loadTexture(gl, samplerUniform, image1, unitNumber, flip) {
            // Flip the image's y axis
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flip);

            // Activate and configure texture
            gl.activeTexture(gl.TEXTURE0 + unitNumber);
            gl.bindTexture(gl.TEXTURE_2D, gl.createTexture());
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image1);

            // Set texture to the sampler
            var fragmentSamplerUniform = gl.getUniformLocation(gl.program, samplerUniform);
            gl.uniform1i(fragmentSamplerUniform, unitNumber);
        }

        function initShaders(gl, vs_source, fs_source) {

            // Create Program & Compile shaders 
            var vertexShader = makeShader(gl, vs_source, gl.VERTEX_SHADER),
                fragmentShader = makeShader(gl, fs_source, gl.FRAGMENT_SHADER),
                glProgram = gl.createProgram();

            // Attach and link shaders to the program 
            gl.attachShader(glProgram, vertexShader);
            gl.attachShader(glProgram, fragmentShader);
            gl.linkProgram(glProgram);

            if (!gl.getProgramParameter(glProgram, gl.LINK_STATUS)) {
                alert("UNABLE TO INITIALIZE THE SHADER PROGRAM");
                return false;
            }

            /* Use Program */
            gl.useProgram(glProgram);
            gl.program = glProgram;

            return true;
        }

        function makeShader(gl, src, type) {

            var shader = gl.createShader(type);
            gl.shaderSource(shader, src);
            gl.compileShader(shader)

            if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
                alert("ERROR COMPILE SHADER: " + gl.getShaderInfoLog(shader));
                return;
            }
            return shader;
        }

        function toRadian(g) {
            return g * Math.PI / 180;
        }

        function toggleRotation() {
            rotationChecked = !rotationChecked;
        }
    </script>
</body>
</html>

