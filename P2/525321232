<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/2.8.1/gl-matrix-min.js"></script>
    <title>Ejercicio 5</title>
</head>

<body onload="init()">
    <canvas id="myCanvas" width="640" height="480"></canvas><br>
    <b>Rotation</b>
    <input type="checkbox" name="rotation" checked>
    <input type="range" id="speed" min="1" max="3" value="1" step="1"> Speed<br>
    <b>WebGL primitive</b>
    <input type="radio" name="primitive" value="triangles" checked> Triangles
    <input type="radio" name="primitive" value="lines"> Lines<br>
    <b>Projection type</b>
    <input type="radio" name="projection" value="perspective" checked> Perspective
    <input type="radio" name="projection" value="orthographic"> Orthographic<br>
    <b>Decoration</b>
    <input type="radio" name="decoration" value="no" checked> No
    <input type="radio" name="decoration" value="yes"> Yes<br>
    Step: <input type="number" id="step" value="0.1"><br>

    <script id="shaderVs" type="x-shader/x-vertex">
        attribute vec4 a_Position;
        attribute vec3 a_Color;
        attribute vec2 a_TexCoord;
        uniform mat4 u_pMatrix;
        uniform mat4 u_vMatrix;
        uniform mat4 u_mvMatrix;
        varying highp vec4 v_Color;
        varying highp vec2 v_TexCoord;
        void main(){
            gl_Position = u_pMatrix * u_vMatrix * u_mvMatrix * a_Position;
            v_Color = vec4(a_Color, 1.0);
            v_TexCoord = a_TexCoord;
        }
    </script>

    <script id="shaderFs" type="x-shader/x-fragment">
        varying highp vec4 v_Color;
        varying highp vec2 v_TexCoord;
        uniform sampler2D u_Sampler0;
        uniform sampler2D u_Sampler1;
        uniform int u_Decoration;
        void main(){
            if (u_Decoration == 1) {
                gl_FragColor = texture2D(u_Sampler1, v_TexCoord);
            } else {
                gl_FragColor = texture2D(u_Sampler0, v_TexCoord);
            }
        }
    </script>

    <script>
        var gl,
            canvas,
            count = 0.0,
            ratio,
            z = 3,
            projectionValue = document.querySelector('input[name="projection"]:checked').value;

        function init(){
            
            // Get canvas object from the DOM and Init WebGL Context
            canvas = document.getElementById("myCanvas");
            gl = canvas.getContext("webgl");

            if (!gl) {
            console.log("FAILED TO GET THE RENDERING CONTEXT FOR WEBGL.");
            return;
            }

            // Init Shaders 
            var vs = document.getElementById('shaderVs').innerHTML,
                fs = document.getElementById('shaderFs').innerHTML;

            if (!initShaders(gl, vs, fs)){
            console.log("FAILED TO INITIALIZE SHADERS.");
            return;
            }

            // Init vertex shader
            initVertexShader(gl);

            // Init projection matrix
            initProjection(gl, canvas);

            // Set clear canvas color
            gl.clearColor(0.0, 0.0, 0.0, 1.0);

            // Hidden surface removal
            gl.enable(gl.DEPTH_TEST);

            // Event listener for mouse wheel
            document.addEventListener('wheel', function (event) {
                if (projectionValue == 'perspective'){
                    z = event.deltaY > 0 ? z - 1 : z + 1;
                }
            });

            // Event listener for radio buttons
            document.querySelectorAll('input[type=radio]').forEach(function(radio) {
                radio.addEventListener('change', drawScene);
            });

            // Event listener for speed input
            document.getElementById('speed').addEventListener('input', drawScene);

            // Event listener for step input
            document.getElementById('step').addEventListener('input', drawScene);

            // Event listener for keyboard input
            document.addEventListener('keydown', function (event) {
                var step = parseFloat(document.getElementById("step").value);
                switch (event.key) {
                    case "ArrowUp":
                        elevateCamera(step);
                        break;
                    case "ArrowDown":
                        lowerCamera(step);
                        break;
                    default:
                        return;
                }
                drawScene();
            });

            initTexturesAndDraw(gl);
        }

        function drawScene() {
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            
            projectionValue = document.querySelector('input[name="projection"]:checked').value,
            u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
            u_vMatrix = gl.getUniformLocation(gl.program, "u_vMatrix"),
            ratio = canvas.width/canvas.height;
            
            switch (projectionValue) {
                case "perspective":
                    var pMatrix = mat4.perspective(mat4.create(), toRadian(60), ratio, 0.1, 100),
                        vMatrix = mat4.lookAt(mat4.create(), [0, 0, z], [0, 0, 0], [0, 1, 0]);
                    break;
            
                case "orthographic":
                    var pMatrix = mat4.ortho(mat4.create(), -ratio, ratio, -1.0, 1.50, -1.0, 1.50),
                        vMatrix = mat4.create();
                    break;
                default:
            }

            gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
            gl.uniformMatrix4fv(u_vMatrix, false, vMatrix);

            var rotationChecked = document.querySelector('input[name="rotation"]').checked,
                primitiveValue = document.querySelector('input[name="primitive"]:checked').value,
                mvMatrix = mat4.fromRotation(mat4.create(), count, [0, 1, 0]),
                u_mvMatrix = gl.getUniformLocation(gl.program, "u_mvMatrix");

            gl.uniformMatrix4fv(u_mvMatrix, false, mvMatrix);

            var speed = parseInt(document.getElementById("speed").value);

            if (rotationChecked){
                count += 0.01 * speed;
            }

            var decorationValue = document.querySelector('input[name="decoration"]:checked').value,
                u_Decoration = gl.getUniformLocation(gl.program, "u_Decoration");

            gl.uniform1i(u_Decoration, decorationValue === 'yes' ? 1 : 0);

            switch (primitiveValue) {
                case "triangles":
                    // DRAW PRIMITIVE ELEMENTS FOR FIRST CUBE
                    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);
                    // DRAW PRIMITIVE ELEMENTS FOR SECOND CUBE
                    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 6 * 2);
                    break;
                case "lines":
                    // DRAW PRIMITIVE ELEMENTS FOR FIRST CUBE
                    gl.drawElements(gl.LINE_LOOP, 4, gl.UNSIGNED_SHORT, 0);
                    // DRAW PRIMITIVE ELEMENTS FOR SECOND CUBE
                    gl.drawElements(gl.LINE_LOOP, 4, gl.UNSIGNED_SHORT, 4 * 2);
                    break;
                default:
            }
        }

        function initVertexShader(gl){
            var vertices = new Float32Array([
                // First cube
                -0.5,  0.5,  0.5,    1.0, 0.0, 0.0,   0.0, 1.0,
                -0.5, -0.5,  0.5,    1.0, 0.0, 0.0,   0.0, 0.0,
                 0.5,  0.5,  0.5,    1.0, 0.0, 0.0,   1.0, 1.0,
                 0.5, -0.5,  0.5,    1.0, 0.0, 0.0,   1.0, 0.0,
                // Second cube
                -0.5,  0.5, -0.5,    0.0, 1.0, 0.0,   0.0, 1.0,
                -0.5, -0.5, -0.5,    0.0, 1.0, 0.0,   0.0, 0.0,
                 0.5,  0.5, -0.5,    0.0, 1.0, 0.0,   1.0, 1.0,
                 0.5, -0.5, -0.5,    0.0, 1.0, 0.0,   1.0, 0.0
            ]);

            var indices = new Uint16Array([
                // First cube
                0, 1, 2, 3,
                // Second cube
                4, 5, 6, 7
            ]);

            var FSIZE = vertices.BYTES_PER_ELEMENT;

            // Create a buffer object
            var vertexBuffer = gl.createBuffer();
            var indexBuffer = gl.createBuffer();

            // Write vertex information to buffer object
            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);

            // Bind the buffer object to target
            var a_Position = gl.getAttribLocation(gl.program, "a_Position");
            gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, FSIZE * 8, 0);
            gl.enableVertexAttribArray(a_Position);

            var a_Color = gl.getAttribLocation(gl.program, "a_Color");
            gl.vertexAttribPointer(a_Color, 3, gl.FLOAT, false, FSIZE * 8, FSIZE * 3);
            gl.enableVertexAttribArray(a_Color);

            var a_TexCoord = gl.getAttribLocation(gl.program, "a_TexCoord");
            gl.vertexAttribPointer(a_TexCoord, 2, gl.FLOAT, false, FSIZE * 8, FSIZE * 6);
            gl.enableVertexAttribArray(a_TexCoord);

            gl.bindBuffer(gl.ARRAY_BUFFER, null);

            // Write the indices to the buffer object
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, gl.STATIC_DRAW);
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
        }

        function initProjection(gl, canvas){
            var u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix");
            var ratio = canvas.width/canvas.height;

            var pMatrix = mat4.perspective(mat4.create(), toRadian(60), ratio, 0.1, 100);
            gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
        }

        function toRadian(angle){
            return angle * Math.PI / 180.0;
        }

        function initTexturesAndDraw(gl) {
            var image0 = new Image();
            image0.src = 'portal.jpg';
            var image1 = new Image();
            image1.src = 'light.jpg';
            image0.onload = function () {
                loadTexture(gl, "u_Sampler0", image0, 0, true);
                image1.onload = function () {
                    loadTexture(gl, "u_Sampler1", image1, 1, true);
                    drawScene();
                };
            };
        }

        function loadTexture(gl, samplerUniform, image, unitNumber, flip) {
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, flip);
            gl.activeTexture(gl.TEXTURE0 + unitNumber);
            gl.bindTexture(gl.TEXTURE_2D, gl.createTexture());
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
            if (isPowerOf2(image.width) && isPowerOf2(image.height)) {
                gl.generateMipmap(gl.TEXTURE_2D);
            } else {
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
            }
            var fragmentSamplerUniform = gl.getUniformLocation(gl.program, samplerUniform);
            gl.uniform1i(fragmentSamplerUniform, unitNumber);
        }

        function isPowerOf2(value) {
            return (value & (value - 1)) == 0;
        }

        function elevateCamera(step) {
            // Implementar lógica para elevar la cámara mirando al arco
        }

        function lowerCamera(step) {
            // Implementar lógica para descender la cámara mirando al arco
        }
    </script>
</body>
</html>
