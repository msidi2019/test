<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Portal 3D</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/2.8.1/gl-matrix-min.js"></script>
</head>

<body onload="init()">
    <canvas id="webgl-canvas" width="800" height="600"></canvas><br>
    <b>Decoration</b>
    <input type="radio" name="decoration" value="no" checked onclick="toggleDecoration()"> No
    <input type="radio" name="decoration" value="yes" onclick="toggleDecoration()"> Yes<br>

    <script id="vertex-shader" type="x-shader/x-vertex">
        attribute vec4 a_Position;
        attribute vec4 a_Color;
        attribute vec2 a_TexCoord;

        varying vec4 v_Color;
        varying vec2 v_TexCoord;

        uniform mat4 u_mMatrix;
        uniform mat4 u_vMatrix;
        uniform mat4 u_pMatrix;

        void main() {
            gl_Position = u_pMatrix * u_vMatrix * u_mMatrix * a_Position;
            v_Color = a_Color;
            v_TexCoord = a_TexCoord;
        }
    </script>

    <script id="fragment-shader" type="x-shader/x-fragment">
        precision mediump float;

        varying vec4 v_Color;
        varying vec2 v_TexCoord;

        uniform sampler2D u_Sampler;
        uniform bool u_Decoration; // Flag to enable/disable decoration

        void main() {
            vec4 textureColor = texture2D(u_Sampler, v_TexCoord);

            if (u_Decoration) {
                // If decoration is enabled, apply light texture to the arch
                vec4 lightTextureColor = texture2D(u_Sampler, v_TexCoord);
                gl_FragColor = lightTextureColor * v_Color;
            } else {
                // Otherwise, use original texture
                gl_FragColor = textureColor * v_Color;
            }
        }
    </script>

    <script>
        var gl;
        var u_Decoration;
        var decorationEnabled = false;

        function init() {
            var canvas = document.getElementById('webgl-canvas');
            gl = canvas.getContext('webgl');
            if (!gl) {
                console.log("Unable to initialize WebGL. Your browser may not support it.");
                return;
            }

            var vertexShaderSource = document.getElementById('vertex-shader').text;
            var fragmentShaderSource = document.getElementById('fragment-shader').text;
            var vertexShader = gl.createShader(gl.VERTEX_SHADER);
            gl.shaderSource(vertexShader, vertexShaderSource);
            gl.compileShader(vertexShader);
            if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
                console.error("Vertex shader compilation failed:", gl.getShaderInfoLog(vertexShader));
                return;
            }

            var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
            gl.shaderSource(fragmentShader, fragmentShaderSource);
            gl.compileShader(fragmentShader);
            if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
                console.error("Fragment shader compilation failed:", gl.getShaderInfoLog(fragmentShader));
                return;
            }

            var program = gl.createProgram();
            gl.attachShader(program, vertexShader);
            gl.attachShader(program, fragmentShader);
            gl.linkProgram(program);
            if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
                console.error("Program linking failed:", gl.getProgramInfoLog(program));
                return;
            }
            gl.useProgram(program);
            gl.program = program;

            initVertexBuffer(gl);
            initTextures(gl);
            initProjection(gl, canvas);

            // Get uniform location for decoration flag
            u_Decoration = gl.getUniformLocation(gl.program, 'u_Decoration');

            document.addEventListener('keydown', handleKeyDown);
        }

        function initVertexBuffer(gl) {
            // Define vertexes and texture coordinates
            var vertexesAndColors = [
                // Vertices        Colors              Texture coords
                // FRONT - ROJO
                -0.25, -0.50, 0.25, 1.0, 0.0, 0.0, 0.0, 1.0, // Vértice 0
                0.25, -0.50, 0.25, 1.0, 0.0, 0.0, 1.0, 1.0, // Vértice 1
                0.25, 0.50, 0.25, 1.0, 0.0, 0.0, 1.0, 0.0, // Vértice 2
                -0.25, 0.50, 0.25, 1.0, 0.0, 0.0, 0.0, 0.0, // Vértice 3
                // LEFT - AMARILLO
                -0.25, -0.50, -0.25, 1.0, 1.0, 0.0, 0.0, 1.0, // Vértice 4
                -0.25, 0.50, -0.25, 1.0, 1.0, 0.0, 0.0, 0.0, // Vértice 5
                -0.25, 0.50, 0.25, 1.0, 1.0, 0.0, 1.0, 0.0, // Vértice 6
                -0.25, -0.50, 0.25, 1.0, 1.0, 0.0, 1.0, 1.0, // Vértice 7
                // RIGHT - VERDE
                0.25, -0.50, -0.25, 0.0, 1.0, 0.0, 0.0, 1.0, // Vértice 8
                0.25, 0.50, -0.25, 0.0, 1.0, 0.0, 0.0, 0.0, // Vértice 9
                0.25, 0.50, 0.25, 0.0, 1.0, 0.0, 1.0, 0.0, // Vértice 10
                0.25, -0.50, 0.25, 0.0, 1.0, 0.0, 1.0, 1.0, // Vértice 11
                // BOTTOM - TURQUESA
                -0.25, -0.50, -0.25, 0.0, 1.0, 1.0, 0.0, 1.0, // Vértice 12
                0.25, -0.50, -0.25, 0.0, 1.0, 1.0, 1.0, 1.0, // Vértice 13
                0.25, -0.50, 0.25, 0.0, 1.0, 1.0, 1.0, 0.0, // Vértice 14
                -0.25, -0.50, 0.25, 0.0, 1.0, 1.0, 0.0, 0.0, // Vértice 15
                // BACK - AZUL
                0.25, -0.50, -0.25, 0.0, 0.0, 1.0, 0.0, 1.0, // Vértice 16
                -0.25, -0.50, -0.25, 0.0, 0.0, 1.0, 1.0, 1.0, // Vértice 17
                -0.25, 0.50, -0.25, 0.0, 0.0, 1.0, 1.0, 0.0, // Vértice 18
                0.25, 0.50, -0.25, 0.0, 0.0, 1.0, 0.0, 0.0, // Vértice 19
                // TEJADO - BLANCO
                -0.5, 0.50, 0.0, 1.0, 1.0, 1.0, 0.0, 0.5, // Vértice 20
                0.5, 0.50, 0.0, 1.0, 1.0, 1.0, 1.0, 0.5, // Vértice 21
                0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.5, 1.0  // Vértice 22
            ];

            // Indices of the vertices
            var indexes = [
                // Front
                0, 1, 2, 0, 2, 3,
                // Left
                4, 5, 6, 4, 6, 7,
                // Right
                8, 9, 10, 8, 10, 11,
                // Bottom
                12, 13, 14, 12, 14, 15,
                // Back
                16, 17, 18, 16, 18, 19,
                // Roof
                20, 21, 22
            ];

            var FSIZE = vertexesAndColors.BYTES_PER_ELEMENT;

            var vertexBuffer = gl.createBuffer();
            if (!vertexBuffer) {
                console.log("FAILED TO CREATE THE BUFFER OBJECT FOR VERTICES.");
                return -1;
            }

            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexesAndColors), gl.STATIC_DRAW);

            var a_Position = gl.getAttribLocation(gl.program, 'a_Position');
            if (a_Position < 0) {
                console.log("FAILED TO GET THE STORAGE LOCATION OF A_POSITION.");
                return -1;
            }

            gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, FSIZE * 8, 0);
            gl.enableVertexAttribArray(a_Position);

            var a_Color = gl.getAttribLocation(gl.program, 'a_Color');
            if (a_Color < 0) {
                console.log("FAILED TO GET THE STORAGE LOCATION OF A_COLOR.");
                return -1;
            }

            gl.vertexAttribPointer(a_Color, 3, gl.FLOAT, false, FSIZE * 8, FSIZE * 3);
            gl.enableVertexAttribArray(a_Color);

            // Add texture coordinates
            var a_TexCoord = gl.getAttribLocation(gl.program, 'a_TexCoord');
            if (a_TexCoord < 0) {
                console.log("FAILED TO GET THE STORAGE LOCATION OF A_TEXCOORD.");
                return -1;
            }

            gl.vertexAttribPointer(a_TexCoord, 2, gl.FLOAT, false, FSIZE * 8, FSIZE * 6);
            gl.enableVertexAttribArray(a_TexCoord);

            // Index buffer
            var indexBuffer = gl.createBuffer();
            if (!indexBuffer) {
                console.log("FAILED TO CREATE THE BUFFER OBJECT FOR INDEXES.");
                return -1;
            }

            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexes), gl.STATIC_DRAW);
        }

        function initTextures(gl) {
            var textures = [];

            var images = ['portal.jpg', 'light.jpg'];
            var promises = images.map(function (url) {
                return new Promise(function (resolve, reject) {
                    var image = new Image();
                    image.onload = function () {
                        textures.push(initTexture(gl, image));
                        resolve();
                    };
                    image.src = url;
                });
            });

            Promise.all(promises).then(function () {
                drawScene(gl, textures);
            });
        }

        function initTexture(gl, image) {
            var texture = gl.createTexture();
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.bindTexture(gl.TEXTURE_2D, null);
            return texture;
        }

        function drawScene(gl, textures) {
            gl.clearColor(0.0, 0.0, 0.0, 1.0);
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

            var u_Sampler = gl.getUniformLocation(gl.program, 'u_Sampler');
            var texture = textures[0];
            gl.activeTexture(gl.TEXTURE0);
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.uniform1i(u_Sampler, 0);

            // Enable/disable decoration
            gl.uniform1i(u_Decoration, decorationEnabled ? 1 : 0);

            gl.drawElements(gl.TRIANGLES, 18, gl.UNSIGNED_SHORT, 0);

            // Draw roof
            texture = textures[1];
            gl.activeTexture(gl.TEXTURE0);
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.uniform1i(u_Sampler, 0);

            gl.drawElements(gl.TRIANGLES, 3, gl.UNSIGNED_SHORT, 18 * Uint16Array.BYTES_PER_ELEMENT);
        }

        function initProjection(gl, canvas) {
            var u_pMatrix = gl.getUniformLocation(gl.program, 'u_pMatrix');
            var pMatrix = mat4.create();
            mat4.perspective(pMatrix, Math.PI / 4, canvas.width / canvas.height, 1, 100);
            gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);

            var u_vMatrix = gl.getUniformLocation(gl.program, 'u_vMatrix');
            var vMatrix = mat4.create();
            mat4.lookAt(vMatrix, [0, 0, 2], [0, 0, 0], [0, 1, 0]);
            gl.uniformMatrix4fv(u_vMatrix, false, vMatrix);

            var u_mMatrix = gl.getUniformLocation(gl.program, 'u_mMatrix');
            var mMatrix = mat4.create();
            gl.uniformMatrix4fv(u_mMatrix, false, mMatrix);
        }

        function toggleDecoration() {
            decorationEnabled = !decorationEnabled;
            drawScene(gl, textures);
        }

        function handleKeyDown(event) {
            var step = 0.1; // Default step
            var key = event.key;
            switch (key) {
                case "ArrowUp":
                    moveCameraUp(step);
                    break;
                case "ArrowDown":
                    moveCameraDown(step);
                    break;
            }
        }

        function moveCameraUp(step) {
            var u_vMatrix = gl.getUniformLocation(gl.program, 'u_vMatrix');
            var vMatrix = mat4.create();
            mat4.lookAt(vMatrix, [0, step, 2], [0, 0, 0], [0, 1, 0]);
            gl.uniformMatrix4fv(u_vMatrix, false, vMatrix);
            drawScene(gl, textures);
        }

        function moveCameraDown(step) {
            var u_vMatrix = gl.getUniformLocation(gl.program, 'u_vMatrix');
            var vMatrix = mat4.create();
            mat4.lookAt(vMatrix, [0, -step, 2], [0, 0, 0], [0, 1, 0]);
            gl.uniformMatrix4fv(u_vMatrix, false, vMatrix);
            drawScene(gl, textures);
        }
    </script>
</body>

</html>
