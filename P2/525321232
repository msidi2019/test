<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WebGL</title>
</head>
<body>
    <canvas id="webgl-canvas" width="600" height="400"></canvas>
    <br/>
    <input type="radio" name="projection" value="perspective" checked>Perspective
    <input type="radio" name="projection" value="orthographic">Orthographic
    <br/><br/>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/2.8.1/gl-matrix-min.js"></script>
    <script id="vertex-shader" type="x-shader/x-vertex">
        attribute vec3 a_Position;
        attribute vec3 a_Color;
        attribute vec2 a_TextureCoord;
        varying vec3 v_Color;
        varying vec2 v_TextureCoord;
        uniform mat4 u_mMatrix;
        uniform mat4 u_vMatrix;
        uniform mat4 u_pMatrix;
        
        void main() {
            gl_Position = u_pMatrix * u_vMatrix * u_mMatrix * vec4(a_Position, 1.0);
            v_Color = a_Color;
            v_TextureCoord = a_TextureCoord;
        }
    </script>

    <script id="fragment-shader" type="x-shader/x-fragment">
        precision mediump float;
        varying vec3 v_Color;
        varying vec2 v_TextureCoord;
        uniform sampler2D u_Texture;
        
        void main() {
            // gl_FragColor = vec4(v_Color, 1.0);
            gl_FragColor = texture2D(u_Texture, v_TextureCoord);
        }
    </script>

    <script>
        var canvas = document.getElementById("webgl-canvas");
        var gl = canvas.getContext("webgl");

        var vs_source = document.getElementById("vertex-shader").innerText;
        var fs_source = document.getElementById("fragment-shader").innerText;

        if (!initShaders(gl, vs_source, fs_source)) {
            console.error("Error initializing shaders");
        }

        var vertexesAndColors = [
            // Vértices
            -0.75, 0.50, 0.25, 1.0, 0.0, 0.0, 0.0, 0.0, // Vértice 0
            0.75, 0.50, 0.25, 1.0, 1.0, 0.0, 0.0, 1.0, // Vértice 1
            0.75, -0.50, 0.25, 0.0, 1.0, 0.0, 1.0, 1.0, // Vértice 2
            -0.75, -0.50, 0.25, 0.0, 0.0, 1.0, 1.0, 0.0, // Vértice 3
            -0.75, 0.50, -0.25, 0.0, 1.0, 1.0, 0.0, 1.0, // Vértice 4
            0.75, 0.50, -0.25, 1.0, 0.0, 1.0, 1.0, 0.0, // Vértice 5
            0.75, -0.50, -0.25, 1.0, 1.0, 0.0, 1.0, 1.0, // Vértice 6
            -0.75, -0.50, -0.25, 0.0, 1.0, 1.0, 1.0, 0.0, // Vértice 7
            // Decoración navideña
            // Vértices
            -0.25, 0.50, -0.25, 1.0, 0.0, 0.0, 0.0, 0.0, // Vértice 48
            0.0, 1.50, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, // Vértice 49
            0.25, 0.50, -0.25, 1.0, 0.0, 0.0, 0.0, 0.0, // Vértice 50
            -0.25, -0.50, -0.25, 1.0, 0.0, 0.0, 0.0, 0.0, // Vértice 51
            0.25, -0.50, -0.25, 1.0, 0.0, 0.0, 0.0, 0.0, // Vértice 52
            // SIDE 1 - VERDE
            -0.25, -0.50, -0.25, 0.0, 1.0, 0.0, 0.0, 1.0, // Vértice 53
            0.25, 0.50, -0.25, 0.0, 1.0, 0.0, 1.0, 0.0, // Vértice 54
            -0.75, -0.50, 0.25, 0.0, 1.0, 0.0, 1.0, 1.0, // Vértice 55
            // SIDE 2 - AZUL
            0.75, -0.50, -0.25, 0.0, 0.0, 1.0, 0.0, 1.0, // Vértice 56
            0.25, 0.50, -0.25, 0.0, 0.0, 1.0, 1.0, 0.0, // Vértice 57
            -0.75, -0.50, 0.25, 0.0, 0.0, 1.0, 1.0, 1.0, // Vértice 58
            // SIDE 3 - ROJO
            -0.25, -0.50, -0.25, 1.0, 0.0, 0.0, 0.0, 1.0, // Vértice 59
            0.25, 0.50, -0.25, 1.0, 0.0, 0.0, 1.0, 0.0, // Vértice 60
            0.75, 0.50, 0.25, 1.0, 0.0, 0.0, 1.0, 1.0, // Vértice 61
            // SIDE 4 - AMARILLO
            -0.25, -0.50, -0.25, 1.0, 1.0, 0.0, 0.0, 1.0, // Vértice 62
            -0.75, 0.50, 0.25, 1.0, 1.0, 0.0, 1.0, 0.0, // Vértice 63
            0.75, 0.50, 0.25, 1.0, 1.0, 0.0, 1.0, 1.0, // Vértice 64
        ];

        var indices = [
            // Primera cara
            0, 1, 2,
            0, 2, 3,
            // Segunda cara
            4, 5, 6,
            4, 6, 7,
            // Tercera cara
            0, 4, 7,
            0, 7, 3,
            // Cuarta cara
            1, 5, 6,
            1, 6, 2,
            // Quinta cara
            0, 1, 5,
            0, 5, 4,
            // Sexta cara
            2, 6, 7,
            2, 7, 3,
            // Decoración navideña
            // Vértices
            48, 49, 50,
            51, 49, 52,
            // Caras
            // Verde
            53, 54, 55,
            // Azul
            56, 57, 58,
            // Rojo
            59, 60, 61,
            // Amarillo
            62, 63, 64,
        ];

        var vertexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexesAndColors), gl.STATIC_DRAW);

        var FSIZE = vertexesAndColors.BYTES_PER_ELEMENT;

        var a_Position = gl.getAttribLocation(gl.program, 'a_Position');
        gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, FSIZE * 8, 0);
        gl.enableVertexAttribArray(a_Position);

        var a_Color = gl.getAttribLocation(gl.program, 'a_Color');
        gl.vertexAttribPointer(a_Color, 3, gl.FLOAT, false, FSIZE * 8, FSIZE * 3);
        gl.enableVertexAttribArray(a_Color);

        var a_TextureCoord = gl.getAttribLocation(gl.program, 'a_TextureCoord');
        gl.vertexAttribPointer(a_TextureCoord, 2, gl.FLOAT, false, FSIZE * 8, FSIZE * 6);
        gl.enableVertexAttribArray(a_TextureCoord);

        var indexBuffer = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indices), gl.STATIC_DRAW);

        var u_mMatrix = gl.getUniformLocation(gl.program, 'u_mMatrix');
        var u_vMatrix = gl.getUniformLocation(gl.program, 'u_vMatrix');
        var u_pMatrix = gl.getUniformLocation(gl.program, 'u_pMatrix');
        
        var mMatrix = mat4.create();
        var vMatrix = mat4.create();
        var pMatrix = mat4.create();
        mat4.lookAt(vMatrix, [0, 0, 5], [0, 0, 0], [0, 1, 0]);
        mat4.perspective(pMatrix, Math.PI / 4, canvas.width / canvas.height, 0.1, 100);

        gl.clearColor(0.0, 0.0, 0.0, 1.0);
        gl.enable(gl.DEPTH_TEST);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

        gl.uniformMatrix4fv(u_mMatrix, false, mMatrix);
        gl.uniformMatrix4fv(u_vMatrix, false, vMatrix);
        gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);

        var texture = gl.createTexture();
        var u_Texture = gl.getUniformLocation(gl.program, 'u_Texture');

        var imagePortal = new Image();
        imagePortal.onload = function () {
            loadTexture(gl, texture, u_Texture, imagePortal, 0);
        };
        imagePortal.src = 'portal.jpg';

        function loadTexture(gl, texture, u_Texture, image, textureUnit) {
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);
            gl.activeTexture(gl.TEXTURE0 + textureUnit);
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image);
            gl.uniform1i(u_Texture, textureUnit);
        }

        function initShaders(gl, vs_source, fs_source) {
            var vertexShader = gl.createShader(gl.VERTEX_SHADER),
                fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);

            gl.shaderSource(vertexShader, vs_source);
            gl.shaderSource(fragmentShader, fs_source);

            gl.compileShader(vertexShader);
            if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
                console.error('ERROR compiling vertex shader!', gl.getShaderInfoLog(vertexShader));
                return false;
            }

            gl.compileShader(fragmentShader);
            if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
                console.error('ERROR compiling fragment shader!', gl.getShaderInfoLog(fragmentShader));
                return false;
            }

            var program = gl.createProgram();
            gl.attachShader(program, vertexShader);
            gl.attachShader(program, fragmentShader);
            gl.linkProgram(program);

            if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
                console.error('ERROR linking program!', gl.getProgramInfoLog(program));
                return false;
            }

            gl.useProgram(program);
            gl.program = program;

            return true;
        }

    </script>
</body>
</html>
