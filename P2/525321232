<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/2.8.1/gl-matrix-min.js"></script>
    <title>Ejercicio 5</title>
</head>

<body onload="init()">
    <canvas id="myCanvas" width="640" height="480"></canvas><br>
    <b>Rotation</b>
    <input type="checkbox" name="rotation" checked>
    <input type="range" id="speed" min="1" max="3" value="1" step="1"> Speed<br>
    <b>WebGL primitive</b>
    <input type="radio" name="primitive" value="triangles" checked> Triangles
    <input type="radio" name="primitive" value="lines"> Lines<br>
    <b>Projection type</b>
    <input type="radio" name="projection" value="perspective" checked> Perspective
    <input type="radio" name="projection" value="orthographic"> Orthographic<br>
    <b>Decoration</b>
    <input type="radio" name="christmas" value="no" checked> No
    <input type="radio" name="christmas" value="yes"> Yes<br>

    <script id="shaderVs" type="x-shader/x-vertex">
        attribute vec4 a_Position;
        attribute vec3 a_Color;
        attribute vec2 a_TextureCoord; // Texture coordinates
        uniform mat4 u_pMatrix;
        uniform mat4 u_vMatrix;
        uniform mat4 u_mvMatrix;
        varying highp vec4 v_Color;
        varying highp vec2 v_TextureCoord; // Varying texture coordinates
        void main(){
            gl_Position = u_pMatrix * u_vMatrix * u_mvMatrix * a_Position;
            v_Color = vec4(a_Color, 1.0);
            v_TextureCoord = a_TextureCoord; // Pass the texture coordinates to the fragment shader
        }
    </script>

    <script id="shaderFs" type="x-shader/x-fragment">
        varying highp vec4 v_Color;
        varying highp vec2 v_TextureCoord; // Varying texture coordinates
        uniform sampler2D u_Texture; // Texture sampler
        uniform bool u_Decoration; // Decoration flag
        uniform sampler2D u_DecorationTexture; // Decoration texture sampler
        void main(){
            if (u_Decoration) {
                gl_FragColor = texture2D(u_DecorationTexture, v_TextureCoord); // Use decoration texture if enabled
            } else {
                gl_FragColor = texture2D(u_Texture, v_TextureCoord); // Otherwise, use original texture
            }
        }
    </script>

    <script>
        var gl,
            canvas,
            count = 0.0,
            ratio,
            z = 3,
            projectionValue = document.querySelector('input[name="projection"]:checked').value,
            decorationValue = document.querySelector('input[name="christmas"]:checked').value;

        function init() {

            // Get canvas object from the DOM and Init WebGL Context
            canvas = document.getElementById("myCanvas");
            gl = canvas.getContext("webgl");

            if (!gl) {
                console.log("FAILED TO GET THE RENDERING CONTEXT FOR WEBGL.");
                return;
            }

            // Init Shaders 
            var vs = document.getElementById('shaderVs').innerHTML,
                fs = document.getElementById('shaderFs').innerHTML;

            if (!initShaders(gl, vs, fs)) {
                console.log("FAILED TO INITIALIZE SHADERS.");
                return;
            }

            // Init vertex shader
            initVertexShader(gl);

            // Init projection matrix
            initProjection(gl, canvas);

            // Set clear canvas color
            gl.clearColor(0.0, 0.0, 0.0, 1.0);

            // Hidden surface removal
            gl.enable(gl.DEPTH_TEST);

            // Event listener for mouse wheel
            document.addEventListener('wheel', function(event) {
                if (projectionValue == 'perspective') {
                    z = event.deltaY > 0 ? z - 1 : z + 1;
                }
            });

            // Event listener for decoration change
            document.querySelectorAll('input[name="christmas"]').forEach(function(elem) {
                elem.addEventListener("change", function(event) {
                    decorationValue = event.target.value;
                });
            });

            // Event listener for keyboard events
            document.addEventListener('keydown', function(event) {
                var step = parseFloat(document.getElementById("step").value);
                switch (event.key) {
                    case "ArrowUp":
                        moveCameraUp(step);
                        break;
                    case "ArrowDown":
                        moveCameraDown(step);
                        break;
                }
            });

            drawScene();
        }

        function drawScene() {
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

            projectionValue = document.querySelector('input[name="projection"]:checked').value,
                u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
                u_vMatrix = gl.getUniformLocation(gl.program, "u_vMatrix"),
                ratio = canvas.width / canvas.height;

            switch (projectionValue) {
                case "perspective":
                    var pMatrix = mat4.perspective(mat4.create(), toRadian(60), ratio, 0.1, 100),
                        vMatrix = mat4.lookAt(mat4.create(), [0, 0, z], [0, 0, 0], [0, 1, 0]);
                    break;

                case "orthographic":
                    var pMatrix = mat4.ortho(mat4.create(), -ratio, ratio, -1.0, 1.50, -1.0, 1.50),
                        vMatrix = mat4.create();
                    break;
                default:
            }

            gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
            gl.uniformMatrix4fv(u_vMatrix, false, vMatrix);

            var rotationChecked = document.querySelector('input[name="rotation"]').checked,
                primitiveValue = document.querySelector('input[name="primitive"]:checked').value,
                mvMatrix = mat4.fromRotation(mat4.create(), count, [0, 1, 0]),
                u_mvMatrix = gl.getUniformLocation(gl.program, "u_mvMatrix");

            gl.uniformMatrix4fv(u_mvMatrix, false, mvMatrix);

            var speed = parseInt(document.getElementById("speed").value);

            if (rotationChecked) {
                count += 0.01 * speed;
            }

            switch (primitiveValue) {
                case "triangles":
                    // DRAW PRIMITIVE ELEMENTS FOR FIRST CUBE
                    gl.drawElements(gl.TRIANGLES, 6 * 3, gl.UNSIGNED_SHORT, 0);
                    // DRAW PRIMITIVE ELEMENTS FOR SECOND CUBE
                    gl.drawElements(gl.TRIANGLES, 6 * 3, gl.UNSIGNED_SHORT, 6 * 3 * 2);
                    // DRAW PRIMITIVE ELEMENTS FOR PYRAMID
                    gl.drawElements(gl.TRIANGLES, 6 * 3 * 2, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2); // Se multiplicó por 2 para dibujar los 6 triángulos de la pirámide
                    break;
                case "lines":
                    // DRAW LINES FOR FIRST CUBE
                    gl.drawElements(gl.LINES, 6 * 3 * 2, gl.UNSIGNED_SHORT, 0); // Multiplicado por 2 porque cada triángulo tiene 3 líneas
                    // DRAW LINES FOR SECOND CUBE
                    gl.drawElements(gl.LINES, 6 * 3 * 2, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2); // Multiplicado por 2 para dibujar las líneas de los dos cubos
                    // DRAW LINES FOR PYRAMID
                    gl.drawElements(gl.LINES, 6 * 3 * 2 * 2, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2 * 2); // Multiplicado por 2 para dibujar las líneas de la pirámide
                    break;
                default:
            }

            // CALL DRAWSCENE AGAIN IN THE NEXT BROWSER REPAINT
            requestAnimationFrame(drawScene);
        }


        function initVertexShader(gl) {
            // Vertexes, colors, and texture coordinates (X, Y, Z, R, G, B, S, T)
            var vertexData = [
                // CUBO 1
                // BACK - AZUL
                -0.75, -0.50, -0.25, 0.0, 0.0, 1.0, 0.0, 0.0, // Vértice 0
                -0.25, -0.50, -0.25, 0.0, 0.0, 1.0, 1.0, 0.0, // Vértice 1
                -0.25, 0.50, -0.25, 0.0, 0.0, 1.0, 1.0, 1.0, // Vértice 2
                -0.75, 0.50, -0.25, 0.0, 0.0, 1.0, 0.0, 1.0, // Vértice 3
                // FRONT - ROJO
                -0.75, -0.50, 0.25, 1.0, 0.0, 0.0, 0.0, 0.0, // Vértice 4
                -0.25, -0.50, 0.25, 1.0, 0.0, 0.0, 1.0, 0.0, // Vértice 5
                -0.25, 0.50, 0.25, 1.0, 0.0, 0.0, 1.0, 1.0, // Vértice 6
                -0.75, 0.50, 0.25, 1.0, 0.0, 0.0, 0.0, 1.0, // Vértice 7
                // LEFT - AMARILLO
                -0.75, -0.50, -0.25, 1.0, 1.0, 0.0, 0.0, 0.0, // Vértice 8
                -0.75, 0.50, -0.25, 1.0, 1.0, 0.0, 1.0, 0.0, // Vértice 9
                -0.75, 0.50, 0.25, 1.0, 1.0, 0.0, 1.0, 1.0, // Vértice 10
                -0.75, -0.50, 0.25, 1.0, 1.0, 0.0, 0.0, 1.0, // Vértice 11
                // RIGHT - VERDE
                -0.25, -0.50, -0.25, 0.0, 1.0, 0.0, 0.0, 0.0, // Vértice 12
                -0.25, 0.50, -0.25, 0.0, 1.0, 0.0, 1.0, 0.0, // Vértice 13
                -0.25, 0.50, 0.25, 0.0, 1.0, 0.0, 1.0, 1.0, // Vértice 14
                -0.25, -0.50, 0.25, 0.0, 1.0, 0.0, 0.0, 1.0, // Vértice 15
                // BOTTOM - TURQUESA
                -0.75, -0.50, -0.25, 0.0, 1.0, 1.0, 0.0, 0.0, // Vértice 16
                -0.75, -0.50, 0.25, 0.0, 1.0, 1.0, 1.0, 0.0, // Vértice 17
                -0.25, -0.50, 0.25, 0.0, 1.0, 1.0, 1.0, 1.0, // Vértice 18
                -0.25, -0.50, -0.25, 0.0, 1.0, 1.0, 0.0, 1.0, // Vértice 19
                // CUBO 2
                // BACK - AZUL
                0.25, -0.50, -0.25, 0.0, 0.0, 1.0, 0.0, 0.0, // Vértice 20
                0.75, -0.50, -0.25, 0.0, 0.0, 1.0, 1.0, 0.0, // Vértice 21
                0.75, 0.50, -0.25, 0.0, 0.0, 1.0, 1.0, 1.0, // Vértice 22
                0.25, 0.50, -0.25, 0.0, 0.0, 1.0, 0.0, 1.0, // Vértice 23
                // FRONT - ROJO
                0.25, -0.50, 0.25, 1.0, 0.0, 0.0, 0.0, 0.0, // Vértice 24
                0.75, -0.50, 0.25, 1.0, 0.0, 0.0, 1.0, 0.0, // Vértice 25
                0.75, 0.50, 0.25, 1.0, 0.0, 0.0, 1.0, 1.0, // Vértice 26
                0.25, 0.50, 0.25, 1.0, 0.0, 0.0, 0.0, 1.0, // Vértice 27
                // LEFT - AMARILLO
                0.25, -0.50, -0.25, 1.0, 1.0, 0.0, 0.0, 0.0, // Vértice 28
                0.25, 0.50, -0.25, 1.0, 1.0, 0.0, 1.0, 0.0, // Vértice 29
                0.25, 0.50, 0.25, 1.0, 1.0, 0.0, 1.0, 1.0, // Vértice 30
                0.25, -0.50, 0.25, 1.0, 1.0, 0.0, 0.0, 1.0, // Vértice 31
                // RIGHT - VERDE
                0.75, -0.50, -0.25, 0.0, 1.0, 0.0, 0.0, 0.0, // Vértice 32
                0.75, 0.50, -0.25, 0.0, 1.0, 0.0, 1.0, 0.0, // Vértice 33
                0.75, 0.50, 0.25, 0.0, 1.0, 0.0, 1.0, 1.0, // Vértice 34
                0.75, -0.50, 0.25, 0.0, 1.0, 0.0, 0.0, 1.0, // Vértice 35
                // BOTTOM - TURQUESA
                0.25, -0.50, -0.25, 0.0, 1.0, 1.0, 0.0, 0.0, // Vértice 36
                0.25, -0.50, 0.25, 0.0, 1.0, 1.0, 1.0, 0.0, // Vértice 37
                0.75, -0.50, 0.25, 0.0, 1.0, 1.0, 1.0, 1.0, // Vértice 38
                0.75, -0.50, -0.25, 0.0, 1.0, 1.0, 0.0, 1.0, // Vértice 39
                // PIRÁMIDE
                // Cima - ROJO
                0.00, 1.00, 0.00, 1.0, 0.0, 0.0, 0.5, 1.0, // Vértice 40
                // Base de la pirámide
                // (v1) (AMARILLO)
                -0.75, 0.50, -0.75, 1.0, 1.0, 0.0, 0.0, 0.0, // Vértice 41 (AMARILLO)
                // (v2) (AZUL)
                -0.75, 0.50, 0.75, 0.0, 0.0, 1.0, 1.0, 0.0, // Vértice 42 (AZUL)
                // (v3) (VERDE)
                0.75, 0.50, 0.75, 0.0, 1.0, 0.0, 1.0, 1.0, // Vértice 43 (VERDE)
                // (v4) (TURQUESA)
                0.75, 0.50, -0.75, 0.0, 1.0, 1.0, 0.0, 1.0 // Vértice 44 (TURQUESA)
            ];

            // Indexes (for drawing squares using triangles)
            var indexes = [
                // CUBO 1
                0, 1, 2,    // Triángulo #1
                0, 2, 3,    // Triángulo #2
                4, 5, 6,    // Triángulo #3
                4, 6, 7,    // Triángulo #4
                8, 9, 10,   // Triángulo #5
                8, 10, 11,  // Triángulo #6
                12, 13, 14, // Triángulo #7
                12, 14, 15, // Triángulo #8
                16, 17, 18, // Triángulo #9
                16, 18, 19, // Triángulo #10
                // CUBO 2
                20, 21, 22,    // Triángulo #11
                20, 22, 23,    // Triángulo #12
                24, 25, 26,    // Triángulo #13
                24, 26, 27,    // Triángulo #14
                28, 29, 30,    // Triángulo #15
                28, 30, 31,    // Triángulo #16
                32, 33, 34,    // Triángulo #17
                32, 34, 35,    // Triángulo #18
                36, 37, 38,    // Triángulo #19
                36, 38, 39,    // Triángulo #20
                // PIRÁMIDE
                41, 42, 43,    // Triángulo #21
                41, 43, 44,    // Triángulo #22
                41, 42, 40,    // Triángulo #23
                42, 43, 40,    // Triángulo #24
                43, 44, 40,    // Triángulo #25
                44, 41, 40     // Triángulo #26
            ];

            // Create a buffer object
            var vertexBuffer = gl.createBuffer(),
                indexBuffer = gl.createBuffer(),
                FSIZE = vertexData.BYTES_PER_ELEMENT;

            // Bind the buffer objects to target
            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexBuffer);

            // Write data into the buffer objects
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexData), gl.STATIC_DRAW);
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexes), gl.STATIC_DRAW);

            // Get storage location of attribute and uniform
            var a_Position = gl.getAttribLocation(gl.program, "a_Position"),
                a_Color = gl.getAttribLocation(gl.program, "a_Color"),
                a_TextureCoord = gl.getAttribLocation(gl.program, 'a_TextureCoord'); // Get the storage location of a_TextureCoord

            // Assign buffer to attribute variable
            gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, FSIZE * 8, 0);
            gl.vertexAttribPointer(a_Color, 3, gl.FLOAT, false, FSIZE * 8, FSIZE * 3);
            gl.vertexAttribPointer(a_TextureCoord, 2, gl.FLOAT, false, FSIZE * 8, FSIZE * 6); // Assign the buffer object to a_TextureCoord variable

            // Enable the assignment to a_Position variable
            gl.enableVertexAttribArray(a_Position);
            gl.enableVertexAttribArray(a_Color);
            gl.enableVertexAttribArray(a_TextureCoord); // Enable assignment of texture coordinates

            // Init textures
            initTextures(gl);
        }

        function initTextures(gl) {
            var texture = gl.createTexture(), // Create a texture object
                u_Texture = gl.getUniformLocation(gl.program, 'u_Texture'), // Get the storage location of u_Texture
                image = new Image(); // Create a image object

            // Tell WebGL to flip the image's y axis
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);

            // Enable texture unit0
            gl.activeTexture(gl.TEXTURE0);

            // Bind the texture object to the target
            gl.bindTexture(gl.TEXTURE_2D, texture);

            // Set the texture parameters
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
            // Set the texture image
            image.onload = function() {
                // Bind the texture object to the target
                gl.bindTexture(gl.TEXTURE_2D, texture);

                // Set the texture image
                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image);

                // Pass the location of texture unit0 to u_Texture
                gl.uniform1i(u_Texture, 0);
            };

            // Set the image source
            image.src = 'texture.jpg';

            // --- TEXTURA PARA DECORACIÓN ---
            var decorationTexture = gl.createTexture(),
                u_DecorationTexture = gl.getUniformLocation(gl.program, 'u_DecorationTexture'), // Get the storage location of u_DecorationTexture
                decorationImage = new Image(); // Create a image object

            // Enable texture unit1
            gl.activeTexture(gl.TEXTURE1);

            // Bind the texture object to the target
            gl.bindTexture(gl.TEXTURE_2D, decorationTexture);

            // Set the texture parameters
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
            // Set the texture image
            decorationImage.onload = function() {
                // Bind the texture object to the target
                gl.bindTexture(gl.TEXTURE_2D, decorationTexture);

                // Set the texture image
                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, decorationImage);
            };

            // Set the image source
            decorationImage.src = 'decoration_texture.jpg';
        }

        function initProjection(gl, canvas) {
            var u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
                ratio = canvas.width / canvas.height;

            gl.uniformMatrix4fv(u_pMatrix, false, mat4.perspective(mat4.create(), toRadian(60), ratio, 0.1, 100));
        }

        function toRadian(angle) {
            return angle * Math.PI / 180.0;
        }

        function moveCameraUp(step) {
            if (projectionValue == 'orthographic') {
                z -= step;
            }
        }

        function moveCameraDown(step) {
            if (projectionValue == 'orthographic') {
                z += step;
            }
        }
    </script>
</body>

</html>

