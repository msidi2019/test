<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/2.8.1/gl-matrix-min.js"></script>
    <title>Ejercicio 5</title>
</head>

<body onload="init()">
    <canvas id="myCanvas" width="640" height="480"></canvas><br>
    <b>Rotation</b>
    <input type="checkbox" name="rotation" checked>
    <input type="range" id="speed" min="1" max="3" value="1" step="1"> Speed<br>
    <b>WebGL primitive</b>
    <input type="radio" name="primitive" value="triangles" checked> Triangles
    <input type="radio" name="primitive" value="lines"> Lines<br>
    <b>Projection type</b>
    <input type="radio" name="projection" value="perspective" checked> Perspective
    <input type="radio" name="projection" value="orthographic"> Orthographic<br>
    <b>Decoration</b>
    <input type="radio" name="christmas" value="no" checked> No
    <input type="radio" name="christmas" value="yes"> Yes<br>

    <script id="shaderVs" type="x-shader/x-vertex">
        attribute vec4 a_Position;
        attribute vec3 a_Color;
        attribute vec2 a_TexCoord;
        uniform mat4 u_pMatrix;
        uniform mat4 u_vMatrix;
        uniform mat4 u_mvMatrix;
        varying highp vec4 v_Color;
        varying vec2 v_TexCoord;
        void main() {
            gl_Position = u_pMatrix * u_vMatrix * u_mvMatrix * a_Position;
            v_Color = vec4(a_Color, 1.0);
            v_TexCoord = a_TexCoord;
        }
    </script>

    <script id="shaderFs" type="x-shader/x-fragment">
        precision mediump float;
        uniform sampler2D u_Sampler;
        varying vec2 v_TexCoord;
        void main(void) {
            gl_FragColor = texture2D(u_Sampler, v_TexCoord);
        }
    </script>

    <script>
        var gl,
            canvas,
            count = 0.0,
            ratio,
            z = 3,
            projectionValue,
            decorationValue,
            texture1, // Texture for columns and pyramid front face
            texture2; // Texture for windows and pyramid other faces

        function init() {
            // Get canvas object from the DOM and Init WebGL Context
            canvas = document.getElementById("myCanvas");
            gl = canvas.getContext("webgl");

            if (!gl) {
                console.log("FAILED TO GET THE RENDERING CONTEXT FOR WEBGL.");
                return;
            }

            // Init Shaders 
            var vs = document.getElementById('shaderVs').innerHTML,
                fs = document.getElementById('shaderFs').innerHTML;

            if (!initShaders(gl, vs, fs)) {
                console.log("FAILED TO INITIALIZE SHADERS.");
                return;
            }

            // Init vertex shader
            initVertexShader(gl);

            // Init projection matrix
            initProjection(gl, canvas);

            // Set clear canvas color
            gl.clearColor(0.0, 0.0, 0.0, 1.0);

            // Hidden surface removal
            gl.enable(gl.DEPTH_TEST);

            // Event listener for mouse wheel
            document.addEventListener('wheel', function (event) {
                if (projectionValue == 'perspective') {
                    z = event.deltaY > 0 ? z - 1 : z + 1;
                }
            });

            // Event listener for Decoration radio button
            var decorationRadios = document.getElementsByName('christmas');
            for (var i = 0; i < decorationRadios.length; i++) {
                decorationRadios[i].addEventListener('change', function () {
                    decorationValue = this.value;
                    loadTextures(gl);
                });
            }

            drawScene();
        }

        function drawScene() {
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

            projectionValue = document.querySelector('input[name="projection"]:checked').value,
                u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
                u_vMatrix = gl.getUniformLocation(gl.program, "u_vMatrix"),
                ratio = canvas.width / canvas.height;

            switch (projectionValue) {
                case "perspective":
                    var pMatrix = mat4.perspective(mat4.create(), toRadian(60), ratio, 0.1, 100),
                        vMatrix = mat4.lookAt(mat4.create(), [0, 0, z], [0, 0, 0], [0, 1, 0]);
                    break;

                case "orthographic":
                    var pMatrix = mat4.ortho(mat4.create(), -ratio, ratio, -1.0, 1.50, -1.0, 1.50),
                        vMatrix = mat4.create();
                    break;
                default:
            }

            gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
            gl.uniformMatrix4fv(u_vMatrix, false, vMatrix);

            var rotationChecked = document.querySelector('input[name="rotation"]').checked,
                primitiveValue = document.querySelector('input[name="primitive"]:checked').value,
                mvMatrix = mat4.fromRotation(mat4.create(), count, [0, 1, 0]),
                u_mvMatrix = gl.getUniformLocation(gl.program, "u_mvMatrix");

            gl.uniformMatrix4fv(u_mvMatrix, false, mvMatrix);

            var speed = parseInt(document.getElementById("speed").value);

            if (rotationChecked) {
                count += 0.01 * speed;
            }

            switch (primitiveValue) {
                case "triangles":
                    // DRAW PRIMITIVE ELEMENTS FOR FIRST CUBE
                    gl.drawElements(gl.TRIANGLES, 6 * 3, gl.UNSIGNED_SHORT, 0);
                    // DRAW PRIMITIVE ELEMENTS FOR SECOND CUBE
                    gl.drawElements(gl.TRIANGLES, 6 * 3, gl.UNSIGNED_SHORT, 6 * 3 * 2);
                    // DRAW PRIMITIVE ELEMENTS FOR PYRAMID
                    gl.drawElements(gl.TRIANGLES, 6 * 3 * 2, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2); // Se multiplicó por 2 para dibujar los 6 triángulos de la pirámide
                    break;
                case "lines":
                    // DRAW LINES FOR FIRST CUBE
                    gl.drawElements(gl.LINES, 6 * 3, gl.UNSIGNED_SHORT, 0);
                    // DRAW LINES FOR SECOND CUBE
                    gl.drawElements(gl.LINES, 6 * 3, gl.UNSIGNED_SHORT, 6 * 3 * 2);
                    // DRAW LINES FOR PYRAMID
                    gl.drawElements(gl.LINES, 6 * 3 * 2, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2); // Se multiplicó por 2 para dibujar los 6 triángulos de la pirámide
                    break;
                default:
            }

            requestAnimationFrame(drawScene);
        }

        function initVertexShader(gl) {
            var verticesColors = new Float32Array([
                // Vertex coordinates and color
                // Front face
                1.0, 1.0, 1.0, 1.0, 0.0, 0.0, // Red
                -1.0, 1.0, 1.0, 1.0, 0.0, 0.0,
                -1.0, -1.0, 1.0, 1.0, 0.0, 0.0,
                1.0, -1.0, 1.0, 1.0, 0.0, 0.0,
                // Back face
                1.0, 1.0, -1.0, 0.0, 1.0, 0.0, // Green
                -1.0, 1.0, -1.0, 0.0, 1.0, 0.0,
                -1.0, -1.0, -1.0, 0.0, 1.0, 0.0,
                1.0, -1.0, -1.0, 0.0, 1.0, 0.0,
                // Top face
                1.0, 1.0, 1.0, 0.0, 0.0, 1.0, // Blue
                -1.0, 1.0, 1.0, 0.0, 0.0, 1.0,
                -1.0, 1.0, -1.0, 0.0, 0.0, 1.0,
                1.0, 1.0, -1.0, 0.0, 0.0, 1.0,
                // Bottom face
                1.0, -1.0, 1.0, 1.0, 1.0, 0.0, // Yellow
                -1.0, -1.0, 1.0, 1.0, 1.0, 0.0,
                -1.0, -1.0, -1.0, 1.0, 1.0, 0.0,
                1.0, -1.0, -1.0, 1.0, 1.0, 0.0,
                // Right face
                1.0, 1.0, 1.0, 1.0, 0.0, 1.0, // Magenta
                1.0, -1.0, 1.0, 1.0, 0.0, 1.0,
                1.0, -1.0, -1.0, 1.0, 0.0, 1.0,
                1.0, 1.0, -1.0, 1.0, 0.0, 1.0,
                // Left face
                -1.0, 1.0, 1.0, 0.0, 1.0, 1.0, // Cyan
                -1.0, -1.0, 1.0, 0.0, 1.0, 1.0,
                -1.0, -1.0, -1.0, 0.0, 1.0, 1.0,
                -1.0, 1.0, -1.0, 0.0, 1.0, 1.0,

                // Pyramid
                // Front face
                0.0, 1.0, 0.0, 1.0, 0.0, 0.0, // Red
                -1.0, -1.0, 1.0, 1.0, 0.0, 0.0,
                1.0, -1.0, 1.0, 1.0, 0.0, 0.0,
                // Right face
                0.0, 1.0, 0.0, 0.0, 1.0, 0.0, // Green
                1.0, -1.0, 1.0, 0.0, 1.0, 0.0,
                1.0, -1.0, -1.0, 0.0, 1.0, 0.0,
                // Back face
                0.0, 1.0, 0.0, 0.0, 0.0, 1.0, // Blue
                1.0, -1.0, -1.0, 0.0, 0.0, 1.0,
                -1.0, -1.0, -1.0, 0.0, 0.0, 1.0,
                // Left face
                0.0, 1.0, 0.0, 1.0, 1.0, 0.0, // Yellow
                -1.0, -1.0, -1.0, 1.0, 1.0, 0.0,
                -1.0, -1.0, 1.0, 1.0, 1.0, 0.0,

                // Columns
                // Front face
                0.25, 1.0, 0.25, 1.0, 1.0, 1.0, // White
                -0.25, -1.0, 0.25, 1.0, 1.0, 1.0,
                0.25, -1.0, 0.25, 1.0, 1.0, 1.0,
                // Right face
                0.25, 1.0, -0.25, 1.0, 1.0, 1.0, // White
                0.25, -1.0, -0.25, 1.0, 1.0, 1.0,
                0.25, -1.0, 0.25, 1.0, 1.0, 1.0,
                // Back face
                -0.25, 1.0, -0.25, 1.0, 1.0, 1.0, // White
                0.25, -1.0, -0.25, 1.0, 1.0, 1.0,
                -0.25, -1.0, -0.25, 1.0, 1.0, 1.0,
                // Left face
                -0.25, 1.0, 0.25, 1.0, 1.0, 1.0, // White
                -0.25, -1.0, -0.25, 1.0, 1.0, 1.0,
                -0.25, -1.0, 0.25, 1.0, 1.0, 1.0
            ]);

            // Create a buffer object
            var vertexColorBuffer = gl.createBuffer();
            if (!vertexColorBuffer) {
                console.log("FAILED TO CREATE THE BUFFER OBJECT.");
                return -1;
            }

            // Bind the buffer object to target
            gl.bindBuffer(gl.ARRAY_BUFFER, vertexColorBuffer);

            // Write date into the buffer object
            gl.bufferData(gl.ARRAY_BUFFER, verticesColors, gl.STATIC_DRAW);

            var FSIZE = verticesColors.BYTES_PER_ELEMENT;

            // Get the storage location of a_Position, assign and enable buffer
            var a_Position = gl.getAttribLocation(gl.program, 'a_Position');
            if (a_Position < 0) {
                console.log("FAILED TO GET THE STORAGE LOCATION OF A_POSITION.");
                return -1;
            }
            gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, FSIZE * 6, 0);
            gl.enableVertexAttribArray(a_Position);

            // Get the storage location of a_Color
            var a_Color = gl.getAttribLocation(gl.program, 'a_Color');
            if (a_Color < 0) {
                console.log("FAILED TO GET THE STORAGE LOCATION OF A_COLOR.");
                return -1;
            }
            gl.vertexAttribPointer(a_Color, 3, gl.FLOAT, false, FSIZE * 6, FSIZE * 3);
            gl.enableVertexAttribArray(a_Color);
        }

        function initProjection(gl, canvas) {
            var u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
                u_vMatrix = gl.getUniformLocation(gl.program, "u_vMatrix"),
                ratio = canvas.width / canvas.height;

            var pMatrix = mat4.perspective(mat4.create(), toRadian(60), ratio, 0.1, 100),
                vMatrix = mat4.lookAt(mat4.create(), [0, 0, z], [0, 0, 0], [0, 1, 0]);

            gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
            gl.uniformMatrix4fv(u_vMatrix, false, vMatrix);
        }

        function loadTextures(gl) {
            texture1 = gl.createTexture();
            texture2 = gl.createTexture();

            var image1 = new Image(),
                image2 = new Image();

            image1.onload = function () {
                handleTextureLoaded(gl, texture1, image1);
            }

            image2.onload = function () {
                handleTextureLoaded(gl, texture2, image2);
            }

            image1.src = 'crate.jpg';
            image2.src = 'crate.jpg';
        }

        function handleTextureLoaded(gl, texture, image) {
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1);
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
            gl.generateMipmap(gl.TEXTURE_2D);
            gl.bindTexture(gl.TEXTURE_2D, null);
        }

        function toRadian(angle) {
            return angle * Math.PI / 180;
        }
    </script>
</body>

</html>
