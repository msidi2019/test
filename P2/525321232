<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/2.8.1/gl-matrix-min.js"></script>
    <title>Ejercicio 5</title>
</head>

<body onload="init()">
    <canvas id="myCanvas" width="640" height="480"></canvas><br>
    <b>Rotation</b>
    <input type="checkbox" name="rotation" checked>
    <input type="range" id="speed" min="1" max="3" value="1" step="1"> Speed<br>
    <b>WebGL primitive</b>
    <input type="radio" name="primitive" value="triangles" checked> Triangles
    <input type="radio" name="primitive" value="lines"> Lines<br>
    <b>Projection type</b>
    <input type="radio" name="projection" value="perspective" checked> Perspective
    <input type="radio" name="projection" value="orthographic"> Orthographic<br>
    <b>Decoration</b>
    <input type="radio" name="christmas" value="no" checked> No
    <input type="radio" name="christmas" value="yes"> Yes<br>

    <script id="shaderVs" type="x-shader/x-vertex">
        attribute vec4 a_Position;
        attribute vec3 a_Color;
        uniform mat4 u_pMatrix;
        uniform mat4 u_vMatrix;
        uniform mat4 u_mvMatrix;
        varying highp vec4 v_Color;
        void main(){
            gl_Position = u_pMatrix * u_vMatrix * u_mvMatrix * a_Position;
            v_Color = vec4(a_Color, 1.0);
        }
    </script>

    <script id="shaderFs" type="x-shader/x-fragment">
        precision mediump float;
        uniform sampler2D u_Sampler;
        uniform bool u_IsChristmas;
        varying highp vec4 v_Color;
        void main() {
            vec4 texColor = texture2D(u_Sampler, vec2(gl_FragCoord.x / 640.0, gl_FragCoord.y / 480.0));
            if (u_IsChristmas) {
                gl_FragColor = texColor * v_Color;
            } else {
                gl_FragColor = v_Color;
            }
        }
    </script>

    <script>
        var gl,
            canvas,
            count = 0.0,
            ratio,
            z = 3,
            projectionValue = document.querySelector('input[name="projection"]:checked').value,
            christmasValue = document.querySelector('input[name="christmas"]:checked').value;

        function init(){
            
            // Get canvas object from the DOM and Init WebGL Context
            canvas = document.getElementById("myCanvas");
            gl = canvas.getContext("webgl");

            if (!gl) {
            console.log("FAILED TO GET THE RENDERING CONTEXT FOR WEBGL.");
            return;
            }

            // Init Shaders 
            var vs = document.getElementById('shaderVs').innerHTML,
                fs = document.getElementById('shaderFs').innerHTML;

            if (!initShaders(gl, vs, fs)){
            console.log("FAILED TO INITIALIZE SHADERS.");
            return;
            }

            // Init vertex shader
            initVertexShader(gl);

            // Init projection matrix
            initProjection(gl, canvas);

            // Set clear canvas color
            gl.clearColor(0.0, 0.0, 0.0, 1.0);

            // Hidden surface removal
            gl.enable(gl.DEPTH_TEST);

            // Event listener for mouse wheel
            document.addEventListener('wheel', function (event) {
                if (projectionValue == 'perspective'){
                    z = event.deltaY > 0 ? z - 1 : z + 1;
                }
            });

            // Event listener for christmas radio buttons
            var christmasRadios = document.querySelectorAll('input[name="christmas"]');
            christmasRadios.forEach(function(radio) {
                radio.addEventListener('change', function() {
                    christmasValue = this.value;
                });
            });

            drawScene();
        }

        function drawScene() {
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            
            projectionValue = document.querySelector('input[name="projection"]:checked').value,
            u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
            u_vMatrix = gl.getUniformLocation(gl.program, "u_vMatrix"),
            ratio = canvas.width/canvas.height;
            
            switch (projectionValue) {
                case "perspective":
                    var pMatrix = mat4.perspective(mat4.create(), toRadian(60), ratio, 0.1, 100),
                        vMatrix = mat4.lookAt(mat4.create(), [0, 0, z], [0, 0, 0], [0, 1, 0]);
                    break;
                case "orthographic":
                    var pMatrix = mat4.ortho(mat4.create(), -1, 1, -1, 1, 0.1, 100),
                        vMatrix = mat4.lookAt(mat4.create(), [0, 0, z], [0, 0, 0], [0, 1, 0]);
                    break;
            }

            gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
            gl.uniformMatrix4fv(u_vMatrix, false, vMatrix);
            
            var u_IsChristmas = gl.getUniformLocation(gl.program, "u_IsChristmas");
            gl.uniform1i(u_IsChristmas, christmasValue == 'yes' ? 1 : 0);

            count += parseFloat(document.getElementById("speed").value);
            var u_mvMatrix = gl.getUniformLocation(gl.program, "u_mvMatrix"),
                mvMatrix = mat4.translate(mat4.create(), mat4.create(), [0, 0, 0]);
            
            if (document.querySelector('input[name="rotation"]').checked){
                mvMatrix = mat4.rotateY(mat4.create(), mvMatrix, toRadian(count));
            }

            gl.uniformMatrix4fv(u_mvMatrix, false, mvMatrix);

            var primitive = document.querySelector('input[name="primitive"]:checked').value;
            switch (primitive) {
                case "triangles":
                    gl.drawArrays(gl.TRIANGLES, 0, 36);
                    break;
                case "lines":
                    gl.drawArrays(gl.LINES, 0, 36);
                    break;
            }

            requestAnimationFrame(drawScene);
        }

        function initVertexShader(gl){
            var verticesColors = new Float32Array([
                // 3D Cube Vertices and Colors
                // Vertex coordinates and color
                // Bottom
                -0.5, -0.5, -0.5, 0.0, 0.0, 0.0, // Black
                0.5, -0.5, -0.5, 1.0, 0.0, 0.0, // Red
                0.5,  0.5, -0.5, 1.0, 1.0, 0.0, // Yellow
                -0.5,  0.5, -0.5, 0.0, 1.0, 0.0, // Green

                // Top
                -0.5, -0.5,  0.5, 0.0, 0.0, 1.0, // Blue
                0.5, -0.5,  0.5, 1.0, 0.0, 1.0, // Magenta
                0.5,  0.5,  0.5, 1.0, 1.0, 1.0, // White
                -0.5,  0.5,  0.5, 0.0, 1.0, 1.0  // Cyan
            ]);
            var n = verticesColors.length / 6;

            var vertexColorBuffer = gl.createBuffer();
            if (!vertexColorBuffer) {
                console.log('Failed to create the buffer object');
                return -1;
            }

            gl.bindBuffer(gl.ARRAY_BUFFER, vertexColorBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, verticesColors, gl.STATIC_DRAW);

            var FSIZE = verticesColors.BYTES_PER_ELEMENT;

            var a_Position = gl.getAttribLocation(gl.program, 'a_Position');
            if (a_Position < 0) {
                console.log('Failed to get the storage location of a_Position');
                return -1;
            }
            gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, FSIZE * 6, 0);
            gl.enableVertexAttribArray(a_Position);

            var a_Color = gl.getAttribLocation(gl.program, 'a_Color');
            if (a_Color < 0) {
                console.log('Failed to get the storage location of a_Color');
                return -1;
            }
            gl.vertexAttribPointer(a_Color, 3, gl.FLOAT, false, FSIZE * 6, FSIZE * 3);
            gl.enableVertexAttribArray(a_Color);
        }

        function initProjection(gl, canvas){
            var u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
                u_vMatrix = gl.getUniformLocation(gl.program, "u_vMatrix"),
                pMatrix = mat4.perspective(mat4.create(), toRadian(60), canvas.width/canvas.height, 0.1, 100),
                vMatrix = mat4.lookAt(mat4.create(), [0, 0, z], [0, 0, 0], [0, 1, 0]);

            gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
            gl.uniformMatrix4fv(u_vMatrix, false, vMatrix);
        }

        function toRadian(angle){
            return angle * Math.PI / 180;
        }

    </script>
</body>
</html>

