<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/2.8.1/gl-matrix-min.js"></script>
    <title>Ejercicio 5</title>
</head>

<body onload="init()">
    <canvas id="myCanvas" width="640" height="480"></canvas><br>
    <b>Rotation</b>
    <input type="checkbox" name="rotation" checked>
    <input type="range" id="speed" min="1" max="3" value="1" step="1"> Speed<br>
    <b>WebGL primitive</b>
    <input type="radio" name="primitive" value="triangles" checked> Triangles
    <input type="radio" name="primitive" value="lines"> Lines<br>
    <b>Projection type</b>
    <input type="radio" name="projection" value="perspective" checked> Perspective
    <input type="radio" name="projection" value="orthographic"> Orthographic<br>
    <b>Decoration</b>
    <input type="radio" name="decoration" value="no" checked> No
    <input type="radio" name="decoration" value="yes"> Yes<br>
    <input type="number" id="step" value="1" min="1" max="10"> Step<br>

    <script id="shaderVs" type="x-shader/x-vertex">
        attribute vec4 a_Position;
        attribute vec3 a_Color;
        attribute vec2 a_TextureCoord;
        uniform mat4 u_pMatrix;
        uniform mat4 u_vMatrix;
        uniform mat4 u_mvMatrix;
        varying highp vec4 v_Color;
        varying highp vec2 v_TextureCoord;

        void main() {
            gl_Position = u_pMatrix * u_vMatrix * u_mvMatrix * a_Position;
            v_Color = vec4(a_Color, 1.0);
            v_TextureCoord = a_TextureCoord;
        }
    </script>

    <script id="shaderFs" type="x-shader/x-fragment">
        varying highp vec4 v_Color;
        varying highp vec2 v_TextureCoord;
        uniform sampler2D u_Sampler;

        void main() {
            gl_FragColor = texture2D(u_Sampler, v_TextureCoord);
        }
    </script>

    <script>
        var gl,
            canvas,
            count = 0.0,
            ratio,
            z = 3,
            projectionValue = document.querySelector('input[name="projection"]:checked').value;

        function init(){
            // Get canvas object from the DOM and Init WebGL Context
            canvas = document.getElementById("myCanvas");
            gl = canvas.getContext("webgl");

            if (!gl) {
                console.log("FAILED TO GET THE RENDERING CONTEXT FOR WEBGL.");
                return;
            }

            // Init Shaders 
            var vs = document.getElementById('shaderVs').innerHTML,
                fs = document.getElementById('shaderFs').innerHTML;

            if (!initShaders(gl, vs, fs)){
                console.log("FAILED TO INITIALIZE SHADERS.");
                return;
            }

            // Init vertex shader
            initVertexShader(gl);

            // Init projection matrix
            initProjection(gl, canvas);

            // Set clear canvas color
            gl.clearColor(0.0, 0.0, 0.0, 1.0);

            // Hidden surface removal
            gl.enable(gl.DEPTH_TEST);

            // Event listener for mouse wheel
            document.addEventListener('wheel', function (event) {
                if (projectionValue == 'perspective'){
                    z = event.deltaY > 0 ? z - 1 : z + 1;
                }
            });

            // Event listener for keyboard input
            document.addEventListener('keydown', function(event) {
                var step = parseInt(document.getElementById("step").value);
                switch(event.key) {
                    case "ArrowUp":
                        // Move camera up
                        z -= step * 0.1;
                        break;
                    case "ArrowDown":
                        // Move camera down
                        z += step * 0.1;
                        break;
                }
                drawScene();
            });

            drawScene();
        }

        function drawScene() {
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            
            projectionValue = document.querySelector('input[name="projection"]:checked').value;
            var u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
                u_vMatrix = gl.getUniformLocation(gl.program, "u_vMatrix"),
                ratio = canvas.width/canvas.height;

            switch (projectionValue) {
                case "perspective":
                    var pMatrix = mat4.perspective(mat4.create(), toRadian(60), ratio, 0.1, 100),
                        vMatrix = mat4.lookAt(mat4.create(), [0, 0, z], [0, 0, 0], [0, 1, 0]);
                    break;
            
                case "orthographic":
                    var pMatrix = mat4.ortho(mat4.create(), -ratio, ratio, -1.0, 1.50, -1.0, 1.50),
                        vMatrix = mat4.create();
                    break;
                default:
            }

            gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
            gl.uniformMatrix4fv(u_vMatrix, false, vMatrix);

            var rotationChecked = document.querySelector('input[name="rotation"]').checked,
                primitiveValue = document.querySelector('input[name="primitive"]:checked').value,
                mvMatrix = mat4.fromRotation(mat4.create(), count, [0, 1, 0]),
                u_mvMatrix = gl.getUniformLocation(gl.program, "u_mvMatrix");

            gl.uniformMatrix4fv(u_mvMatrix, false, mvMatrix);

            var speed = parseInt(document.getElementById("speed").value);

            if (rotationChecked){
                count += 0.01 * speed;
            }

            switch (primitiveValue) {
                case "triangles":
                    gl.drawElements(gl.TRIANGLES, 6 * 3, gl.UNSIGNED_SHORT, 0);
                    gl.drawElements(gl.TRIANGLES, 6 * 3, gl.UNSIGNED_SHORT, 6 * 3 * 2);
                    gl.drawElements(gl.TRIANGLES, 6 * 3 * 2, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2);
                    break;
                case "lines":
                    gl.drawElements(gl.LINES, 6 * 3 * 2, gl.UNSIGNED_SHORT, 0);
                    gl.drawElements(gl.LINES, 6 * 3 * 2, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2);
                    gl.drawElements(gl.LINES, 6 * 3 * 2 * 2, gl.UNSIGNED_SHORT, 6 * 3 * 2 * 2 * 2);
                    break;
                default:
            }

            // CALL DRAWSCENE AGAIN IN THE NEXT BROWSER REPAINT
            requestAnimationFrame(drawScene);
        }

        function initVertexShader(gl) {
            // Vertexes and colors (X, Y, Z, R, G, B)
            var vertexesAndColors = [
                // Vertices and texture coordinates for front and back faces of cubes and pyramid
                // Front face
                -0.5, -0.5, 0.5, 1.0, 0.0, 0.0,  0.0, 0.0, // Vertex 0
                 0.5, -0.5, 0.5, 1.0, 0.0, 0.0,  1.0, 0.0, // Vertex 1
                 0.5,  0.5, 0.5, 1.0, 0.0, 0.0,  1.0, 1.0, // Vertex 2
                -0.5,  0.5, 0.5, 1.0, 0.0, 0.0,  0.0, 1.0, // Vertex 3
                // Back face
                -0.5, -0.5, -0.5, 0.0, 1.0, 0.0, 0.0, 0.0, // Vertex 4
                -0.5,  0.5, -0.5, 0.0, 1.0, 0.0, 1.0, 0.0, // Vertex 5
                 0.5,  0.5, -0.5, 0.0, 1.0, 0.0, 1.0, 1.0, // Vertex 6
                 0.5, -0.5, -0.5, 0.0, 1.0, 0.0, 0.0, 1.0, // Vertex 7
                // Pyramid
                 0.0,  0.5,  0.0, 0.0, 0.0, 1.0, 0.5, 1.0, // Vertex 8
                -0.5, -0.5,  0.5, 0.0, 0.0, 1.0, 0.0, 0.0, // Vertex 9
                 0.5, -0.5,  0.5, 0.0, 0.0, 1.0, 1.0, 0.0, // Vertex 10
                 0.5, -0.5, -0.5, 0.0, 0.0, 1.0, 1.0, 1.0, // Vertex 11
                -0.5, -0.5, -0.5, 0.0, 0.0, 1.0, 0.0, 1.0  // Vertex 12
            ];

            // Indexes (for drawing squares using triangles)
            var indexes = [
                // Indexes for cubes and pyramid
                // Front face
                0, 1, 2, 0, 2, 3,
                // Back face
                4, 5, 6, 4, 6, 7,
                // Top face
                3, 2, 6, 3, 6, 7,
                // Bottom face
                0, 1, 5, 0, 5, 4,
                // Left face
                0, 3, 4, 3, 4, 7,
                // Right face
                1, 2, 5, 2, 5, 6,
                // Pyramid
                8, 9, 10, 8, 10, 11,
                8, 11, 12, 8, 12, 9,
                9, 10, 11, 9, 11, 12
            ];

            // Write a_Position, a_Color, and a_TextureCoord using gl.ARRAY_BUFFER
            gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexesAndColors), gl.STATIC_DRAW);

            var vertexPositionAttribute = gl.getAttribLocation(gl.program, "a_Position");
            gl.enableVertexAttribArray(vertexPositionAttribute);
            gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 4 * (3 + 3 + 2), 0);

            var vertexColorAttribute = gl.getAttribLocation(gl.program, "a_Color");
            gl.enableVertexAttribArray(vertexColorAttribute);
            gl.vertexAttribPointer(vertexColorAttribute, 3, gl.FLOAT, false, 4 * (3 + 3 + 2), 4 * 3);

            var textureCoordAttribute = gl.getAttribLocation(gl.program, 'a_TextureCoord');
            gl.vertexAttribPointer(textureCoordAttribute, 2, gl.FLOAT, false, 4 * (3 + 3 + 2), 4 * 6);
            gl.enableVertexAttribArray(textureCoordAttribute);

            // Write indexes in gl.ELEMENT_ARRAY_BUFFER
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(indexes), gl.STATIC_DRAW);
        }

        function initProjection(gl, canvas) {
            var pMatrix = mat4.create(),
                u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
                ratio = canvas.width/canvas.height;

            mat4.perspective(pMatrix, toRadian(60), ratio, 0.1, 100);
            gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
        }

        function toRadian(angle) {
            return angle * Math.PI / 180;
        }

        function initShaders(gl, vsSource, fsSource) {
            // Create vertex shader object and compile shader
            var vertexShader = gl.createShader(gl.VERTEX_SHADER);
            gl.shaderSource(vertexShader, vsSource);
            gl.compileShader(vertexShader);

            // Create fragment shader object and compile shader
            var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
            gl.shaderSource(fragmentShader, fsSource);
            gl.compileShader(fragmentShader);

            // Create shader program and attach shaders
            var program = gl.createProgram();
            gl.attachShader(program, vertexShader);
            gl.attachShader(program, fragmentShader);
            gl.linkProgram(program);

            if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
                console.log("ERROR INITIALIZING SHADER PROGRAM: " + gl.getProgramInfoLog(program));
                return false;
            }

            // Use the program object
            gl.useProgram(program);
            gl.program = program;

            return true;
        }
    </script>
</body>
</html>

