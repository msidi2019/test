<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gl-matrix/2.8.1/gl-matrix-min.js"></script>
    <title>Ejercicio 5</title>
</head>

<body onload="init()">
    <canvas id="myCanvas" width="640" height="480"></canvas><br>
    <b>Rotation</b>
    <input type="checkbox" name="rotation" checked>
    <input type="range" id="speed" min="1" max="3" value="1" step="1"> Speed<br>
    <b>WebGL primitive</b>
    <input type="radio" name="primitive" value="triangles" checked> Triangles
    <input type="radio" name="primitive" value="lines"> Lines<br>
    <b>Projection type</b>
    <input type="radio" name="projection" value="perspective" checked> Perspective
    <input type="radio" name="projection" value="orthographic"> Orthographic<br>

    <script id="shaderVs" type="x-shader/x-vertex">
        attribute vec4 a_Position;
        attribute vec2 a_TexCoord;
        varying highp vec2 v_TexCoord;
        uniform mat4 u_pMatrix;
        uniform mat4 u_vMatrix;
        uniform mat4 u_mvMatrix;
        void main(){
            gl_Position = u_pMatrix * u_vMatrix * u_mvMatrix * a_Position;
            v_TexCoord = a_TexCoord;
        }
    </script>

    <script id="shaderFs" type="x-shader/x-fragment">
        precision mediump float;
        varying highp vec2 v_TexCoord;
        uniform sampler2D u_Sampler;
        void main() {
            gl_FragColor = texture2D(u_Sampler, v_TexCoord);
        }
    </script>

    <script>
        var gl,
            canvas,
            count = 0.0,
            ratio,
            z = 3,
            projectionValue = document.querySelector('input[name="projection"]:checked').value;

        function init(){
            
            // Get canvas object from the DOM and Init WebGL Context
            canvas = document.getElementById("myCanvas");
            gl = canvas.getContext("webgl");

            if (!gl) {
            console.log("FAILED TO GET THE RENDERING CONTEXT FOR WEBGL.");
            return;
            }

            // Init Shaders 
            var vs = document.getElementById('shaderVs').innerHTML,
                fs = document.getElementById('shaderFs').innerHTML;

            if (!initShaders(gl, vs, fs)){
            console.log("FAILED TO INITIALIZE SHADERS.");
            return;
            }

            // Init vertex shader
            initVertexShader(gl);

            // Init projection matrix
            initProjection(gl, canvas);

            // Set clear canvas color
            gl.clearColor(0.0, 0.0, 0.0, 1.0);

            // Hidden surface removal
            gl.enable(gl.DEPTH_TEST);

            // Load textures
            loadTexture(gl, 'texture1.jpg', 0);
            loadTexture(gl, 'texture2.jpg', 1);

            // Event listener for mouse wheel
            document.addEventListener('wheel', function (event) {
                if (projectionValue == 'perspective'){
                    z = event.deltaY > 0 ? z - 1 : z + 1;
                }
            });
            drawScene();
        }

        function drawScene() {
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
            
            projectionValue = document.querySelector('input[name="projection"]:checked').value,
            u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
            u_vMatrix = gl.getUniformLocation(gl.program, "u_vMatrix"),
            ratio = canvas.width/canvas.height;
            
            switch (projectionValue) {
                case "perspective":
                    var pMatrix = mat4.perspective(mat4.create(), toRadian(60), ratio, 0.1, 100),
                        vMatrix = mat4.lookAt(mat4.create(), [0, 0, z], [0, 0, 0], [0, 1, 0]);
                    break;
            
                case "orthographic":
                    var pMatrix = mat4.ortho(mat4.create(), -ratio, ratio, -1.0, 1.50, -1.0, 1.50),
                        vMatrix = mat4.create();
                    break;
                default:
            }

            gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
            gl.uniformMatrix4fv(u_vMatrix, false, vMatrix);

            var rotationChecked = document.querySelector('input[name="rotation"]').checked,
                primitiveValue = document.querySelector('input[name="primitive"]:checked').value,
                mvMatrix = mat4.fromRotation(mat4.create(), count, [0, 1, 0]),
                u_mvMatrix = gl.getUniformLocation(gl.program, "u_mvMatrix");

            gl.uniformMatrix4fv(u_mvMatrix, false, mvMatrix);

            var speed = parseInt(document.getElementById("speed").value);

            if (rotationChecked){
                count += 0.01 * speed;
            }

            switch (primitiveValue) {
                case "triangles":
                    // DRAW PRIMITIVE ELEMENTS
                    gl.drawArrays(gl.TRIANGLES, 0, 36);
                    break;
                case "lines":
                    // DRAW LINES
                    gl.drawArrays(gl.LINES, 0, 36);
                    break;
                default:
            }

            // CALL DRAWSCENE AGAIN IN THE NEXT BROWSER REPAINT
            requestAnimationFrame(drawScene);
        }

        function initVertexShader(gl) {
            // Vertexes, colors, and texture coordinates (X, Y, Z, R, G, B, S, T)
            var vertexesColorsAndTexCoords = [
                // Front face
                -0.5, -0.5,  0.5,   1.0, 0.0, 0.0,   0.0, 0.0,  // Bottom-left
                 0.5, -0.5,  0.5,   0.0, 1.0, 0.0,   1.0, 0.0,  // Bottom-right
                 0.5,  0.5,  0.5,   0.0, 0.0, 1.0,   1.0, 1.0,  // Top-right
                -0.5,  0.5,  0.5,   1.0, 1.0, 0.0,   0.0, 1.0,  // Top-left
                // Back face
                -0.5, -0.5, -0.5,   1.0, 0.0, 0.0,   1.0, 0.0,  // Bottom-left
                -0.5,  0.5, -0.5,   0.0, 1.0, 0.0,   0.0, 0.0,  // Top-left
                 0.5,  0.5, -0.5,   0.0, 0.0, 1.0,   0.0, 1.0,  // Top-right
                 0.5, -0.5, -0.5,   1.0, 1.0, 0.0,   1.0, 1.0,  // Bottom-right
                // Top face
                -0.5,  0.5, -0.5,   1.0, 0.0, 0.0,   0.0, 1.0,  // Bottom-left
                -0.5,  0.5,  0.5,   0.0, 1.0, 0.0,   1.0, 1.0,  // Top-left
                 0.5,  0.5,  0.5,   0.0, 0.0, 1.0,   1.0, 0.0,  // Top-right
                 0.5,  0.5, -0.5,   1.0, 1.0, 0.0,   0.0, 0.0,  // Bottom-right
                // Bottom face
                -0.5, -0.5, -0.5,   1.0, 0.0, 0.0,   0.0, 0.0,  // Top-left
                 0.5, -0.5, -0.5,   0.0, 1.0, 0.0,   1.0, 0.0,  // Top-right
                 0.5, -0.5,  0.5,   0.0, 0.0, 1.0,   1.0, 1.0,  // Bottom-right
                -0.5, -0.5,  0.5,   1.0, 1.0, 0.0,   0.0, 1.0,  // Bottom-left
                // Right face
                 0.5, -0.5, -0.5,   1.0, 0.0, 0.0,   1.0, 0.0,  // Bottom-left
                 0.5,  0.5, -0.5,   0.0, 1.0, 0.0,   0.0, 0.0,  // Top-left
                 0.5,  0.5,  0.5,   0.0, 0.0, 1.0,   0.0, 1.0,  // Top-right
                 0.5, -0.5,  0.5,   1.0, 1.0, 0.0,   1.0, 1.0,  // Bottom-right
                // Left face
                -0.5, -0.5, -0.5,   1.0, 0.0, 0.0,   0.0, 0.0,  // Bottom-left
                -0.5, -0.5,  0.5,   0.0, 1.0, 0.0,   1.0, 0.0,  // Bottom-right
                -0.5,  0.5,  0.5,   0.0, 0.0, 1.0,   1.0, 1.0,  // Top-right
                -0.5,  0.5, -0.5,   1.0, 1.0, 0.0,   0.0, 1.0   // Top-left
            ];

            // Write data to buffer
            var vertexBuffer = gl.createBuffer();
            gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertexesColorsAndTexCoords), gl.STATIC_DRAW);

            // Set up attributes
            var FSIZE = vertexesColorsAndTexCoords.BYTES_PER_ELEMENT;
            var a_Position = gl.getAttribLocation(gl.program, 'a_Position');
            gl.vertexAttribPointer(a_Position, 3, gl.FLOAT, false, FSIZE * 8, 0);
            gl.enableVertexAttribArray(a_Position);

            var a_Color = gl.getAttribLocation(gl.program, 'a_Color');
            gl.vertexAttribPointer(a_Color, 3, gl.FLOAT, false, FSIZE * 8, FSIZE * 3);
            gl.enableVertexAttribArray(a_Color);

            var a_TexCoord = gl.getAttribLocation(gl.program, 'a_TexCoord');
            gl.vertexAttribPointer(a_TexCoord, 2, gl.FLOAT, false, FSIZE * 8, FSIZE * 6);
            gl.enableVertexAttribArray(a_TexCoord);
        }

        function loadTexture(gl, url, index) {
            var texture = gl.createTexture();
            gl.bindTexture(gl.TEXTURE_2D, texture);

            // Fill the texture with a 1x1 blue pixel while waiting for the image
            var pixel = new Uint8Array([0, 0, 255, 255]);  // opaque blue
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixel);

            // Asynchronously load the image
            var image = new Image();
            image.onload = function() {
                gl.bindTexture(gl.TEXTURE_2D, texture);
                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
                gl.generateMipmap(gl.TEXTURE_2D);
            };
            image.src = url;
        }

        function initProjection(gl, canvas) {
            var pMatrix = mat4.create(),
                u_pMatrix = gl.getUniformLocation(gl.program, "u_pMatrix"),
                ratio = canvas.width / canvas.height;

            mat4.perspective(pMatrix, toRadian(60), ratio, 0.1, 100);
            gl.uniformMatrix4fv(u_pMatrix, false, pMatrix);
        }

        function toRadian(angle) {
            return angle * Math.PI / 180;
        }

        function initShaders(gl, vsSource, fsSource) {
            // Create vertex shader object and compile shader
            var vertexShader = gl.createShader(gl.VERTEX_SHADER);
            gl.shaderSource(vertexShader, vsSource);
            gl.compileShader(vertexShader);

            // Create fragment shader object and compile shader
            var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
            gl.shaderSource(fragmentShader, fsSource);
            gl.compileShader(fragmentShader);

            // Create shader program and attach shaders
            var program = gl.createProgram();
            gl.attachShader(program, vertexShader);
            gl.attachShader(program, fragmentShader);
            gl.linkProgram(program);

            if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
                console.log("ERROR INITIALIZING SHADER PROGRAM: " + gl.getProgramInfoLog(program));
                return false;
            }

            gl.useProgram(program);
            gl.program = program;

            return true;
        }

    </script>

</html>

